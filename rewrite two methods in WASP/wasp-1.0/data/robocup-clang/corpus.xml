<?xml version="1.0"?>
<!DOCTYPE examples [
  <!ELEMENT examples (example*)>
  <!ELEMENT example (nl*,syn*,augsyn*,mrl*,mrl-parse?,parse*)>
  <!ELEMENT nl (#PCDATA)>
  <!ELEMENT syn (#PCDATA)>
  <!ELEMENT augsyn (#PCDATA)>
  <!ELEMENT mrl (#PCDATA)>
  <!ELEMENT mrl-parse (node*)>
  <!ELEMENT node (#PCDATA)>
  <!ELEMENT parse (#PCDATA)>
]>
<examples>

<example id="2">
<nl lang="en">
If the ball is in our half , then position player 5 at -LRB- 0 , 10 -RRB- , and set its ball attraction to -LRB- 0.75 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 5)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))) (, ,) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.75)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 5-[Unum:7] at-[Action:8] -LRB--[Point:11] 0-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] ,-[Point:10] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.75-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15004 direc
        ((bpos (half our)) (do (player our {5}) (pos (pt-with-ball-attraction (pt 0 10) (pt 0.75 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.75 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="5">
<nl lang="en">
If the ball is in opponent 's half , then the default position of player 5 should be within 4 meters of -LRB- -13 , -18 -RRB- with ball attraction -LRB- 0.2 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (, ,) (ADVP (RB then)) (NP (NP (DT the) (NN default) (NN position)) (PP (IN of) (NP (NN player) (CD 5)))) (VP (MD should) (VP (VB be) (PP (IN within) (NP (NP (CD 4) (NNS meters)) (PP (IN of) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -13)) (, ,) (NP (CD -18)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.2)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] the-[Action:8] default-[Action:8] position-[Action:8] of-[Action:8] player-[Player:6] 5-[Unum:7] should-[Directive:5] be-[Action:8] within-[Region:9] 4-[Num:17] meters-[Region:9] of-[Region:9] -LRB--[Point:11] -13-[Num:12] ,-[Point:11] -18-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.2-[Num:15] ,-[Point:14] 0.1-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule FH35 direc
        ((bpos (half opp)) (do (player our {5}) (home (circle (pt-with-ball-attraction (pt -13.0 -18.0) (pt 0.2 0.1)) 4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -13.0 }) </node>
<node id="13"> *n:Num -> ({ -18.0 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.2 }) </node>
<node id="16"> *n:Num -> ({ 0.1 }) </node>
<node id="17"> *n:Num -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="10">
<nl lang="en">
The default position of player 11 should always be -LRB- 15 , 15 -RRB-
</nl>
<syn lang="en">
(S (NP (NP (DT The) (NN default) (NN position)) (PP (IN of) (NP (NN player) (CD 11)))) (VP (MD should) (ADVP (RB always)) (VP (VB be) (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD 15)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S The-[Action:6] default-[Action:6] position-[Action:6] of-[Action:6] player-[Player:4] 11-[Unum:5] should-[Directive:3] always-[Condition:2] be-[Action:6] -LRB--[Point:8] 15-[Num:9] ,-[Point:8] 15-[Num:10] -RRB--[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player11 direc
        ((true) (do (player our {11}) (home (pt 15 15)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 11 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="9"> *n:Num -> ({ 15 }) </node>
<node id="10"> *n:Num -> ({ 15 }) </node>
</mrl-parse>
</example>

<example id="12">
<nl lang="en">
If the ball is close to the far left corner when the play mode is play_on , then player 4 should pass the ball to opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (ADJP (JJ close) (PP (TO to) (NP (DT the) (ADJP (RB far) (JJ left)) (NN corner))))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN play) (NN mode)) (VP (VBZ is) (NP (NN play_on))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] close-[Condition:4] to-[Condition:4] the-[Region:6] far-[Team:7] left-[Region:5] corner-[Region:6] when-[Condition:2] the-[Condition:3] play-[Condition:3] mode-[Condition:3] is-[Condition:3] play_on-[Condition:3] ,-[Rule:1] then-[Rule:1] player-[Player:9] 4-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR10R6 direc
        ((and (playm play_on) (bpos (left-quarter (near-goal-line opp)))) (do (player our {4}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 4 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="14">
<nl lang="en">
If the ball is in -LSB- -LRB- -17.5 , -17 -RRB- , -LRB- 0 , 0 -RRB- -RSB-  , then all players except the goalie should pass the ball to the far left side of opponent 's midfield
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -17.5)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (, ,) (ADVP (RB then)) (NP (NP (DT all) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN midfield))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] -LSB--[Region:3] -LRB--[Point:4] -17.5-[Num:5] ,-[Point:4] -17-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 0-[Num:8] ,-[Point:7] 0-[Num:9] -RRB--[Point:7] -RSB--[Region:3] ,-[Rule:1] then-[Rule:1] all-[Player:11] players-[Player:11] except-[Player:11] the-[Unum:12] goalie-[Unum:12] should-[Directive:10] pass-[Action:13] the-[Action:13] ball-[Action:13] to-[Action:13] the-[Region:14] far-[Region:14] left-[Region:14] side-[Region:14] of-[Region:14] opponent-[Team:16] 's-[Team:16] midfield-[Region:15])
</augsyn>
<mrl lang="robocup-clang">
(definerule b37 direc
        ((bpos (rec (pt -17.5 -17) (pt 0 0))) (do (player-except our {1}) (pass (left-quarter (midfield opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ -17.5 }) </node>
<node id="6"> *n:Num -> ({ -17 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
<node id="9"> *n:Num -> ({ 0 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 1 }) </node>
<node id="13"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="15"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="16"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="15">
<nl lang="en">
When the ball is in RP1 , players 2 to 11 should pass the ball to RP2
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP1)))))) (, ,) (NP (NP (NNS players)) (NP (QP (CD 2) (TO to) (CD 11)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NNP RP2))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP1-[Ident:4] ,-[Rule:1] players-[Player:6] 2-[Unum:7] to-[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] RP2-[Ident:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b1 direc
        ((bpos "RP1") (do (player-range our 2 11) (pass "RP2"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP1 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP2 }) </node>
</mrl-parse>
</example>

<example id="17">
<nl lang="en">
If player 7 has the ball , then it should clear the ball from -LRB- 10 , -40 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN player) (CD 7)) (VP (VBZ has) (NP (DT the) (NN ball))))) (, ,) (ADVP (RB then)) (NP (PRP it)) (VP (MD should) (VP (VB clear) (NP (DT the) (NN ball)) (PP (IN from) (NP (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD -40)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] player-[Player:3] 7-[Unum:4] has-[Condition:2] the-[Condition:2] ball-[Condition:2] ,-[Rule:1] then-[Rule:1] it-[Player:6] should-[Directive:5] clear-[Action:7] the-[Action:7] ball-[Action:7] from-[Action:7] -LRB--[Point:9] 10-[Num:10] ,-[Point:9] -40-[Num:11] -RRB--[Point:9])
</augsyn>
<mrl lang="robocup-clang">
(definerule utdefclr3 direc
        ((bowner (player our {7})) (do (player our {7}) (clear (pt 10 -40)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 7 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ *^:Player }) </node>
<node id="7"> *n:Action -> ({ ( clear *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ *n:Point }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ 10 }) </node>
<node id="11"> *n:Num -> ({ -40 }) </node>
</mrl-parse>
</example>

<example id="19">
<nl lang="en">
Call the condition where players 10 and 11 are not the ball owner to be COND9
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (NNS players) (QP (CD 10) (CC and) (CD 11))) (VP (VBP are) (RB not) (NP (DT the) (NN ball) (NN owner)))))) (VP (TO to) (VP (VB be) (NP (NNP COND9)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] players-[Player:4] 10-[Unum:5] and-[Player:4] 11-[Unum:6] are-[Condition:3] not-[Condition:2] the-[Condition:3] ball-[Condition:3] owner-[Condition:3] to-[Statement:0] be-[Statement:0] COND9-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND9"
          (not (bowner (player our {10 11}))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND9 }) </node>
<node id="2"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 10 }) </node>
<node id="6"> *n:Unum -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="20">
<nl lang="en">
If the ball is in our half , then position player 5 at -LRB- 0 , 10 -RRB- and set its ball attraction to -LRB- 0.75 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 5)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.75)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 5-[Unum:7] at-[Action:8] -LRB--[Point:11] 0-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.75-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15015 direc
        ((bpos (half our)) (do (player our {5}) (pos (pt-with-ball-attraction (pt 0 10) (pt 0.75 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.75 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="23">
<nl lang="en">
If the ball is in -LSB- -LRB- 0 , -17 -RRB- , -LRB- 17.5 , 0 -RRB- -RSB- , then all players except the goalie should pass the ball to -LSB- -LRB- 17.5 , 0 -RRB- , -LRB- 35 , 17 -RRB- -RSB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (, ,) (ADVP (RB then)) (NP (NP (DT all) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] -LSB--[Region:3] -LRB--[Point:4] 0-[Num:5] ,-[Point:4] -17-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 17.5-[Num:8] ,-[Point:7] 0-[Num:9] -RRB--[Point:7] -RSB--[Region:3] ,-[Rule:1] then-[Rule:1] all-[Player:11] players-[Player:11] except-[Player:11] the-[Unum:12] goalie-[Unum:12] should-[Directive:10] pass-[Action:13] the-[Action:13] ball-[Action:13] to-[Action:13] -LSB--[Region:14] -LRB--[Point:15] 17.5-[Num:16] ,-[Point:15] 0-[Num:17] -RRB--[Point:15] ,-[Region:14] -LRB--[Point:18] 35-[Num:19] ,-[Point:18] 17-[Num:20] -RRB--[Point:18] -RSB--[Region:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b39 direc
        ((bpos (rec (pt 0 -17) (pt 17.5 0))) (do (player-except our {1}) (pass (rec (pt 17.5 0) (pt 35 17))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ -17 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 17.5 }) </node>
<node id="9"> *n:Num -> ({ 0 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 1 }) </node>
<node id="13"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="15"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="16"> *n:Num -> ({ 17.5 }) </node>
<node id="17"> *n:Num -> ({ 0 }) </node>
<node id="18"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="19"> *n:Num -> ({ 35 }) </node>
<node id="20"> *n:Num -> ({ 17 }) </node>
</mrl-parse>
</example>

<example id="24">
<nl lang="en">
Player 3 should not intercept the ball if the ball is within 32 meters of our goal line and not in our left penalty area
</nl>
<syn lang="en">
(S (NP (NN Player) (CD 3)) (VP (MD should) (RB not) (VP (VB intercept) (NP (DT the) (NN ball)))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (CD 32) (NNS meters)) (PP (IN of) (NP (PRP$ our) (NN goal) (NN line))))) (CC and) (PP (RB not) (IN in) (NP (PRP$ our) (JJ left) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S Player-[Player:14] 3-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] the-[Action:16] ball-[Action:16] if-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] of-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] and-[Condition:2] not-[Condition:8] in-[Condition:9] our-[Team:12] left-[Region:10] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b21001 direc
        ((and (bpos (from-goal-line our 0 32)) (not (bpos (left (penalty-area our))))) (dont (player our {3}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 3 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="27">
<nl lang="en">
Before kick - off , the default position of goalie should be directly in front of our goal
</nl>
<syn lang="en">
(S (PP (IN Before) (NP (NN kick) (: -) (NN off))) (, ,) (NP (NP (DT the) (NN default) (NN position)) (PP (IN of) (NP (NN goalie)))) (VP (MD should) (VP (VB be) (ADVP (RB directly)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal))))))))
</syn>
<augsyn lang="en">
(S Before-[Condition:2] kick-[Condition:2] --[Condition:2] off-[Condition:2] ,-[Rule:1] the-[Action:9] default-[Action:9] position-[Action:9] of-[Action:9] goalie-[Player:7] should-[Directive:6] be-[Action:9] directly-[Point:11] in-[Point:11] front-[Point:11] of-[Point:11] our-[Team:12] goal-[Point:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule Formation_BK_1 direc
        ((or (playm bko) (playm ag_our) (playm ag_opp)) (do (player our {1}) (home (front-of-goal our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ag_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm ag_opp ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="28">
<nl lang="en">
Let COND15 be true
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP COND15)) (VP (VB be) (ADJP (JJ true))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] COND15-[Ident:1] be-[Statement:0] true-[Condition:2])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND15" (true))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND15 }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
</mrl-parse>
</example>

<example id="30">
<nl lang="en">
If it is our goalie catch , then position player 4 at -LRB- -7 , 8 -RRB- with ball attraction -LRB- 0.3 , 0.2 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ is) (NP (PRP$ our) (NN goalie) (NN catch))))) (, ,) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 4)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -7)) (, ,) (NP (CD 8)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.3)) (, ,) (NP (CD 0.2)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] is-[Condition:2] our-[Condition:2] goalie-[Condition:2] catch-[Condition:2] ,-[Rule:1] then-[Rule:1] position-[Action:6] player-[Player:4] 4-[Unum:5] at-[Action:6] -LRB--[Point:9] -7-[Num:10] ,-[Point:9] 8-[Num:11] -RRB--[Point:9] with-[Point:8] ball-[Point:8] attraction-[Point:8] -LRB--[Point:12] 0.3-[Num:13] ,-[Point:12] 0.2-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule GCO4 direc
        ((playm gc_our) (do (player our {4}) (pos (pt-with-ball-attraction (pt -7.0 8.0) (pt 0.3 0.2))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 4 }) </node>
<node id="6"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -7.0 }) </node>
<node id="11"> *n:Num -> ({ 8.0 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.3 }) </node>
<node id="14"> *n:Num -> ({ 0.2 }) </node>
</mrl-parse>
</example>

<example id="33">
<nl lang="en">
If the ball is in RP8 , then all players except the goalie should pass the ball to RP15
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP8)))))) (, ,) (ADVP (RB then)) (NP (NP (DT all) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NNP RP15))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP8-[Ident:4] ,-[Rule:1] then-[Rule:1] all-[Player:6] players-[Player:6] except-[Player:6] the-[Unum:7] goalie-[Unum:7] should-[Directive:5] pass-[Action:8] the-[Action:8] ball-[Action:8] to-[Action:8] RP15-[Ident:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule b12 direc
        ((bpos "RP8") (do (player-except our {1}) (pass "RP15"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP8 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 1 }) </node>
<node id="8"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="10"> *n:Ident -> ({ RP15 }) </node>
</mrl-parse>
</example>

<example id="36">
<nl lang="en">
If the ball is in our half , then position player 1 directly in front of our goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 1)) (PP (ADVP (RB directly)) (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 1-[Unum:7] directly-[Point:10] in-[Point:10] front-[Point:10] of-[Point:10] our-[Team:11] goal-[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15011 direc
        ((bpos (half our)) (do (player our {1}) (pos (front-of-goal our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 1 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="38">
<nl lang="en">
If the ball is in opponent 's goal area , then the one who owns the ball should shoot it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN area)))))) (, ,) (ADVP (RB then)) (NP (NP (DT the) (NN one)) (SBAR (WHNP (WP who)) (S (VP (VBZ owns) (NP (DT the) (NN ball)))))) (VP (MD should) (VP (VB shoot) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:5] ball-[Condition:5] is-[Condition:5] in-[Condition:5] opponent-[Team:7] 's-[Team:7] goal-[Region:6] area-[Region:6] ,-[Rule:1] then-[Rule:1] the-[Player:4] one-[Player:4] who-[Player:4] owns-[Condition:3] the-[Condition:3] ball-[Condition:3] should-[Directive:8] shoot-[Action:10] it-[Action:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule angezi direc
        ((and (bowner (player our {X})) (bpos (goal-area opp))) (do (player our {X}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( goal-area *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="10"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="39">
<nl lang="en">
The default position of the goalie should always be in front of our goal
</nl>
<syn lang="en">
(S (NP (NP (DT The) (NN default) (NN position)) (PP (IN of) (NP (DT the) (NN goalie)))) (VP (MD should) (ADVP (RB always)) (VP (VB be) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal))))))))
</syn>
<augsyn lang="en">
(S The-[Action:6] default-[Action:6] position-[Action:6] of-[Action:6] the-[Player:4] goalie-[Player:4] should-[Directive:3] always-[Condition:2] be-[Action:6] in-[Point:8] front-[Point:8] of-[Point:8] our-[Team:9] goal-[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player1 direc
        ((true) (do (player our {1}) (home (front-of-goal our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 1 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="43">
<nl lang="en">
If our team have the ball and the ball is in the right side of opponent 's penalty area , then our team should pass the ball to -LRB- 80 , 4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP$ our) (NN team)) (VP (VBP have) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))) (, ,) (ADVP (RB then)) (NP (PRP$ our) (NN team)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 80)) (, ,) (NP (CD 4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:4] team-[Player:4] have-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:5] ball-[Condition:5] is-[Condition:5] in-[Condition:5] the-[Region:6] right-[Region:6] side-[Region:6] of-[Region:6] opponent-[Team:8] 's-[Team:8] penalty-[Region:7] area-[Region:7] ,-[Rule:1] then-[Rule:1] our-[Player:10] team-[Player:10] should-[Directive:9] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] -LRB--[Point:13] 80-[Num:14] ,-[Point:13] 4-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule Shoot2 direc
        ((and (bowner (player our {0})) (bpos (right (penalty-area opp)))) (do (player our {0}) (pass (pt 80 4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="8"> *n:Team -> ({ opp }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 80 }) </node>
<node id="15"> *n:Num -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="52">
<nl lang="en">
When the goalie has the ball on the right side near our goal line , it should pass the ball to player 2
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN goalie)) (VP (VBZ has) (NP (DT the) (NN ball)) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (NP (PRP it)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NN player) (CD 2))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Player:4] goalie-[Player:4] has-[Condition:3] the-[Condition:3] ball-[Condition:3] on-[Condition:6] the-[Region:7] right-[Region:7] side-[Region:7] near-[Region:8] our-[Team:9] goal-[Region:8] line-[Region:8] ,-[Rule:1] it-[Player:11] should-[Directive:10] pass-[Action:12] the-[Action:12] ball-[Action:12] to-[Action:12] player-[Player:13] 2-[Unum:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule goalipass2 direc
        ((and (bowner (player our {1})) (bpos (right (near-goal-line our)))) (do (player our {1}) (pass (player our {2})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 1 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ *^:Player }) </node>
<node id="12"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="13"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="14"> *n:Unum -> ({ 2 }) </node>
</mrl-parse>
</example>

<example id="54">
<nl lang="en">
If it is not before kick - off , then player 8 should be positioned at -LRB- 5 , -12 -RRB- with ball attraction -LRB- 0.7 , 0.25 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ is) (RB not) (PP (IN before) (NP (NN kick) (: -) (NN off)))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 5)) (, ,) (NP (CD -12)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.7)) (, ,) (NP (CD 0.25)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] is-[Condition:2] not-[Condition:2] before-[Condition:2] kick-[Condition:2] --[Condition:2] off-[Condition:2] ,-[Rule:1] then-[Rule:1] player-[Player:5] 8-[Unum:6] should-[Directive:4] be-[Action:7] positioned-[Action:7] at-[Action:7] -LRB--[Point:10] 5-[Num:11] ,-[Point:10] -12-[Num:12] -RRB--[Point:10] with-[Point:9] ball-[Point:9] attraction-[Point:9] -LRB--[Point:13] 0.7-[Num:14] ,-[Point:13] 0.25-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule off_Pos_R_8 direc
        ((not (playm bko)) (do (player our {8}) (pos (pt-with-ball-attraction (pt 5.00 -12.00) (pt 0.70 0.25))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 8 }) </node>
<node id="7"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ *n:Point }) </node>
<node id="9"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ 5.00 }) </node>
<node id="12"> *n:Num -> ({ -12.00 }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 0.70 }) </node>
<node id="15"> *n:Num -> ({ 0.25 }) </node>
</mrl-parse>
</example>

<example id="55">
<nl lang="en">
When the ball is in opponent 's midfield , player 6 should dribble the ball to the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN midfield)))))) (, ,) (NP (NN player) (CD 6)) (VP (MD should) (VP (VB dribble) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] midfield-[Region:3] ,-[Rule:1] player-[Player:6] 6-[Unum:7] should-[Directive:5] dribble-[Action:8] the-[Action:8] ball-[Action:8] to-[Action:8] the-[Team:10] opponent-[Team:10] 's-[Team:10] penalty-[Region:9] area-[Region:9])
</augsyn>
<mrl lang="robocup-clang">
(definerule Drible_6 direc
        ((bpos (midfield opp)) (do (player our {6}) (dribble (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 6 }) </node>
<node id="8"> *n:Action -> ({ ( dribble *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="10"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="58">
<nl lang="en">
If the ball is in O4R3 during normal play , then players 9 , 10 and 11 should dribble the ball to -LSB- -LRB- 40 , -28 -RRB- , -LRB- 46 , -22 -RRB- -RSB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP O4R3)))) (PP (IN during) (NP (JJ normal) (NN play))))) (, ,) (ADVP (RB then)) (NP (NNS players) (QP (CD 9) (, ,) (CD 10) (CC and) (CD 11))) (VP (MD should) (VP (VB dribble) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 40)) (, ,) (NP (CD -28)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 46)) (, ,) (NP (CD -22)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] O4R3-[Ident:6] during-[Condition:3] normal-[Condition:3] play-[Condition:3] ,-[Rule:1] then-[Rule:1] players-[Player:8] 9-[Unum:9] ,-[Player:8] 10-[Unum:10] and-[Player:8] 11-[Unum:11] should-[Directive:7] dribble-[Action:12] the-[Action:12] ball-[Action:12] to-[Action:12] -LSB--[Region:13] -LRB--[Point:14] 40-[Num:15] ,-[Point:14] -28-[Num:16] -RRB--[Point:14] ,-[Region:13] -LRB--[Point:17] 46-[Num:18] ,-[Point:17] -22-[Num:19] -RRB--[Point:17] -RSB--[Region:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule O4R3Dribble direc
        ((and (playm play_on) (bpos "O4R3")) (do (player our {9 10 11}) (dribble (rec (pt 40.00 -28.00) (pt 46.00 -22.00))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ O4R3 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 9 }) </node>
<node id="10"> *n:Unum -> ({ 10 }) </node>
<node id="11"> *n:Unum -> ({ 11 }) </node>
<node id="12"> *n:Action -> ({ ( dribble *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 40.00 }) </node>
<node id="16"> *n:Num -> ({ -28.00 }) </node>
<node id="17"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="18"> *n:Num -> ({ 46.00 }) </node>
<node id="19"> *n:Num -> ({ -22.00 }) </node>
</mrl-parse>
</example>

<example id="59">
<nl lang="en">
If the ball is within 32 meters from our goal line but not in our left penalty - area , then player 8 should not intercept the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))) (CC but) (PP (RB not) (IN in) (NP (PRP$ our) (JJ left) (NN penalty) (: -) (NN area))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (RB not) (VP (VB intercept) (NP (DT the) (NN ball)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] but-[Condition:2] not-[Condition:8] in-[Condition:9] our-[Team:12] left-[Region:10] penalty-[Region:11] --[Region:11] area-[Region:11] ,-[Rule:1] then-[Rule:1] player-[Player:14] 8-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] the-[Action:16] ball-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b20001 direc
        ((and (bpos (from-goal-line our 0 32)) (not (bpos (left (penalty-area our))))) (dont (player our {8}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 8 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="63">
<nl lang="en">
Let COND14 be true
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP COND14)) (VP (VB be) (ADJP (JJ true))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] COND14-[Ident:1] be-[Statement:0] true-[Condition:2])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND14" (true))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND14 }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
</mrl-parse>
</example>

<example id="71">
<nl lang="en">
If the ball is in our half , then position player 3 at -LRB- 10 , 10 -RRB- with ball attraction -LRB- 0.75 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD 10)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.75)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 3-[Unum:7] at-[Action:8] -LRB--[Point:11] 10-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.75-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15013 direc
        ((bpos (half our)) (do (player our {3}) (pos (pt-with-ball-attraction (pt 10 10) (pt 0.75 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 10 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.75 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="73">
<nl lang="en">
Whenever the ball is 37 to 42 meters from our goal line , player 2 should position itself 42 meters from our goal
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB Whenever)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 37) (TO to) (CD 42)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))) (, ,) (NP (NN player) (CD 2)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (NP (NP (CD 42) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal)))))))
</syn>
<augsyn lang="en">
(S Whenever-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 37-[Num:5] to-[Region:3] 42-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] player-[Player:8] 2-[Unum:9] should-[Directive:7] position-[Action:10] itself-[Action:10] 42-[Num:14] meters-[Point:12] from-[Point:12] our-[Team:13] goal-[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2d direc
        ((bpos (from-goal-line our 37 42)) (do (player our {2}) (pos (from-goal our 42)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 37 }) </node>
<node id="6"> *n:Num -> ({ 42 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="13"> *n:Team -> ({ our }) </node>
<node id="14"> *n:Num -> ({ 42 }) </node>
</mrl-parse>
</example>

<example id="75">
<nl lang="en">
Let CloseToBall_5 be the condition where the ball is within 6 meters of player 5
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP CloseToBall_5)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN of) (NP (NN player) (CD 5)))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] CloseToBall_5-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] of-[Region:3] player-[Player:5] 5-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definec "CloseToBall_5"
          (bpos (circle (pt (player our {5})) 6)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ CloseToBall_5 }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 5 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="76">
<nl lang="en">
If the ball is in our half , then position player 5 at -LRB- -10 , 15 -RRB- and set its ball attraction to -LRB- 0.7 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 5)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 15)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.7)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 5-[Unum:7] at-[Action:8] -LRB--[Point:11] -10-[Num:12] ,-[Point:11] 15-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.7-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15004 direc
        ((bpos (half our)) (do (player our {5}) (pos (pt-with-ball-attraction (pt -10 15) (pt 0.7 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -10 }) </node>
<node id="13"> *n:Num -> ({ 15 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.7 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="77">
<nl lang="en">
If the ball is within 32 meters from our goal line , then position player 10 at -LRB- 15 , 0 -RRB- and set its ball attraction to -LRB- 0.5 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 10)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD 0)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:10] player-[Player:8] 10-[Unum:9] at-[Action:10] -LRB--[Point:13] 15-[Num:14] ,-[Point:13] 0-[Num:15] -RRB--[Point:13] and-[Point:12] set-[Point:12] its-[Point:12] ball-[Point:12] attraction-[Point:12] to-[Point:12] -LRB--[Point:16] 0.5-[Num:17] ,-[Point:16] 0.4-[Num:18] -RRB--[Point:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b16018 direc
        ((bpos (from-goal-line our 0 32)) (do (player our {10}) (pos (pt-with-ball-attraction (pt 15 0) (pt 0.5 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 10 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 15 }) </node>
<node id="15"> *n:Num -> ({ 0 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0.5 }) </node>
<node id="18"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="80">
<nl lang="en">
When the ball is in -LSB- -LRB- 0 , 0 -RRB- , -LRB- 17.5 , 17 -RRB- -RSB- , all players except the goalie should pass the ball to -LSB- -LRB- 17.5 , 17 -RRB- , -LRB- 35 , 34 -RRB- -RSB-
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (, ,) (NP (NP (DT all) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 34)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] -LSB--[Region:3] -LRB--[Point:4] 0-[Num:5] ,-[Point:4] 0-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 17.5-[Num:8] ,-[Point:7] 17-[Num:9] -RRB--[Point:7] -RSB--[Region:3] ,-[Rule:1] all-[Player:11] players-[Player:11] except-[Player:11] the-[Unum:12] goalie-[Unum:12] should-[Directive:10] pass-[Action:13] the-[Action:13] ball-[Action:13] to-[Action:13] -LSB--[Region:14] -LRB--[Point:15] 17.5-[Num:16] ,-[Point:15] 17-[Num:17] -RRB--[Point:15] ,-[Region:14] -LRB--[Point:18] 35-[Num:19] ,-[Point:18] 34-[Num:20] -RRB--[Point:18] -RSB--[Region:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b4 direc
        ((bpos (rec (pt 0 0) (pt 17.5 17))) (do (player-except our {1}) (pass (rec (pt 17.5 17) (pt 35 34))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 17.5 }) </node>
<node id="9"> *n:Num -> ({ 17 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 1 }) </node>
<node id="13"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="15"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="16"> *n:Num -> ({ 17.5 }) </node>
<node id="17"> *n:Num -> ({ 17 }) </node>
<node id="18"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="19"> *n:Num -> ({ 35 }) </node>
<node id="20"> *n:Num -> ({ 34 }) </node>
</mrl-parse>
</example>

<example id="81">
<nl lang="en">
If the ball is within 32 meters from our goal line but not in our right penalty area , then player 2 should not intercept the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))) (CC but) (PP (RB not) (IN in) (NP (PRP$ our) (JJ right) (NN penalty) (NN area))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 2)) (VP (MD should) (RB not) (VP (VB intercept) (NP (DT the) (NN ball)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] but-[Condition:2] not-[Condition:8] in-[Condition:9] our-[Team:12] right-[Region:10] penalty-[Region:11] area-[Region:11] ,-[Rule:1] then-[Rule:1] player-[Player:14] 2-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] the-[Action:16] ball-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b18001 direc
        ((and (bpos (from-goal-line our 0 32)) (not (bpos (right (penalty-area our))))) (dont (player our {2}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 2 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="82">
<nl lang="en">
If the ball is in our penalty area when it is our free kick , then player 8 should position itself at -LRB- -17 , -10 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area)))) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBZ is) (NP (PRP$ our) (NN free) (NN kick))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -17)) (, ,) (NP (CD -10)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] our-[Team:6] penalty-[Region:5] area-[Region:5] when-[Condition:2] it-[Condition:3] is-[Condition:3] our-[Condition:3] free-[Condition:3] kick-[Condition:3] ,-[Rule:1] then-[Rule:1] player-[Player:8] 8-[Unum:9] should-[Directive:7] position-[Action:10] itself-[Action:10] at-[Action:10] -LRB--[Point:12] -17-[Num:13] ,-[Point:12] -10-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b13006 direc
        ((and (playm fk_our) (bpos (penalty-area our))) (do (player our {8}) (pos (pt -17 -10)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -17 }) </node>
<node id="14"> *n:Num -> ({ -10 }) </node>
</mrl-parse>
</example>

<example id="85">
<nl lang="en">
If the ball is in opponent 's left penalty area , then all players except the goalie should pass the ball to opponent 's right penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (JJ left) (NN penalty) (NN area)))))) (, ,) (ADVP (RB then)) (NP (NP (DT all) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (NN opponent) (POS 's)) (JJ right) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Region:3] 's-[Region:3] left-[Region:3] penalty-[Region:3] area-[Region:3] ,-[Rule:1] then-[Rule:1] all-[Player:7] players-[Player:7] except-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] opponent-[Region:10] 's-[Region:10] right-[Region:10] penalty-[Region:10] area-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule b8 direc
        ((bpos (right (penalty-area opp))) (do (player-except our {1}) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="86">
<nl lang="en">
If the ball is in our penalty area during our free kick , then player 8 should be positioned at -LRB- -17 , -10 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area)))) (PP (IN during) (NP (PRP$ our) (NN free) (NN kick))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -17)) (, ,) (NP (CD -10)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] our-[Team:6] penalty-[Region:5] area-[Region:5] during-[Condition:3] our-[Condition:3] free-[Condition:3] kick-[Condition:3] ,-[Rule:1] then-[Rule:1] player-[Player:8] 8-[Unum:9] should-[Directive:7] be-[Action:10] positioned-[Action:10] at-[Action:10] -LRB--[Point:12] -17-[Num:13] ,-[Point:12] -10-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b13013 direc
        ((and (playm fk_our) (bpos (penalty-area our))) (do (player our {8}) (pos (pt -17 -10)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -17 }) </node>
<node id="14"> *n:Num -> ({ -10 }) </node>
</mrl-parse>
</example>

<example id="90">
<nl lang="en">
If our team have the ball in opponent 's right penalty area , then they should pass the ball to -LRB- 80 , -4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP$ our) (NN team)) (VP (VBP have) (NP (DT the) (NN ball)) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (JJ right) (NN penalty) (NN area)))))) (, ,) (ADVP (RB then)) (NP (PRP they)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 80)) (, ,) (NP (CD -4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:4] team-[Player:4] have-[Condition:3] the-[Condition:3] ball-[Condition:3] in-[Condition:5] opponent-[Region:6] 's-[Region:6] right-[Region:6] penalty-[Region:6] area-[Region:6] ,-[Rule:1] then-[Rule:1] they-[Player:10] should-[Directive:9] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] -LRB--[Point:13] 80-[Num:14] ,-[Point:13] -4-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule Shoot1b direc
        ((and (bowner (player our {0})) (bpos (left (penalty-area opp)))) (do (player our {0}) (pass (pt 80 -4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="8"> *n:Team -> ({ opp }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ *^:Player }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 80 }) </node>
<node id="15"> *n:Num -> ({ -4 }) </node>
</mrl-parse>
</example>

<example id="91">
<nl lang="en">
If the ball is in our half , then player 8 should be positioned at -LRB- 15 , -15 -RRB- with ball attraction -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD -15)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] player-[Player:6] 8-[Unum:7] should-[Directive:5] be-[Action:8] positioned-[Action:8] at-[Action:8] -LRB--[Point:11] 15-[Num:12] ,-[Point:11] -15-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.55-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15007 direc
        ((bpos (half our)) (do (player our {8}) (pos (pt-with-ball-attraction (pt 15 -15) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 8 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 15 }) </node>
<node id="13"> *n:Num -> ({ -15 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.55 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="92">
<nl lang="en">
Position player 4 at -LRB- -4 , 0 -RRB- and set its ball attraction to -LRB- 0.5 , 0.4 -RRB- if the ball is in opponent 's half
</nl>
<syn lang="en">
(S (VP (VP (VB Position) (NP (NN player) (CD 4)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -4)) (, ,) (NP (CD 0)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))))
</syn>
<augsyn lang="en">
(S Position-[Action:8] player-[Player:6] 4-[Unum:7] at-[Action:8] -LRB--[Point:11] -4-[Num:12] ,-[Point:11] 0-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14] if-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14003 direc
        ((bpos (half opp)) (do (player our {4}) (pos (pt-with-ball-attraction (pt -4 0) (pt 0.5 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 4 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -4 }) </node>
<node id="13"> *n:Num -> ({ 0 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="98">
<nl lang="en">
All players except the goalie should pass the ball to opponent 's left penalty area if the ball is in the right side of it
</nl>
<syn lang="en">
(S (NP (NP (DT All) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (NN opponent) (POS 's)) (JJ left) (NN penalty) (NN area))))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (PRP it)))))))))
</syn>
<augsyn lang="en">
(S All-[Player:7] players-[Player:7] except-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] opponent-[Region:10] 's-[Region:10] left-[Region:10] penalty-[Region:10] area-[Region:10] if-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] right-[Region:3] side-[Region:3] of-[Region:3] it-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definerule b31 direc
        ((bpos (left (penalty-area opp))) (do (player-except our {1}) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="101">
<nl lang="en">
If the ball is close to the far left corner when the play mode is play_on , then player 2 should pass the ball to opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (ADJP (JJ close) (PP (TO to) (NP (DT the) (ADJP (RB far) (JJ left)) (NN corner))))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN play) (NN mode)) (VP (VBZ is) (NP (NN play_on))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 2)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] close-[Condition:4] to-[Condition:4] the-[Region:6] far-[Team:7] left-[Region:5] corner-[Region:6] when-[Condition:2] the-[Condition:3] play-[Condition:3] mode-[Condition:3] is-[Condition:3] play_on-[Condition:3] ,-[Rule:1] then-[Rule:1] player-[Player:9] 2-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR10R6 direc
        ((and (playm play_on) (bpos (left-quarter (near-goal-line opp)))) (do (player our {2}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 2 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="102">
<nl lang="en">
If the ball is in opponent 's half , then position player 3 at -LRB- -15 , -20 -RRB- with ball attraction -LRB- 0.5 , 0.3 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -15)) (, ,) (NP (CD -20)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.3)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 3-[Unum:7] at-[Action:8] -LRB--[Point:11] -15-[Num:12] ,-[Point:11] -20-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.3-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14013 direc
        ((bpos (half opp)) (do (player our {3}) (pos (pt-with-ball-attraction (pt -15 -20) (pt 0.5 0.3))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -15 }) </node>
<node id="13"> *n:Num -> ({ -20 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.3 }) </node>
</mrl-parse>
</example>

<example id="103">
<nl lang="en">
Position player 6 at -LRB- -20 , 21 -RRB- if the ball is within 42 meters from our goal line
</nl>
<syn lang="en">
(S (VP (VB Position) (NP (NN player) (CD 6)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD 21)) (-RRB- -RRB-))))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 42) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Position-[Action:10] player-[Player:8] 6-[Unum:9] at-[Action:10] -LRB--[Point:12] -20-[Num:13] ,-[Point:12] 21-[Num:14] -RRB--[Point:12] if-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 42-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player6 direc
        ((bpos (from-goal-line our 0 42)) (do (player our {6}) (pos (pt -20 21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 42 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -20 }) </node>
<node id="14"> *n:Num -> ({ 21 }) </node>
</mrl-parse>
</example>

<example id="104">
<nl lang="en">
All players except for the goalie should pass to RP16 when the ball is in the far left side of our midfield
</nl>
<syn lang="en">
(S (NP (NP (DT All) (NNS players)) (PP (IN except) (PP (IN for) (NP (DT the) (NN goalie))))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NNP RP16))))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield)))))))))
</syn>
<augsyn lang="en">
(S All-[Player:7] players-[Player:7] except-[Player:7] for-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] to-[Action:9] RP16-[Ident:11] when-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] far-[Region:3] left-[Region:3] side-[Region:3] of-[Region:3] our-[Team:5] midfield-[Region:4])
</augsyn>
<mrl lang="robocup-clang">
(definerule b45 direc
        ((bpos (left-quarter (midfield our))) (do (player-except our {1}) (pass "RP16"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP16 }) </node>
</mrl-parse>
</example>

<example id="106">
<nl lang="en">
If the goalie has the ball on the left side near our goal line , then it should pass the ball to player 5
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN goalie)) (VP (VBZ has) (NP (DT the) (NN ball)) (PP (IN on) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (ADVP (RB then)) (NP (PRP it)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NN player) (CD 5))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Player:4] goalie-[Player:4] has-[Condition:3] the-[Condition:3] ball-[Condition:3] on-[Condition:6] the-[Region:7] left-[Region:7] side-[Region:7] near-[Region:8] our-[Team:9] goal-[Region:8] line-[Region:8] ,-[Rule:1] then-[Rule:1] it-[Player:11] should-[Directive:10] pass-[Action:12] the-[Action:12] ball-[Action:12] to-[Action:12] player-[Player:13] 5-[Unum:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule goalipass1 direc
        ((and (bowner (player our {1})) (bpos (left (near-goal-line our)))) (do (player our {1}) (pass (player our {5})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 1 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ *^:Player }) </node>
<node id="12"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="13"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="14"> *n:Unum -> ({ 5 }) </node>
</mrl-parse>
</example>

<example id="107">
<nl lang="en">
Player 2 should position itself 22 meters from opponent 's goal if the ball is on the right side near opponent 's goal line
</nl>
<syn lang="en">
(S (NP (NN Player) (CD 2)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (NP (NP (CD 22) (NNS meters)) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal)))))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (DT the) (JJ right) (NN side))) (PP (IN near) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))
</syn>
<augsyn lang="en">
(S Player-[Player:7] 2-[Unum:8] should-[Directive:6] position-[Action:9] itself-[Action:9] 22-[Num:13] meters-[Point:11] from-[Point:11] opponent-[Team:12] 's-[Team:12] goal-[Point:11] if-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] on-[Condition:2] the-[Region:3] right-[Region:3] side-[Region:3] near-[Region:4] opponent-[Team:5] 's-[Team:5] goal-[Region:4] line-[Region:4])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2n direc
        ((bpos (right (near-goal-line opp))) (do (player our {2}) (pos (from-goal opp 22)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
<node id="13"> *n:Num -> ({ 22 }) </node>
</mrl-parse>
</example>

<example id="108">
<nl lang="en">
Position player 9 at -LRB- -5 , 10 -RRB- and set its ball attraction to -LRB- 0.55 , 0.4 -RRB- when the ball is in opponent 's half
</nl>
<syn lang="en">
(S (VP (VP (VB Position) (NP (NN player) (CD 9)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))))
</syn>
<augsyn lang="en">
(S Position-[Action:8] player-[Player:6] 9-[Unum:7] at-[Action:8] -LRB--[Point:11] -5-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.55-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14] when-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14019 direc
        ((bpos (half opp)) (do (player our {9}) (pos (pt-with-ball-attraction (pt -5 10) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 9 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -5 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.55 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="110">
<nl lang="en">
Define CloseToBall_9 to be the condition where the ball is within 6 meters of player 9
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP CloseToBall_9)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN of) (NP (NN player) (CD 9))))))))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] CloseToBall_9-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] of-[Region:3] player-[Player:5] 9-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definec "CloseToBall_9"
          (bpos (circle (pt (player our {9})) 6)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ CloseToBall_9 }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 9 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="111">
<nl lang="en">
Player 7 should position itself within 0.7 meters of the ball when the ball is within 6 meters of player 7
</nl>
<syn lang="en">
(S (NP (NN Player) (CD 7)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN within) (NP (NP (CD 0.7) (NNS meters)) (PP (IN of) (NP (DT the) (NN ball))))))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN of) (NP (NN player) (CD 7)))))))))
</syn>
<augsyn lang="en">
(S Player-[Player:9] 7-[Unum:10] should-[Directive:8] position-[Action:11] itself-[Action:11] within-[Region:12] 0.7-[Num:14] meters-[Region:12] of-[Region:12] the-[Point:13] ball-[Point:13] when-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] of-[Region:3] player-[Player:5] 7-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definerule BallAttracct7 direc
        ((bpos (circle (pt (player our {7})) 6)) (do (player our {7}) (pos (circle (pt ball) 0.7)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 7 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 7 }) </node>
<node id="11"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="14"> *n:Num -> ({ 0.7 }) </node>
</mrl-parse>
</example>

<example id="112">
<nl lang="en">
The default position of player 4 should always be -LRB- -20 , 8 -RRB-
</nl>
<syn lang="en">
(S (NP (NP (DT The) (NN default) (NN position)) (PP (IN of) (NP (NN player) (CD 4)))) (VP (MD should) (ADVP (RB always)) (VP (VB be) (NP (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD 8)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S The-[Action:6] default-[Action:6] position-[Action:6] of-[Action:6] player-[Player:4] 4-[Unum:5] should-[Directive:3] always-[Condition:2] be-[Action:6] -LRB--[Point:8] -20-[Num:9] ,-[Point:8] 8-[Num:10] -RRB--[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player4 direc
        ((true) (do (player our {4}) (home (pt -20 8)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 4 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="9"> *n:Num -> ({ -20 }) </node>
<node id="10"> *n:Num -> ({ 8 }) </node>
</mrl-parse>
</example>

<example id="114">
<nl lang="en">
If our team have the ball in the midfield , then they should shoot it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP$ our) (NN team)) (VP (VBP have) (NP (DT the) (NN ball)) (PP (IN in) (NP (DT the) (NN midfield)))))) (, ,) (ADVP (RB then)) (NP (PRP they)) (VP (MD should) (VP (VB shoot) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:4] team-[Player:4] have-[Condition:3] the-[Condition:3] ball-[Condition:3] in-[Condition:5] the-[Region:6] midfield-[Region:6] ,-[Rule:1] then-[Rule:1] they-[Player:8] should-[Directive:7] shoot-[Action:9] it-[Action:9])
</augsyn>
<mrl lang="robocup-clang">
(definerule Shoot3 direc
        ((and (bowner (player our {0})) (bpos (midfield))) (do (player our {0}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( midfield ) }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ *^:Player }) </node>
<node id="9"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="115">
<nl lang="en">
Player 4 should position itself at -LRB- -10 , 8 -RRB- before kick - off
</nl>
<syn lang="en">
(S (NP (NN Player) (CD 4)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 8)) (-RRB- -RRB-)))) (PP (IN before) (NP (NN kick) (: -) (NN off))))))
</syn>
<augsyn lang="en">
(S Player-[Player:7] 4-[Unum:8] should-[Directive:6] position-[Action:9] itself-[Action:9] at-[Action:9] -LRB--[Point:11] -10-[Num:12] ,-[Point:11] 8-[Num:13] -RRB--[Point:11] before-[Condition:2] kick-[Condition:2] --[Condition:2] off-[Condition:2])
</augsyn>
<mrl lang="robocup-clang">
(definerule BKO4 direc
        ((or (playm bko) (playm ag_our) (playm ag_opp)) (do (player our {4}) (pos (pt -10.00 8.00)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ag_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm ag_opp ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 4 }) </node>
<node id="9"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -10.00 }) </node>
<node id="13"> *n:Num -> ({ 8.00 }) </node>
</mrl-parse>
</example>

<example id="121">
<nl lang="en">
If the ball is in our half , then position player 10 at -LRB- -15 , -5 -RRB- with ball attraction -LRB- 0.5 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 10)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -15)) (, ,) (NP (CD -5)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 10-[Unum:7] at-[Action:8] -LRB--[Point:11] -15-[Num:12] ,-[Point:11] -5-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.1-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15020 direc
        ((bpos (half our)) (do (player our {10}) (pos (pt-with-ball-attraction (pt -15 -5) (pt 0.5 0.1))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 10 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -15 }) </node>
<node id="13"> *n:Num -> ({ -5 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.1 }) </node>
</mrl-parse>
</example>

<example id="125">
<nl lang="en">
If the ball is in the left side of opponent 's penalty area then players 2 to 11 should pass it to the right of opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area)))))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 2) (TO to) (CD 11))) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (NN right)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] left-[Region:3] side-[Region:3] of-[Region:3] opponent-[Team:5] 's-[Team:5] penalty-[Region:4] area-[Region:4] then-[Rule:1] players-[Player:7] 2-[Unum:8] to-[Player:7] 11-[Unum:9] should-[Directive:6] pass-[Action:10] it-[Action:10] to-[Action:10] the-[Region:11] right-[Region:11] of-[Region:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b7 direc ((bpos (left (penalty-area opp))) (do (player-range our 2 11) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Unum -> ({ 11 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="130">
<nl lang="en">
If none of conditions MDR2C6 , MDR2C7 , MDR2C8 , MDR2C9 , MDR2C10 or MDR2C11 is true then our players 5 , 4 and 6 should shoot
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NP (NN none)) (PP (IN of) (NP (NNS conditions) (NP (NNP MDR2C6) (, ,) (NNP MDR2C7) (, ,) (NNP MDR2C8) (, ,) (NNP MDR2C9) (, ,) (NNP MDR2C10) (CC or) (NNP MDR2C11))))) (VP (VBZ is) (ADJP (JJ true))))) (ADVP (RB then)) (NP (PRP$ our) (NNS players) (QP (CD 5) (, ,) (CD 4) (CC and) (CD 6))) (VP (MD should) (VP (VB shoot))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] none-[Condition:2] of-[Condition:2] conditions-[Condition:3] MDR2C6-[Ident:5] ,-[Condition:3] MDR2C7-[Ident:7] ,-[Condition:3] MDR2C8-[Ident:9] ,-[Condition:3] MDR2C9-[Ident:11] ,-[Condition:3] MDR2C10-[Ident:13] or-[Condition:3] MDR2C11-[Ident:15] is-[Condition:2] true-[Condition:2] then-[Rule:1] our-[Player:17] players-[Player:17] 5-[Unum:18] ,-[Player:17] 4-[Unum:19] and-[Player:17] 6-[Unum:20] should-[Directive:16] shoot-[Action:21])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR2Clear direc ((not (or "MDR2C6" "MDR2C7" "MDR2C8" "MDR2C9" "MDR2C10" "MDR2C11")) (do (player our {5 4 6}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="4"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ MDR2C6 }) </node>
<node id="6"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="7"> *n:Ident -> ({ MDR2C7 }) </node>
<node id="8"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="9"> *n:Ident -> ({ MDR2C8 }) </node>
<node id="10"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ MDR2C9 }) </node>
<node id="12"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="13"> *n:Ident -> ({ MDR2C10 }) </node>
<node id="14"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="15"> *n:Ident -> ({ MDR2C11 }) </node>
<node id="16"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="17"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="18"> *n:Unum -> ({ 5 }) </node>
<node id="19"> *n:Unum -> ({ 4 }) </node>
<node id="20"> *n:Unum -> ({ 6 }) </node>
<node id="21"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="131">
<nl lang="en">
If ball is in RP15 then our players 2 to 11 should pass it to the left quarter side of opponent 's midfield
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP15)))))) (ADVP (RB then)) (NP (PRP$ our) (NNS players) (QP (CD 2) (TO to) (CD 11))) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (JJ left) (NN quarter) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NNS midfield))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP15-[Ident:4] then-[Rule:1] our-[Player:6] players-[Player:6] 2-[Unum:7] to-[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] it-[Action:9] to-[Action:9] the-[Region:10] left-[Region:10] quarter-[Region:10] side-[Region:10] of-[Region:10] opponent-[Team:12] 's-[Team:12] midfield-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b37 direc ((bpos "RP15") (do (player-range our 2 11) (pass (left-quarter (midfield opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP15 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="132">
<nl lang="en">
During normal play if the ball is in the left quarter side near opponent 's goal line then player 6 should pass the ball to opponent 's penalty area
</nl>
<syn lang="en">
(S (PP (IN During) (NP (JJ normal) (NN play))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ left) (NN quarter) (NN side)) (PP (IN near) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (NN player) (CD 6)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] normal-[Condition:3] play-[Condition:3] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:5] left-[Region:5] quarter-[Region:5] side-[Region:5] near-[Region:6] opponent-[Team:7] 's-[Team:7] goal-[Region:6] line-[Region:6] then-[Rule:1] player-[Player:9] 6-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR10R8 direc ((and (playm play_on) (bpos (left-quarter (near-goal-line opp)))) (do (player our {6}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 6 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="133">
<nl lang="en">
If the ball is within 32 meters from our goal line but not on the left side of our penalty area then player 8 should not intercept
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))) (CC but) (PP (RB not) (IN on) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (PRP$ our) (NN penalty) (NN area))))))))) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (RB not) (VP (VB intercept))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] but-[Condition:2] not-[Condition:8] on-[Condition:9] the-[Region:10] left-[Region:10] side-[Region:10] of-[Region:10] our-[Team:12] penalty-[Region:11] area-[Region:11] then-[Rule:1] player-[Player:14] 8-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b20001 direc ((and (bpos (from-goal-line our 0 32)) (not (bpos (left (penalty-area our))))) (dont (player our {8}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 8 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="135">
<nl lang="en">
During normal play when the ball is in the region MDR7 then player 7 should pass it to the left side of opponent 's penalty area
</nl>
<syn lang="en">
(S (PP (IN During) (NP (JJ normal) (NN play))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN region) (NNP MDR7)))))) (ADVP (RB then)) (NP (NN player) (CD 7)) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] normal-[Condition:3] play-[Condition:3] when-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:5] region-[Region:5] MDR7-[Ident:6] then-[Rule:1] player-[Player:8] 7-[Unum:9] should-[Directive:7] pass-[Action:10] it-[Action:10] to-[Action:10] the-[Region:11] left-[Region:11] side-[Region:11] of-[Region:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR7R7 direc ((and (playm play_on) (bpos "MDR7")) (do (player our {7}) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ MDR7 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="136">
<nl lang="en">
If the ball is in the right quarter of the area near the opponent 's goal line then players 2 - 11 should pass it to the right side of opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ right) (NN quarter)) (PP (IN of) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] right-[Region:3] quarter-[Region:3] of-[Region:3] the-[Region:4] area-[Region:4] near-[Region:4] the-[Team:5] opponent-[Team:5] 's-[Team:5] goal-[Region:4] line-[Region:4] then-[Rule:1] players-[Player:7] 2-[Unum:8] --[Player:7] 11-[Unum:9] should-[Directive:6] pass-[Action:10] it-[Action:10] to-[Action:10] the-[Region:11] right-[Region:11] side-[Region:11] of-[Region:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b10 direc ((bpos (right-quarter (near-goal-line opp))) (do (player-range our 2 11) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Unum -> ({ 11 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="138">
<nl lang="en">
If the ball is at distance 28 to 32 from our goal line then position player 7 to point -LRB- -25 , 11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 28) (TO to) (CD 32))) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 7)) (PP (TO to) (NP (NN point) (PRN (-LRB- -LRB-) (NP (CD -25)) (, ,) (NP (CD 11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 28-[Num:5] to-[Region:3] 32-[Num:6] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 7-[Unum:9] to-[Action:10] point-[Point:12] -LRB--[Point:12] -25-[Num:13] ,-[Point:12] 11-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player7b direc ((bpos (from-goal-line our 28 32)) (do (player our {7}) (pos (pt -25 11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 28 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -25 }) </node>
<node id="14"> *n:Num -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="142">
<nl lang="en">
If the ball is in our right half then players 2 , 7 and 8 should pass the ball to point -LRB- 20 , 23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (JJ right) (NN half)))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 2) (, ,) (CD 7) (CC and) (CD 8))) (VP (MD should) (VP (VB pass) (NP (DT the) (PRP ball)) (PP (TO to) (NP (NN point) (PRN (-LRB- -LRB-) (NP (CD 20)) (, ,) (NP (CD 23)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:5] right-[Region:3] half-[Region:4] then-[Rule:1] players-[Player:7] 2-[Unum:8] ,-[Player:7] 7-[Unum:9] and-[Player:7] 8-[Unum:10] should-[Directive:6] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] point-[Point:13] -LRB--[Point:13] 20-[Num:14] ,-[Point:13] 23-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule Forw2c direc ((bpos (right (half our))) (do (player our {2 7 8}) (pass (pt 20 23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Unum -> ({ 8 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 20 }) </node>
<node id="15"> *n:Num -> ({ 23 }) </node>
</mrl-parse>
</example>

<example id="143">
<nl lang="en">
If the ball is within 37 meters from our goal line then position player 9 at -LRB- -10 , 12 -RRB- and set its ball attraction to -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 37) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 9)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 12)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 37-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 9-[Unum:9] at-[Action:10] -LRB--[Point:13] -10-[Num:14] ,-[Point:13] 12-[Num:15] -RRB--[Point:13] and-[Point:12] set-[Point:12] its-[Point:12] ball-[Point:12] attraction-[Point:12] to-[Point:12] -LRB--[Point:16] 0.55-[Num:17] ,-[Point:16] 0.4-[Num:18] -RRB--[Point:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b16017 direc ((bpos (from-goal-line our 0 37)) (do (player our {9}) (pos (pt-with-ball-attraction (pt -10 12) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 37 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 9 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -10 }) </node>
<node id="15"> *n:Num -> ({ 12 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0.55 }) </node>
<node id="18"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="144">
<nl lang="en">
If the ball is in OurHalf2 then player 6 's default position should be in a circle of radius 1 from -LRB- -4 , 14 -RRB- and its ball attraction should be -LRB- 1 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP OurHalf2)))))) (ADVP (RB then)) (S (S (NP (NP (NN player) (CD 6) (POS 's)) (NN default) (NN position)) (VP (MD should) (VP (VB be) (PP (IN in) (NP (NP (DT a) (NN circle)) (PP (IN of) (NP (NP (NN radius) (CD 1)) (PP (IN from) (NP (PRN (-LRB- -LRB-) (NP (CD -4)) (, ,) (NP (CD 14)) (-RRB- -RRB-))))))))))) (CC and) (S (NP (PRP$ its) (NN ball) (NN attraction)) (VP (MD should) (VP (VB be) (NP (PRN (-LRB- -LRB-) (NP (CD 1)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] OurHalf2-[Ident:4] then-[Rule:1] player-[Player:6] 6-[Unum:7] 's-[Player:6] default-[Action:8] position-[Action:8] should-[Directive:5] be-[Action:8] in-[Action:8] a-[Region:9] circle-[Region:9] of-[Region:9] radius-[Region:9] 1-[Num:17] from-[Region:9] -LRB--[Point:11] -4-[Num:12] ,-[Point:11] 14-[Num:13] -RRB--[Point:11] and-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] should-[Point:10] be-[Point:10] -LRB--[Point:14] 1-[Num:15] ,-[Point:14] 0.1-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule FH12 direc ((bpos "OurHalf2") (do (player our {6}) (home (circle (pt-with-ball-attraction (pt -4.0 14.0) (pt 1 0.10)) 1)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ OurHalf2 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 6 }) </node>
<node id="8"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -4.0 }) </node>
<node id="13"> *n:Num -> ({ 14.0 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 1 }) </node>
<node id="16"> *n:Num -> ({ 0.10 }) </node>
<node id="17"> *n:Num -> ({ 1 }) </node>
</mrl-parse>
</example>

<example id="145">
<nl lang="en">
If player 5 has the ball then it should pass to players 8 or 11
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN player) (CD 5)) (VP (VBZ has) (NP (DT the) (NN ball))))) (ADVP (RB then)) (NP (PRP it)) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NNS players) (QP (CD 8) (CC or) (CD 11)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] player-[Player:3] 5-[Unum:4] has-[Condition:2] the-[Condition:2] ball-[Condition:2] then-[Rule:1] it-[Player:6] should-[Directive:5] pass-[Action:7] to-[Action:7] players-[Player:8] 8-[Unum:9] or-[Player:8] 11-[Unum:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule utdefclr3 direc ((bowner (player our {5})) (do (player our {5}) (pass (player our {8 11})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 5 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ *^:Player }) </node>
<node id="7"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Unum -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="146">
<nl lang="en">
If the ball is in our half then position player 7 at -LRB- -23 , 4 -RRB- and set its ball attraction to -LRB- 0.8 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -23)) (, ,) (NP (CD 4)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.8)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] position-[Action:8] player-[Player:6] 7-[Unum:7] at-[Action:8] -LRB--[Point:11] -23-[Num:12] ,-[Point:11] 4-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.8-[Num:15] ,-[Point:14] 0.1-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15006 direc ((bpos (half our)) (do (player our {7}) (pos (pt-with-ball-attraction (pt -23 4) (pt 0.8 0.1))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -23 }) </node>
<node id="13"> *n:Num -> ({ 4 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.8 }) </node>
<node id="16"> *n:Num -> ({ 0.1 }) </node>
</mrl-parse>
</example>

<example id="150">
<nl lang="en">
If the ball is at distance 42 to 47 from opponent 's goal line then position player 5 at 47 meters from opponent 's goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 42) (TO to) (CD 47))) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 5)) (PP (IN at) (NP (NP (CD 47) (NNS meters)) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 42-[Num:5] to-[Region:3] 47-[Num:6] from-[Region:3] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 5-[Unum:9] at-[Action:10] 47-[Num:14] meters-[Point:12] from-[Point:12] opponent-[Team:13] 's-[Team:13] goal-[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player5b direc ((bpos (from-goal-line opp 42 47)) (do (player our {5}) (pos (from-goal opp 47)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 42 }) </node>
<node id="6"> *n:Num -> ({ 47 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 5 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
<node id="14"> *n:Num -> ({ 47 }) </node>
</mrl-parse>
</example>

<example id="151">
<nl lang="en">
During normal play if the ball is in MDR7 then player 4 should pass it to the left side of opponent 's penalty area
</nl>
<syn lang="en">
(S (PP (IN During) (NP (JJ normal) (NN play))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP MDR7)))))) (ADVP (RB then)) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] normal-[Condition:3] play-[Condition:3] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] MDR7-[Ident:6] then-[Rule:1] player-[Player:8] 4-[Unum:9] should-[Directive:7] pass-[Action:10] it-[Action:10] to-[Action:10] the-[Region:11] left-[Region:11] side-[Region:11] of-[Region:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR7R7 direc ((and (playm play_on) (bpos "MDR7")) (do (player our {4}) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ MDR7 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 4 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="152">
<nl lang="en">
If the ball is in DangrouseReg5 then whoever owns the ball should clear it from FarReg5
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP DangrouseReg5)))))) (ADVP (RB then)) (SBAR (WHNP (WP whoever)) (VP (VBZ owns) (NP (DT the) (NN ball)))) (VP (MD should) (VP (VB clear) (NP (PRP it)) (PP (IN from) (NP (NNP FarReg5))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:5] ball-[Condition:5] is-[Condition:5] in-[Condition:5] DangrouseReg5-[Ident:7] then-[Rule:1] whoever-[Player:4] owns-[Condition:3] the-[Condition:3] ball-[Condition:3] should-[Directive:8] clear-[Action:10] it-[Action:10] from-[Action:10] FarReg5-[Ident:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule ruleclear5 direc ((and (bowner (player our {X})) (bpos "DangrouseReg5")) (do (player our {X}) (clear "FarReg5"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="7"> *n:Ident -> ({ DangrouseReg5 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="10"> *n:Action -> ({ ( clear *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="12"> *n:Ident -> ({ FarReg5 }) </node>
</mrl-parse>
</example>

<example id="154">
<nl lang="en">
If the ball is at distance 43 to 47 from our goal line then position player 7 at the point -LRB- -10 , 11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 43) (TO to) (CD 47))) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 43-[Num:5] to-[Region:3] 47-[Num:6] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 7-[Unum:9] at-[Action:10] the-[Point:12] point-[Point:12] -LRB--[Point:12] -10-[Num:13] ,-[Point:12] 11-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player7e direc ((bpos (from-goal-line our 43 47)) (do (player our {7}) (pos (pt -10 11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 43 }) </node>
<node id="6"> *n:Num -> ({ 47 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -10 }) </node>
<node id="14"> *n:Num -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="155">
<nl lang="en">
If the ball is between 23 to 27 meters from our goal line then position our player 2 at 22 meters from our goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (IN between) (CD 23) (TO to) (CD 27)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))) (ADVP (RB then)) (VP (VB position) (NP (PRP$ our) (NN player) (CD 2)) (PP (IN at) (NP (NP (CD 22) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] between-[Region:3] 23-[Num:5] to-[Region:3] 27-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] our-[Player:8] player-[Player:8] 2-[Unum:9] at-[Action:10] 22-[Num:14] meters-[Point:12] from-[Point:12] our-[Team:13] goal-[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2a direc ((bpos (from-goal-line our 23 27)) (do (player our {2}) (pos (from-goal our 22)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 23 }) </node>
<node id="6"> *n:Num -> ({ 27 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="13"> *n:Team -> ({ our }) </node>
<node id="14"> *n:Num -> ({ 22 }) </node>
</mrl-parse>
</example>

<example id="156">
<nl lang="en">
If the ball is in the region RP23 then players 2 - 11 should pass it to the left side of opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN region) (NNP RP23)))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] region-[Region:3] RP23-[Ident:4] then-[Rule:1] players-[Player:6] 2-[Unum:7] --[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] it-[Action:9] to-[Action:9] the-[Region:10] left-[Region:10] side-[Region:10] of-[Region:10] opponent-[Team:12] 's-[Team:12] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b40 direc ((bpos "RP23") (do (player-range our 2 11) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP23 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="157">
<nl lang="en">
If the ball is in opponent 's penalty area then whoever has the ball should shoot
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area)))))) (ADVP (RB then)) (SBAR (WHNP (WP whoever)) (VP (VBZ has) (NP (DT the) (NN ball)))) (VP (MD should) (VP (VB shoot))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:5] ball-[Condition:5] is-[Condition:5] in-[Condition:5] opponent-[Team:7] 's-[Team:7] penalty-[Region:6] area-[Region:6] then-[Rule:1] whoever-[Player:4] has-[Condition:3] the-[Condition:3] ball-[Condition:3] should-[Directive:8] shoot-[Action:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule ruleShoot direc ((and (bowner (player our {X})) (bpos (penalty-area opp))) (do (player our {X}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="10"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="158">
<nl lang="en">
If the ball is in our half then position player 9 at -LRB- -10 , 12 -RRB- and set its ball attraction to -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 9)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 12)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] position-[Action:8] player-[Player:6] 9-[Unum:7] at-[Action:8] -LRB--[Point:11] -10-[Num:12] ,-[Point:11] 12-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.55-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15019 direc ((bpos (half our)) (do (player our {9}) (pos (pt-with-ball-attraction (pt -10 12) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 9 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -10 }) </node>
<node id="13"> *n:Num -> ({ 12 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.55 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="159">
<nl lang="en">
If the ball is not in our goal area then players 7 and 8 should not intercept it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (RB not) (PP (IN in) (NP (PRP$ our) (NN goal) (NN area)))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 7) (CC and) (CD 8))) (VP (MD should) (RB not) (VP (VB intercept) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] not-[Condition:2] in-[Condition:2] our-[Team:5] goal-[Region:4] area-[Region:4] then-[Rule:1] players-[Player:7] 7-[Unum:8] and-[Player:7] 8-[Unum:9] should-[Directive:6] not-[Directive:6] intercept-[Action:10] it-[Action:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule utdi direc ((not (bpos (goal-area our))) (dont (player our {7 8}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( goal-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="162">
<nl lang="en">
Define CloseToBall_7 to be the condition that the ball is within distance 6 from our player 7
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP CloseToBall_7)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (NN distance) (CD 6)) (PP (IN from) (NP (PRP$ our) (NN player) (CD 7))))))))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] CloseToBall_7-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] distance-[Region:3] 6-[Num:7] from-[Region:3] our-[Player:5] player-[Player:5] 7-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definec "CloseToBall_7" (bpos (circle (pt (player our {7})) 6)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ CloseToBall_7 }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 7 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="163">
<nl lang="en">
The default position of player 7 should be -LRB- -26 , 11 -RRB-
</nl>
<syn lang="en">
(S (NP (NP (DT The) (NN default) (NN position)) (PP (IN of) (NP (NN player) (CD 7)))) (VP (MD should) (VP (VB be) (NP (PRN (-LRB- -LRB-) (NP (CD -26)) (, ,) (NP (CD 11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S The-[Action:6] default-[Action:6] position-[Action:6] of-[Action:6] player-[Player:4] 7-[Unum:5] should-[Directive:3] be-[Action:6] -LRB--[Point:8] -26-[Num:9] ,-[Point:8] 11-[Num:10] -RRB--[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player7 direc ((true) (do (player our {7}) (home (pt -26 11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 7 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="9"> *n:Num -> ({ -26 }) </node>
<node id="10"> *n:Num -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="165">
<nl lang="en">
If the ball is at distance 27 to 32 from the opponent 's goal line then our player 8 should be positioned at -LRB- 15 , -11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 27) (TO to) (CD 32))) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (PRP$ our) (NN player) (CD 8)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD -11)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 27-[Num:5] to-[Region:3] 32-[Num:6] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] our-[Player:8] player-[Player:8] 8-[Unum:9] should-[Directive:7] be-[Action:10] positioned-[Action:10] at-[Action:10] -LRB--[Point:12] 15-[Num:13] ,-[Point:12] -11-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player8k direc ((bpos (from-goal-line opp 27 32)) (do (player our {8}) (pos (pt 15 -11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 15 }) </node>
<node id="14"> *n:Num -> ({ -11 }) </node>
</mrl-parse>
</example>

<example id="166">
<nl lang="en">
During our goalie catch , goal kick or free kick , player 1 should clear the ball up to 27 meters from our goal line
</nl>
<syn lang="en">
(S (PP (IN During) (NP (NP (PRP$ our) (NN goalie) (NN catch)) (, ,) (NP (NN goal) (NN kick)) (CC or) (NP (NN free) (NN kick)))) (, ,) (NP (NN player) (CD 1)) (VP (MD should) (VP (VB clear) (NP (DT the) (NN ball)) (PP (IN up) (PP (TO to) (NP (NP (CD 27) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] our-[Condition:3] goalie-[Condition:3] catch-[Condition:3] ,-[Condition:2] goal-[Condition:4] kick-[Condition:4] or-[Condition:2] free-[Condition:5] kick-[Condition:5] ,-[Rule:1] player-[Player:7] 1-[Unum:8] should-[Directive:6] clear-[Action:9] the-[Action:9] ball-[Action:9] up-[Region:10] to-[Region:10] 27-[Num:13] meters-[Region:10] from-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule GPL direc ((or (playm gc_our) (playm gk_our) (playm fk_our)) (do (player our {1}) (clear (from-goal-line our 0 27)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm gk_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( clear *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
<node id="13"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="167">
<nl lang="en">
Call COND13 as the true condition
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP COND13)) (PP (IN as) (NP (DT the) (JJ true) (NN condition)))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] COND13-[Ident:1] as-[Statement:0] the-[Condition:2] true-[Condition:2] condition-[Condition:2])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND13" (true))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND13 }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
</mrl-parse>
</example>

<example id="171">
<nl lang="en">
Let Pass_8 be the condition that player 8 has the ball and the ball is in Pass_region_8
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_8)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (NN player) (CD 8)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP Pass_region_8))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_8-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] player-[Player:4] 8-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:6] ball-[Condition:6] is-[Condition:6] in-[Condition:6] Pass_region_8-[Ident:8])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_8"    (and (bowner (player our {8})) (bpos "Pass_region_8")))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_8 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 8 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="8"> *n:Ident -> ({ Pass_region_8 }) </node>
</mrl-parse>
</example>

<example id="172">
<nl lang="en">
If the ball is in our half then player 4 should be positioned at 47 meters from our goal with its ball attraction as -LRB- 0.9 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (NP (NP (CD 47) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal)))) (PP (IN with) (NP (NP (PRP$ its) (NN ball) (NN attraction)) (PP (IN as) (NP (PRN (-LRB- -LRB-) (NP (CD 0.9)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] player-[Player:6] 4-[Unum:7] should-[Directive:5] be-[Action:8] positioned-[Action:8] at-[Action:8] 47-[Num:13] meters-[Point:11] from-[Point:11] our-[Team:12] goal-[Point:11] with-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] as-[Point:10] -LRB--[Point:14] 0.9-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15003 direc ((bpos (half our)) (do (player our {4}) (pos (pt-with-ball-attraction (from-goal our 47) (pt 0.9 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 4 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Num -> ({ 47 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.9 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="173">
<nl lang="en">
If the ball is in opponent 's half then position player 7 at the point -LRB- -20 , 7 -RRB- and set its ball attraction to -LRB- 0.5 , 0.3 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD 7)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.3)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] then-[Rule:1] position-[Action:8] player-[Player:6] 7-[Unum:7] at-[Action:8] the-[Point:11] point-[Point:11] -LRB--[Point:11] -20-[Num:12] ,-[Point:11] 7-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.3-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14017 direc ((bpos (half opp)) (do (player our {7}) (pos (pt-with-ball-attraction (pt -20 7) (pt 0.5 0.3))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -20 }) </node>
<node id="13"> *n:Num -> ({ 7 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.3 }) </node>
</mrl-parse>
</example>

<example id="174">
<nl lang="en">
Whenever the ball is at distance 37 to 42 from the opponent 's goal line then player 6 should be positioned at -LRB- 10 , 23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB Whenever)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 37) (TO to) (CD 42))) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (NN player) (CD 6)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD 23)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S Whenever-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 37-[Num:5] to-[Region:3] 42-[Num:6] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] player-[Player:8] 6-[Unum:9] should-[Directive:7] be-[Action:10] positioned-[Action:10] at-[Action:10] -LRB--[Point:12] 10-[Num:13] ,-[Point:12] 23-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player6d direc ((bpos (from-goal-line opp 37 42)) (do (player our {6}) (pos (pt 10 23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 37 }) </node>
<node id="6"> *n:Num -> ({ 42 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Num -> ({ 23 }) </node>
</mrl-parse>
</example>

<example id="175">
<nl lang="en">
If the ball is at distance 37 to 42 meters from our goal line then position player 8 at the point -LRB- -15 , -11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 37) (TO to) (CD 42)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 8)) (PP (IN at) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD -15)) (, ,) (NP (CD -11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 37-[Num:5] to-[Region:3] 42-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 8-[Unum:9] at-[Action:10] the-[Point:12] point-[Point:12] -LRB--[Point:12] -15-[Num:13] ,-[Point:12] -11-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player8d direc ((bpos (from-goal-line our 37 42)) (do (player our {8}) (pos (pt -15 -11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 37 }) </node>
<node id="6"> *n:Num -> ({ 42 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -15 }) </node>
<node id="14"> *n:Num -> ({ -11 }) </node>
</mrl-parse>
</example>

<example id="177">
<nl lang="en">
Let MDR1C7 be the condition that the ball is in our penalty area , player 6 is in our midfield while no opponent player is within distance of 2 from player 6
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP MDR1C7)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area))))) (, ,) (S (NP (NN player) (CD 6)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN midfield))))) (CC while) (S (NP (DT no) (NN opponent) (NN player)) (VP (VBZ is) (PP (IN within) (NP (NP (NN distance) (PP (IN of) (NP (CD 2)))) (PP (IN from) (NP (NN player) (CD 6))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] MDR1C7-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] our-[Team:5] penalty-[Region:4] area-[Region:4] ,-[Condition:2] player-[Player:7] 6-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:10] midfield-[Region:9] while-[Condition:2] no-[Condition:11] opponent-[Condition:11] player-[Condition:11] is-[Condition:11] within-[Region:12] distance-[Region:12] of-[Region:12] 2-[Num:16] from-[Region:12] player-[Player:14] 6-[Unum:15])
</augsyn>
<mrl lang="robocup-clang">
(definec "MDR1C7" (and (bpos (penalty-area our)) (ppos-any (player our {6}) (midfield our)) (ppos-none opp (circle (pt (player our {6})) 2.00))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ MDR1C7 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 6 }) </node>
<node id="9"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="10"> *n:Team -> ({ our }) </node>
<node id="11"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 6 }) </node>
<node id="16"> *n:Num -> ({ 2.00 }) </node>
</mrl-parse>
</example>

<example id="179">
<nl lang="en">
Define DR2C4 to be the condition that the ball is in region D2R2 , player 7 is in left side of our midfield and no opponent is within 1.5 distance from the player 7
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP DR2C4)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NN region) (NNP D2R2))))) (, ,) (S (NP (NN player) (CD 7)) (VP (VBZ is) (PP (IN in) (NP (NP (JJ left) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))) (CC and) (S (NP (DT no) (NN opponent)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 1.5) (NN distance)) (PP (IN from) (NP (DT the) (NN player) (CD 7)))))))))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] DR2C4-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] region-[Region:4] D2R2-[Ident:5] ,-[Condition:2] player-[Player:7] 7-[Unum:8] is-[Condition:6] in-[Condition:6] left-[Region:9] side-[Region:9] of-[Region:9] our-[Team:11] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponent-[Condition:12] is-[Condition:12] within-[Region:13] 1.5-[Num:17] distance-[Region:13] from-[Region:13] the-[Player:15] player-[Player:15] 7-[Unum:16])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR2C4" (and (bpos "D2R2") (ppos-any (player our {7}) (left (midfield our))) (ppos-none opp (circle (pt (player our {7})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR2C4 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R2 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 7 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="180">
<nl lang="en">
If ball is in opponent 's half then player 7 's default position should be within 4 meters from the point -LRB- -15.5 , 0 -RRB- and set its ball attraction to be -LRB- 0.2 , 0.15 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (ADVP (RB then)) (S (S (NP (NP (NN player) (CD 7) (POS 's)) (NN default) (NN position)) (VP (MD should) (VP (VB be) (PP (IN within) (NP (NP (CD 4) (NNS meters)) (PP (IN from) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD -15.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-))))))))) (CC and) (S (VP (VB set) (S (NP (PRP$ its) (NN ball) (NN attraction)) (VP (TO to) (VP (VB be) (NP (PRN (-LRB- -LRB-) (NP (CD 0.2)) (, ,) (NP (CD 0.15)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] then-[Rule:1] player-[Player:6] 7-[Unum:7] 's-[Player:6] default-[Action:8] position-[Action:8] should-[Directive:5] be-[Action:8] within-[Region:9] 4-[Num:17] meters-[Region:9] from-[Region:9] the-[Point:11] point-[Point:11] -LRB--[Point:11] -15.5-[Num:12] ,-[Point:11] 0-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] be-[Point:10] -LRB--[Point:14] 0.2-[Num:15] ,-[Point:14] 0.15-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule FH36 direc ((bpos (half opp)) (do (player our {7}) (home (circle (pt-with-ball-attraction (pt -15.5 0.0) (pt 0.2 0.15)) 4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -15.5 }) </node>
<node id="13"> *n:Num -> ({ 0.0 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.2 }) </node>
<node id="16"> *n:Num -> ({ 0.15 }) </node>
<node id="17"> *n:Num -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="181">
<nl lang="en">
If the ball is near our goal line then position player 7 at -LRB- -35 , 11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD 11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] near-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:8] player-[Player:6] 7-[Unum:7] at-[Action:8] -LRB--[Point:10] -35-[Num:11] ,-[Point:10] 11-[Num:12] -RRB--[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player7 direc ((bpos (near-goal-line our)) (do (player our {7}) (pos (pt -35 11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ -35 }) </node>
<node id="12"> *n:Num -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="182">
<nl lang="en">
If the ball is at distance 32 to 36 from opponent 's goal line then position player 3 at the point -LRB- 15 , -21 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 32) (TO to) (CD 36))) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD -21)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 32-[Num:5] to-[Region:3] 36-[Num:6] from-[Region:3] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 3-[Unum:9] at-[Action:10] the-[Point:12] point-[Point:12] -LRB--[Point:12] 15-[Num:13] ,-[Point:12] -21-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3e direc ((bpos (from-goal-line opp 32 36)) (do (player our {3}) (pos (pt 15 -21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 32 }) </node>
<node id="6"> *n:Num -> ({ 36 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 15 }) </node>
<node id="14"> *n:Num -> ({ -21 }) </node>
</mrl-parse>
</example>

<example id="183">
<nl lang="en">
When the ball is in RP1 then players 2 - 11 should pass the ball to RP2
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP1)))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NNP RP2))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP1-[Ident:4] then-[Rule:1] players-[Player:6] 2-[Unum:7] --[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] RP2-[Ident:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b25 direc ((bpos "RP1") (do (player-range our 2 11) (pass "RP2"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP1 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP2 }) </node>
</mrl-parse>
</example>

<example id="185">
<nl lang="en">
Let DR3C4 be the condition that the ball is in region D2R3 , our player 7 is on the right side of our midfield and no opponent is around our player 7 within 1.5 distance
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP DR3C4)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NN region) (NNP D2R3))))) (, ,) (S (NP (PRP$ our) (NN player) (CD 7)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))) (CC and) (S (NP (DT no) (NN opponent)) (VP (VBZ is) (PP (IN around) (NP (PRP$ our) (NN player) (CD 7))) (PP (IN within) (NP (CD 1.5) (NN distance))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] DR3C4-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] region-[Region:4] D2R3-[Ident:5] ,-[Condition:2] our-[Player:7] player-[Player:7] 7-[Unum:8] is-[Condition:6] on-[Condition:6] the-[Region:9] right-[Region:9] side-[Region:9] of-[Region:9] our-[Team:11] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponent-[Condition:12] is-[Condition:12] around-[Region:13] our-[Player:15] player-[Player:15] 7-[Unum:16] within-[Region:13] 1.5-[Num:17] distance-[Region:13])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR3C4" (and (bpos "D2R3") (ppos-any (player our {7}) (right (midfield our))) (ppos-none opp (circle (pt (player our {7})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR3C4 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R3 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 7 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="188">
<nl lang="en">
Let COND8 be the true condition
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP COND8)) (VP (VB be) (NP (DT the) (JJ true) (NN condition))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] COND8-[Ident:1] be-[Statement:0] the-[Condition:2] true-[Condition:2] condition-[Condition:2])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND8" (true))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND8 }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
</mrl-parse>
</example>

<example id="192">
<nl lang="en">
If the ball is present in the region RP10 then players 2 - 11 should pass it to the region RP5
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (ADJP (JJ present) (PP (IN in) (NP (DT the) (NN region) (NNP RP10))))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (DT the) (NN region) (NNP RP5))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] present-[Condition:2] in-[Condition:2] the-[Region:3] region-[Region:3] RP10-[Ident:4] then-[Rule:1] players-[Player:6] 2-[Unum:7] --[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] it-[Action:9] to-[Action:9] the-[Region:10] region-[Region:10] RP5-[Ident:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b4 direc ((bpos "RP10") (do (player-range our 2 11) (pass "RP5"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP10 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP5 }) </node>
</mrl-parse>
</example>

<example id="194">
<nl lang="en">
If the ball is within 32 meters from our goal line and not on the left side of our penalty area then player 3 should not intercept the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))) (CC and) (PP (RB not) (IN on) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (PRP$ our) (NN penalty) (NN area))))))))) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (RB not) (VP (VB intercept) (NP (DT the) (NN ball)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] and-[Condition:2] not-[Condition:8] on-[Condition:9] the-[Region:10] left-[Region:10] side-[Region:10] of-[Region:10] our-[Team:12] penalty-[Region:11] area-[Region:11] then-[Rule:1] player-[Player:14] 3-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] the-[Action:16] ball-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b21001 direc ((and (bpos (from-goal-line our 0 32)) (not (bpos (left (penalty-area our))))) (dont (player our {3}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 3 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="195">
<nl lang="en">
If the ball is in our goal area then player 1 should intercept it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN goal) (NN area)))))) (ADVP (RB then)) (NP (NN player) (CD 1)) (VP (MD should) (VP (VB intercept) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] goal-[Region:3] area-[Region:3] then-[Rule:1] player-[Player:6] 1-[Unum:7] should-[Directive:5] intercept-[Action:8] it-[Action:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule b18500 direc ((bpos (goal-area our)) (do (player our {1}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( goal-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 1 }) </node>
<node id="8"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="197">
<nl lang="en">
If the ball is at distance 27 to 31 from the opponent 's goal line then player 3 should be positioned at the point -LRB- 20 , -21 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 27) (TO to) (CD 31))) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN at) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD 20)) (, ,) (NP (CD -21)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 27-[Num:5] to-[Region:3] 31-[Num:6] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] player-[Player:8] 3-[Unum:9] should-[Directive:7] be-[Action:10] positioned-[Action:10] at-[Action:10] the-[Point:12] point-[Point:12] -LRB--[Point:12] 20-[Num:13] ,-[Point:12] -21-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3f direc ((bpos (from-goal-line opp 27 31)) (do (player our {3}) (pos (pt 20 -21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
<node id="6"> *n:Num -> ({ 31 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 20 }) </node>
<node id="14"> *n:Num -> ({ -21 }) </node>
</mrl-parse>
</example>

<example id="200">
<nl lang="en">
If the ball is in our goal area then player 1 should intercept it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN goal) (NN area)))))) (ADVP (RB then)) (NP (NN player) (CD 1)) (VP (MD should) (VP (VB intercept) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] goal-[Region:3] area-[Region:3] then-[Rule:1] player-[Player:6] 1-[Unum:7] should-[Directive:5] intercept-[Action:8] it-[Action:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule b18501 direc ((bpos (goal-area our)) (do (player our {1}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( goal-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 1 }) </node>
<node id="8"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="202">
<nl lang="en">
If the ball is within 32 meters from our goal line but not on the left side of our penalty area then player 4 should not intercept
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))) (CC but) (PP (RB not) (IN on) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (PRP$ our) (NN penalty) (NN area))))))))) (ADVP (RB then)) (NP (NN player) (CD 4)) (VP (MD should) (RB not) (VP (VB intercept))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] but-[Condition:2] not-[Condition:8] on-[Condition:8] the-[Region:10] left-[Region:10] side-[Region:10] of-[Region:10] our-[Team:12] penalty-[Region:11] area-[Region:11] then-[Rule:1] player-[Player:14] 4-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b20001 direc ((and (bpos (from-goal-line our 0 32)) (not (bpos (left (penalty-area our))))) (dont (player our {4}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 4 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="206">
<nl lang="en">
If the ball is within 6 meters from our player 6 then position player 6 somewhere within 0.7 meters of the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN player) (CD 6)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 6)) (NP (NN somewhere) (PP (IN within) (NP (NP (CD 0.7) (NNS meters)) (PP (IN of) (NP (DT the) (NN ball))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] from-[Region:3] our-[Player:5] player-[Player:5] 6-[Unum:6] then-[Rule:1] position-[Action:11] player-[Player:9] 6-[Unum:10] somewhere-[Region:12] within-[Region:12] 0.7-[Num:14] meters-[Region:12] of-[Region:12] the-[Point:13] ball-[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule BallAttracct6 direc ((bpos (circle (pt (player our {6})) 6)) (do (player our {6}) (pos (circle (pt ball) 0.7)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 6 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 6 }) </node>
<node id="11"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="14"> *n:Num -> ({ 0.7 }) </node>
</mrl-parse>
</example>

<example id="207">
<nl lang="en">
Before kickoff or after our or opponent 's goal position player 7 at distance 27 from our goal
</nl>
<syn lang="en">
(S (PP (PP (IN Before) (NNP kickoff)) (CC or) (PP (IN after) (NP (PRP$ our) (CC or) (NP (NN opponent) (POS 's)) (NN goal)))) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (NP (NN distance) (CD 27)) (PP (IN from) (NP (PRP$ our) (NN goal)))))))
</syn>
<augsyn lang="en">
(S Before-[Condition:3] kickoff-[Condition:3] or-[Condition:2] after-[Condition:4] our-[Condition:4] or-[Condition:2] opponent-[Condition:5] 's-[Condition:5] goal-[Condition:5] position-[Action:9] player-[Player:7] 7-[Unum:8] at-[Action:9] distance-[Point:11] 27-[Num:13] from-[Point:11] our-[Team:12] goal-[Point:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule BKO7 direc ((or (playm bko) (playm ag_our) (playm ag_opp)) (do (player our {7}) (pos (from-goal our 27)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ag_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm ag_opp ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="209">
<nl lang="en">
If our player 1 has the ball and the ball is on the right side of the field then player 1 should clear it from the point -LRB- 0 , 40 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP$ our) (NN player) (CD 1)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (DT the) (NN field))))))))) (ADVP (RB then)) (NP (NN player) (CD 1)) (VP (MD should) (VP (VB clear) (NP (PRP it)) (PP (IN from) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 40)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:4] player-[Player:4] 1-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:6] ball-[Condition:6] is-[Condition:6] on-[Condition:6] the-[Region:7] right-[Region:7] side-[Region:7] of-[Region:7] the-[Region:8] field-[Region:8] then-[Rule:1] player-[Player:10] 1-[Unum:11] should-[Directive:9] clear-[Action:12] it-[Action:12] from-[Action:12] the-[Point:14] point-[Point:14] -LRB--[Point:14] 0-[Num:15] ,-[Point:14] 40-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule utgoalie2 direc ((and (bowner (player our {1})) (bpos (right (field)))) (do (player our {1}) (clear (pt 0 40)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 1 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( field ) }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="11"> *n:Unum -> ({ 1 }) </node>
<node id="12"> *n:Action -> ({ ( clear *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ *n:Point }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0 }) </node>
<node id="16"> *n:Num -> ({ 40 }) </node>
</mrl-parse>
</example>

<example id="210">
<nl lang="en">
During normal play if ball is in the opponent 's half then player 6 should be positioned in the circle with center -LRB- -10 , 18 -RRB- and of radius 4
</nl>
<syn lang="en">
(S (PP (IN During) (NP (JJ normal) (NN play))) (SBAR (IN if) (S (NP (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (NN opponent) (POS 's)) (NN half)))))) (ADVP (RB then)) (NP (NN player) (CD 6)) (VP (MD should) (VP (VB be) (VP (VBN positioned) (PP (IN in) (NP (NP (DT the) (NN circle)) (PP (PP (IN with) (NP (JJ center) (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 18)) (-RRB- -RRB-)))) (CC and) (PP (IN of) (NP (NN radius) (CD 4))))))))))
</syn>
<augsyn lang="en">
(S During-[Condition:6] normal-[Condition:6] play-[Condition:6] if-[Rule:1] ball-[Condition:3] is-[Condition:3] in-[Condition:3] the-[Team:5] opponent-[Team:5] 's-[Team:5] half-[Region:4] then-[Rule:1] player-[Player:8] 6-[Unum:9] should-[Directive:7] be-[Action:10] positioned-[Action:10] in-[Action:10] the-[Region:11] circle-[Region:11] with-[Region:11] center-[Region:11] -LRB--[Point:12] -10-[Num:13] ,-[Point:12] 18-[Num:14] -RRB--[Point:12] and-[Region:11] of-[Region:11] radius-[Region:11] 4-[Num:15])
</augsyn>
<mrl lang="robocup-clang">
(definerule FP32 direc ((and (bpos (half opp)) (playm play_on)) (do (player our {6}) (pos (circle (pt -10.0 18.0) 4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -10.0 }) </node>
<node id="14"> *n:Num -> ({ 18.0 }) </node>
<node id="15"> *n:Num -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="211">
<nl lang="en">
Let DR3C5 be the condition that the ball is in the region D2R3 , player 5 is on the right side of our midfield and no opponent is within distance 1.5 from the player 5
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP DR3C5)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN region) (NNP D2R3))))) (, ,) (S (NP (NN player) (CD 5)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))) (CC and) (S (NP (DT no) (NN opponent)) (VP (VBZ is) (PP (IN within) (NP (NP (NN distance) (CD 1.5)) (PP (IN from) (NP (DT the) (NN player) (CD 5))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] DR3C5-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] the-[Region:4] region-[Region:4] D2R3-[Ident:5] ,-[Condition:2] player-[Player:7] 5-[Unum:8] is-[Condition:6] on-[Condition:6] the-[Region:9] right-[Region:9] side-[Region:9] of-[Region:9] our-[Team:11] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponent-[Condition:12] is-[Condition:12] within-[Region:13] distance-[Region:13] 1.5-[Num:17] from-[Region:13] the-[Player:15] player-[Player:15] 5-[Unum:16])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR3C5" (and (bpos "D2R3") (ppos-any (player our {5}) (right (midfield our))) (ppos-none opp (circle (pt (player our {5})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR3C5 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R3 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 5 }) </node>
<node id="9"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 5 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="212">
<nl lang="en">
If condition MDR3C6 holds then players 5 , 4 and 6 should pass to player 5
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN condition) (NNP MDR3C6)) (VP (VBZ holds)))) (ADVP (RB then)) (NP (NNS players) (QP (CD 5) (, ,) (CD 4) (CC and) (CD 6))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NN player) (CD 5))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] condition-[Rule:1] MDR3C6-[Ident:3] holds-[Rule:1] then-[Rule:1] players-[Player:5] 5-[Unum:6] ,-[Player:5] 4-[Unum:7] and-[Player:5] 6-[Unum:8] should-[Directive:4] pass-[Action:9] to-[Action:9] player-[Player:10] 5-[Unum:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR3Pass6 direc ("MDR3C6" (do (player our {5 4 6}) (pass (player our {5})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="3"> *n:Ident -> ({ MDR3C6 }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 5 }) </node>
<node id="7"> *n:Unum -> ({ 4 }) </node>
<node id="8"> *n:Unum -> ({ 6 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="10"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="11"> *n:Unum -> ({ 5 }) </node>
</mrl-parse>
</example>

<example id="213">
<nl lang="en">
During our free kick if the ball is in our penalty area then position player 2 at -LRB- -40 , 10 -RRB-
</nl>
<syn lang="en">
(S (PP (IN During) (NP (PRP$ our) (NN free) (NN kick))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area)))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 2)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -40)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] our-[Condition:3] free-[Condition:3] kick-[Condition:3] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] our-[Team:6] penalty-[Region:5] area-[Region:5] then-[Rule:1] position-[Action:10] player-[Player:8] 2-[Unum:9] at-[Action:10] -LRB--[Point:12] -40-[Num:13] ,-[Point:12] 10-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b13000 direc ((and (playm fk_our) (bpos (penalty-area our))) (do (player our {2}) (pos (pt -40 10)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -40 }) </node>
<node id="14"> *n:Num -> ({ 10 }) </node>
</mrl-parse>
</example>

<example id="215">
<nl lang="en">
If the ball is in opponent 's half then position player 3 at -LRB- -20 , -20 -RRB- with its ball attraction set to -LRB- 0.5 , 0.3 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD -20)) (-RRB- -RRB-))) (PP (IN with) (NP (NP (PRP$ its) (NN ball) (NN attraction)) (RRC (VP (VBN set) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.3)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] then-[Rule:1] position-[Action:8] player-[Player:6] 3-[Unum:7] at-[Action:8] -LRB--[Point:11] -20-[Num:12] ,-[Point:11] -20-[Num:13] -RRB--[Point:11] with-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] set-[Point:10] to-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.3-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14002 direc ((bpos (half opp)) (do (player our {3}) (pos (pt-with-ball-attraction (pt -20 -20) (pt 0.5 0.3))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -20 }) </node>
<node id="13"> *n:Num -> ({ -20 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.3 }) </node>
</mrl-parse>
</example>

<example id="216">
<nl lang="en">
When the play mode is normal and the ball is in the region MDR11 then our player 2 should pass the ball to the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (S (NP (DT the) (NN play) (NN mode)) (VP (VBZ is) (ADJP (JJ normal)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN region) (NNP MDR11))))))) (ADVP (RB then)) (NP (PRP$ our) (NN player) (CD 2)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:3] play-[Condition:3] mode-[Condition:3] is-[Condition:3] normal-[Condition:3] and-[Condition:2] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:5] region-[Region:5] MDR11-[Ident:6] then-[Rule:1] our-[Player:8] player-[Player:8] 2-[Unum:9] should-[Directive:7] pass-[Action:10] the-[Action:10] ball-[Action:10] to-[Action:10] the-[Team:12] opponent-[Team:12] 's-[Team:12] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR11R6 direc ((and (playm play_on) (bpos "MDR11")) (do (player our {2}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ MDR11 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="217">
<nl lang="en">
When the condition DR4C7 is true then players 2 , 3 , 6 and 5 should pass to 7
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN condition) (NNP DR4C7)) (VP (VBZ is) (ADJP (JJ true))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 2) (, ,) (CD 3) (, ,) (CD 6) (CC and) (CD 5))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (CD 7))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Rule:1] condition-[Rule:1] DR4C7-[Ident:3] is-[Rule:1] true-[Rule:1] then-[Rule:1] players-[Player:5] 2-[Unum:6] ,-[Player:5] 3-[Unum:7] ,-[Player:5] 6-[Unum:8] and-[Player:5] 5-[Unum:9] should-[Directive:4] pass-[Action:10] to-[Action:10] 7-[Unum:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule DFR4Pass7 direc ("DR4C7" (do (player our {2 3 6 5}) (pass (player our {7})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="3"> *n:Ident -> ({ DR4C7 }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 2 }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Unum -> ({ 6 }) </node>
<node id="9"> *n:Unum -> ({ 5 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 7 }) </node>
</mrl-parse>
</example>

<example id="218">
<nl lang="en">
If DR4C5 condition is true then players 10 , 3 , 4 and 5 should pass to player 5
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NNP DR4C5) (NN condition)) (VP (VBZ is) (ADJP (JJ true))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 10) (, ,) (CD 3) (, ,) (CD 4) (CC and) (CD 5))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NN player) (CD 5))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] DR4C5-[Ident:3] condition-[Rule:1] is-[Rule:1] true-[Rule:1] then-[Rule:1] players-[Player:5] 10-[Unum:6] ,-[Player:5] 3-[Unum:7] ,-[Player:5] 4-[Unum:8] and-[Player:5] 5-[Unum:9] should-[Directive:4] pass-[Action:10] to-[Action:10] player-[Player:11] 5-[Unum:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule DFR4Pass5 direc ("DR4C5" (do (player our {10 3 4 5}) (pass (player our {5})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="3"> *n:Ident -> ({ DR4C5 }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 10 }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Unum -> ({ 4 }) </node>
<node id="9"> *n:Unum -> ({ 5 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 5 }) </node>
</mrl-parse>
</example>

<example id="219">
<nl lang="en">
Call Attacker_Rest_mod the condition that the ball is near our goal line
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP Attacker_Rest_mod)) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] Attacker_Rest_mod-[Ident:1] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] near-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definec "Attacker_Rest_mod" (bpos (near-goal-line our)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Attacker_Rest_mod }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="223">
<nl lang="en">
During our free kick if the ball is in our penalty area then position our player 6 at -LRB- -17 , 10 -RRB-
</nl>
<syn lang="en">
(S (PP (IN During) (NP (PRP$ our) (NN free) (NN kick))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area)))))) (ADVP (RB then)) (VP (VB position) (NP (PRP$ our) (NN player) (CD 6)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -17)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] our-[Condition:3] free-[Condition:3] kick-[Condition:3] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] our-[Team:6] penalty-[Region:5] area-[Region:5] then-[Rule:1] position-[Action:10] our-[Player:8] player-[Player:8] 6-[Unum:9] at-[Action:10] -LRB--[Point:12] -17-[Num:13] ,-[Point:12] 10-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b13004 direc ((and (playm fk_our) (bpos (penalty-area our))) (do (player our {6}) (pos (pt -17 10)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -17 }) </node>
<node id="14"> *n:Num -> ({ 10 }) </node>
</mrl-parse>
</example>

<example id="224">
<nl lang="en">
The default position of player 9 should be at -LRB- -20 , -8 -RRB-
</nl>
<syn lang="en">
(S (NP (NP (DT The) (NN default) (NN position)) (PP (IN of) (NP (NN player) (CD 9)))) (VP (MD should) (VP (VB be) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD -8)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S The-[Action:6] default-[Action:6] position-[Action:6] of-[Action:6] player-[Player:4] 9-[Unum:5] should-[Directive:3] be-[Action:6] at-[Action:6] -LRB--[Point:8] -20-[Num:9] ,-[Point:8] -8-[Num:10] -RRB--[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player9 direc ((true) (do (player our {9}) (home (pt -20 -8)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 9 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="9"> *n:Num -> ({ -20 }) </node>
<node id="10"> *n:Num -> ({ -8 }) </node>
</mrl-parse>
</example>

<example id="225">
<nl lang="en">
Let Pass_7 be the condition that our player 7 has the ball and the ball is in our half excluding the area near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_7)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (PRP$ our) (NN player) (CD 7)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (PRP$ our) (NN half)) (VP (VBG excluding) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line))))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_7-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] our-[Player:4] player-[Player:4] 7-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:6] ball-[Condition:6] is-[Condition:6] in-[Condition:6] our-[Team:9] half-[Region:8] excluding-[Region:7] the-[Region:10] area-[Region:10] near-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_7"    (and (bowner (player our {7})) (bpos (reg-exclude (half our) (near-goal-line our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_7 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 7 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="227">
<nl lang="en">
If the ball is on the right quarter portion of the area near opponent 's goal line then players 2 - 11 should pass to the right side of opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN quarter) (NN portion)) (PP (IN of) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] on-[Condition:2] the-[Region:3] right-[Region:3] quarter-[Region:3] portion-[Region:3] of-[Region:3] the-[Region:4] area-[Region:4] near-[Region:4] opponent-[Team:5] 's-[Team:5] goal-[Region:4] line-[Region:4] then-[Rule:1] players-[Player:7] 2-[Unum:8] --[Player:7] 11-[Unum:9] should-[Directive:6] pass-[Action:10] to-[Action:10] the-[Region:11] right-[Region:11] side-[Region:11] of-[Region:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b34 direc ((bpos (right-quarter (near-goal-line opp))) (do (player-range our 2 11) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Unum -> ({ 11 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="229">
<nl lang="en">
If the ball is within 32 meters from our goal line and not on the right side of our penalty area then player 2 should not intercept it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN within) (NP (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))) (CC and) (PP (RB not) (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (PRP$ our) (NN penalty) (NN area))))))))) (ADVP (RB then)) (NP (NN player) (CD 2)) (VP (MD should) (RB not) (VP (VB intercept) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] and-[Condition:2] not-[Condition:8] on-[Condition:9] the-[Region:10] right-[Region:10] side-[Region:10] of-[Region:10] our-[Team:12] penalty-[Region:11] area-[Region:11] then-[Rule:1] player-[Player:14] 2-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] it-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b18001 direc ((and (bpos (from-goal-line our 0 32)) (not (bpos (right (penalty-area our))))) (dont (player our {2}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 2 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="231">
<nl lang="en">
If our player has the ball and the ball is on the right side of the opponent 's penalty area then he should pass it to the point -LRB- 80 , 4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP$ our) (NN player)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))))) (ADVP (RB then)) (NP (PRP he)) (VP (MD should) (VP (VB pass) (NP (PRP it)) (PP (TO to) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD 80)) (, ,) (NP (CD 4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:4] player-[Player:4] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:5] ball-[Condition:5] is-[Condition:5] on-[Condition:5] the-[Region:6] right-[Region:6] side-[Region:6] of-[Region:6] the-[Team:8] opponent-[Team:8] 's-[Team:8] penalty-[Region:7] area-[Region:7] then-[Rule:1] he-[Player:10] should-[Directive:9] pass-[Action:11] it-[Action:11] to-[Action:11] the-[Point:13] point-[Point:13] -LRB--[Point:13] 80-[Num:14] ,-[Point:13] 4-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule Shoot2 direc ((and (bowner (player our {0})) (bpos (right (penalty-area opp)))) (do (player our {0}) (pass (pt 80 4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="8"> *n:Team -> ({ opp }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ *^:Player }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 80 }) </node>
<node id="15"> *n:Num -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="234">
<nl lang="en">
If the condition DR1C2 is true then players 2 , 3 , 7 and 8 should give pass to player 2
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN condition) (NNP DR1C2)) (VP (VBZ is) (ADJP (JJ true))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 2) (, ,) (CD 3) (, ,) (CD 7) (CC and) (CD 8))) (VP (MD should) (VP (VB give) (NP (NN pass)) (PP (TO to) (NP (NN player) (CD 2))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Rule:1] condition-[Rule:1] DR1C2-[Ident:3] is-[Rule:1] true-[Rule:1] then-[Rule:1] players-[Player:5] 2-[Unum:6] ,-[Player:5] 3-[Unum:7] ,-[Player:5] 7-[Unum:8] and-[Player:5] 8-[Unum:9] should-[Directive:4] give-[Action:10] pass-[Action:10] to-[Action:10] player-[Player:11] 2-[Unum:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule DFR1Pass2 direc ("DR1C2" (do (player our {2 3 7 8}) (pass (player our {2})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="3"> *n:Ident -> ({ DR1C2 }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 2 }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 2 }) </node>
</mrl-parse>
</example>

<example id="235">
<nl lang="en">
During our goalie catch position player 10 at -LRB- -4 , 15 -RRB- and set its ball attraction to -LRB- 0.2 , 0.2 -RRB-
</nl>
<syn lang="en">
(S (PP (IN During) (NP (PRP$ our) (NN goalie) (NN catch))) (VP (VP (VB position) (NP (NN player) (CD 10)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -4)) (, ,) (NP (CD 15)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.2)) (, ,) (NP (CD 0.2)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S During-[Condition:2] our-[Condition:2] goalie-[Condition:2] catch-[Condition:2] position-[Action:6] player-[Player:4] 10-[Unum:5] at-[Action:6] -LRB--[Point:9] -4-[Num:10] ,-[Point:9] 15-[Num:11] -RRB--[Point:9] and-[Point:8] set-[Point:8] its-[Point:8] ball-[Point:8] attraction-[Point:8] to-[Point:8] -LRB--[Point:12] 0.2-[Num:13] ,-[Point:12] 0.2-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule GCOA direc ((playm gc_our) (do (player our {10}) (pos (pt-with-ball-attraction (pt -4.0 15.0) (pt 0.2 0.2))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 10 }) </node>
<node id="6"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -4.0 }) </node>
<node id="11"> *n:Num -> ({ 15.0 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.2 }) </node>
<node id="14"> *n:Num -> ({ 0.2 }) </node>
</mrl-parse>
</example>

<example id="238">
<nl lang="en">
If the ball is in the rectangle -LSB- -LRB- 25 , -34 -RRB- , -LRB- 53 , 0 -RRB- -RSB- and we have the ball then it should be passed to -LRB- 36 , 10 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 25)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 53)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-)))))) (CC and) (S (NP (PRP we)) (VP (VBP have) (NP (DT the) (NN ball)))))) (ADVP (RB then)) (NP (PRP it)) (VP (MD should) (VP (VB be) (VP (VBN passed) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 36)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:5] ball-[Condition:5] is-[Condition:5] in-[Condition:5] the-[Region:6] rectangle-[Region:6] -LSB--[Region:6] -LRB--[Point:7] 25-[Num:8] ,-[Point:7] -34-[Num:9] -RRB--[Point:7] ,-[Region:6] -LRB--[Point:10] 53-[Num:11] ,-[Point:10] 0-[Num:12] -RRB--[Point:10] -RSB--[Region:6] and-[Condition:2] we-[Player:4] have-[Condition:3] the-[Condition:3] ball-[Condition:3] then-[Rule:1] it-[Directive:13] should-[Directive:13] be-[Directive:13] passed-[Directive:13] to-[Directive:13] -LRB--[Point:17] 36-[Num:18] ,-[Point:17] 10-[Num:19] -RRB--[Point:17])
</augsyn>
<mrl lang="robocup-clang">
(definerule Forw4 direc ((and (bowner (player our {0})) (bpos (rec (pt 25 -34) (pt 53 0)))) (do (player our {0}) (pass (pt 36 10)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 25 }) </node>
<node id="9"> *n:Num -> ({ -34 }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ 53 }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
<node id="13"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { 0 } ) }) </node>
<node id="15"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="16"> *n:Region -> ({ *n:Point }) </node>
<node id="17"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="18"> *n:Num -> ({ 36 }) </node>
<node id="19"> *n:Num -> ({ 10 }) </node>
</mrl-parse>
</example>

<example id="239">
<nl lang="en">
When the ball is at distance 22 to 27 from our goal line then position player 2 at 27 meters from our goal
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NN distance) (QP (CD 22) (TO to) (CD 27))) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 2)) (PP (IN at) (NP (NP (CD 27) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal)))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] distance-[Region:3] 22-[Num:5] to-[Region:3] 27-[Num:6] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] position-[Action:10] player-[Player:8] 2-[Unum:9] at-[Action:10] 27-[Num:14] meters-[Point:12] from-[Point:12] our-[Team:13] goal-[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2a direc ((bpos (from-goal-line our 22 27)) (do (player our {2}) (pos (from-goal our 27)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 22 }) </node>
<node id="6"> *n:Num -> ({ 27 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="13"> *n:Team -> ({ our }) </node>
<node id="14"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="240">
<nl lang="en">
When the ball is anywhere in the field then player 8 's default position should be -LRB- -5 , -11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NN anywhere) (PP (IN in) (NP (DT the) (NN field))))))) (ADVP (RB then)) (NP (NP (NN player) (CD 8) (POS 's)) (NN default) (NN position)) (VP (MD should) (VP (VB be) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD -11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S When-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] anywhere-[Condition:2] in-[Condition:2] the-[Region:3] field-[Region:3] then-[Rule:1] player-[Player:5] 8-[Unum:6] 's-[Player:5] default-[Action:7] position-[Action:7] should-[Directive:4] be-[Action:7] -LRB--[Point:9] -5-[Num:10] ,-[Point:9] -11-[Num:11] -RRB--[Point:9])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player8home direc ((bpos (field)) (do (player our {8}) (home (pt -5 -11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( field ) }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 8 }) </node>
<node id="7"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ *n:Point }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -5 }) </node>
<node id="11"> *n:Num -> ({ -11 }) </node>
</mrl-parse>
</example>

<example id="241">
<nl lang="en">
During normal play if the ball is in the region O4R5 then player 7 , 9 and 11 should dribble the ball to the rectangle -LSB- -LRB- 40 , 22 -RRB- , -LRB- 46 , 28 -RRB- -RSB-
</nl>
<syn lang="en">
(S (PP (IN During) (NP (JJ normal) (NN play))) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN region) (NNP O4R5)))))) (ADVP (RB then)) (NP (NN player) (QP (CD 7) (, ,) (CD 9) (CC and) (CD 11))) (VP (MD should) (VP (VB dribble) (NP (DT the) (NN ball)) (PP (TO to) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 40)) (, ,) (NP (CD 22)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 46)) (, ,) (NP (CD 28)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] normal-[Condition:3] play-[Condition:3] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:5] region-[Region:5] O4R5-[Ident:6] then-[Rule:1] player-[Player:8] 7-[Unum:9] ,-[Player:8] 9-[Unum:10] and-[Player:8] 11-[Unum:11] should-[Directive:7] dribble-[Action:12] the-[Action:12] ball-[Action:12] to-[Action:12] the-[Region:13] rectangle-[Region:13] -LSB--[Region:13] -LRB--[Point:14] 40-[Num:15] ,-[Point:14] 22-[Num:16] -RRB--[Point:14] ,-[Region:13] -LRB--[Point:17] 46-[Num:18] ,-[Point:17] 28-[Num:19] -RRB--[Point:17] -RSB--[Region:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule O4R5Dribble direc ((and (playm play_on) (bpos "O4R5")) (do (player our {7 9 11}) (dribble (rec (pt 40.00 22.00) (pt 46.00 28.00))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ O4R5 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Unum -> ({ 9 }) </node>
<node id="11"> *n:Unum -> ({ 11 }) </node>
<node id="12"> *n:Action -> ({ ( dribble *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 40.00 }) </node>
<node id="16"> *n:Num -> ({ 22.00 }) </node>
<node id="17"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="18"> *n:Num -> ({ 46.00 }) </node>
<node id="19"> *n:Num -> ({ 28.00 }) </node>
</mrl-parse>
</example>

<example id="243">
<nl lang="en">
Call DR2C2 to be the condition that the ball is in region D2R2 , player 2 is in our left midfield and no oppnent is within distance 1.5 from our player 2
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NNP DR2C2)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NN region) (NNP D2R2))))) (, ,) (S (NP (NN player) (CD 2)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (JJ left) (NN midfield))))) (CC and) (S (NP (DT no) (NN oppnent)) (VP (VBZ is) (PP (IN within) (NP (NP (NN distance) (CD 1.5)) (PP (IN from) (NP (PRP$ our) (NN player) (CD 2)))))))))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] DR2C2-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] region-[Region:4] D2R2-[Ident:5] ,-[Condition:2] player-[Player:7] 2-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:11] left-[Region:9] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponent-[Condition:12] is-[Condition:12] within-[Region:13] distance-[Region:13] 1.5-[Num:17] from-[Region:13] our-[Player:15] player-[Player:15] 2-[Unum:16])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR2C2" (and (bpos "D2R2") (ppos-any (player our {2}) (left (midfield our))) (ppos-none opp (circle (pt (player our {2})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR2C2 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R2 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 2 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="245">
<nl lang="en">
If the ball is in our half then position player 3 at -LRB- 10 , 10 -RRB- and set its ball attraction to -LRB- 0.75 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (VP (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))) (CC and) (VP (VB set) (NP (PRP$ its) (NN ball) (NN attraction)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0.75)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] position-[Action:8] player-[Player:6] 3-[Unum:7] at-[Action:8] -LRB--[Point:11] 10-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] and-[Point:10] set-[Point:10] its-[Point:10] ball-[Point:10] attraction-[Point:10] to-[Point:10] -LRB--[Point:14] 0.75-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15002 direc ((bpos (half our)) (do (player our {3}) (pos (pt-with-ball-attraction (pt 10 10) (pt 0.75 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 10 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.75 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="247">
<nl lang="en">
Player 2 's default position should always be at -LRB- -26 , -10 -RRB-
</nl>
<syn lang="en">
(S (NP (NP (NN Player) (CD 2) (POS 's)) (NN default) (NN position)) (VP (MD should) (ADVP (RB always)) (VP (VB be) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -26)) (, ,) (NP (CD -10)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S Player-[Player:4] 2-[Unum:5] 's-[Player:4] default-[Action:6] position-[Action:6] should-[Directive:3] always-[Condition:2] be-[Action:6] at-[Action:6] -LRB--[Point:8] -26-[Num:9] ,-[Point:8] -10-[Num:10] -RRB--[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2 direc ((true) (do (player our {2}) (home (pt -26 -10)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 2 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="9"> *n:Num -> ({ -26 }) </node>
<node id="10"> *n:Num -> ({ -10 }) </node>
</mrl-parse>
</example>

<example id="252">
<nl lang="en">
If the ball is within 37 meters from our goal line , position player 7 at -LRB- 12 , 0 -RRB- with ball attraction -LRB- 0.5 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 37) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 12)) (, ,) (NP (CD 0)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 37-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 7-[Unum:9] at-[Action:10] -LRB--[Point:13] 12-[Num:14] ,-[Point:13] 0-[Num:15] -RRB--[Point:13] with-[Point:12] ball-[Point:12] attraction-[Point:12] -LRB--[Point:16] 0.5-[Num:17] ,-[Point:16] 0.4-[Num:18] -RRB--[Point:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b16005 direc ((bpos (from-goal-line our 0 37)) (do (player our {7}) (pos (pt-with-ball-attraction (pt 12 0) (pt 0.5 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 37 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 12 }) </node>
<node id="15"> *n:Num -> ({ 0 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0.5 }) </node>
<node id="18"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="257">
<nl lang="en">
Set player 6 's default position within 4 meters from -LRB- -13.0 , 18.0 -RRB- with ball attraction -LRB- 0.2 , 0.15 -RRB-
</nl>
<syn lang="en">
(S (VP (VB Set) (NP (NP (NN player) (CD 6) (POS 's)) (NN default) (NN position)) (PP (IN within) (NP (NP (CD 4) (NNS meters)) (PP (IN from) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -13.0)) (, ,) (NP (CD 18.0)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.2)) (, ,) (NP (CD 0.15)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S Set-[Action:6] player-[Player:4] 6-[Unum:5] 's-[Player:4] default-[Action:6] position-[Action:6] within-[Region:7] 4-[Num:15] meters-[Region:7] from-[Region:7] -LRB--[Point:9] -13.0-[Num:10] ,-[Point:9] 18.0-[Num:11] -RRB--[Point:9] with-[Point:8] ball-[Point:8] attraction-[Point:8] -LRB--[Point:12] 0.2-[Num:13] ,-[Point:12] 0.15-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule FH32 direc ((true) (do (player our {6}) (home (circle (pt-with-ball-attraction (pt -13.0 18.0) (pt 0.2 0.15)) 4)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 6 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -13.0 }) </node>
<node id="11"> *n:Num -> ({ 18.0 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.2 }) </node>
<node id="14"> *n:Num -> ({ 0.15 }) </node>
<node id="15"> *n:Num -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="262">
<nl lang="en">
If the ball is in the far right side , 17 to 35 meters from the opponent 's goal line , players 2 to 11 should pass the ball to the opponent 's right penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (ADJP (RB far) (JJ right)) (NN side)) (, ,) (NP (NP (QP (CD 17) (TO to) (CD 35)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))))) (, ,) (NP (NNS players) (QP (CD 2) (TO to) (CD 11))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (JJ right) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] far-[Region:3] right-[Region:3] side-[Region:3] ,-[Region:3] 17-[Num:6] to-[Region:4] 35-[Num:7] meters-[Region:4] from-[Region:4] the-[Team:5] opponent-[Team:5] 's-[Team:5] goal-[Region:4] line-[Region:4] ,-[Rule:1] players-[Player:9] 2-[Unum:10] to-[Player:9] 11-[Unum:11] should-[Directive:8] pass-[Action:12] the-[Action:12] ball-[Action:12] to-[Action:12] the-[Team:15] opponent-[Team:15] 's-[Team:15] right-[Region:13] penalty-[Region:14] area-[Region:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b5 direc ((bpos (right-quarter (from-goal-line opp 17 35))) (do (player-range our 2 11) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Num -> ({ 17 }) </node>
<node id="7"> *n:Num -> ({ 35 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="10"> *n:Unum -> ({ 2 }) </node>
<node id="11"> *n:Unum -> ({ 11 }) </node>
<node id="12"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="15"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="263">
<nl lang="en">
If the ball is in our midfield , position player 3 at -LRB- -5 , -23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN midfield)))))) (, ,) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD -23)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] midfield-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 3-[Unum:7] at-[Action:8] -LRB--[Point:10] -5-[Num:11] ,-[Point:10] -23-[Num:12] -RRB--[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3a direc ((bpos (midfield our)) (do (player our {3}) (pos (pt -5 -23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ -5 }) </node>
<node id="12"> *n:Num -> ({ -23 }) </node>
</mrl-parse>
</example>

<example id="266">
<nl lang="en">
If the ball is in the opponent 's half , position player 7 at 37 meters from the opponent 's goal with ball attraction -LRB- 0.5 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (NN opponent) (POS 's)) (NN half)))))) (, ,) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (NP (NP (CD 37) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal)))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] half-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 7-[Unum:7] at-[Action:8] 37-[Num:13] meters-[Point:11] from-[Point:11] the-[Team:12] opponent-[Team:12] 's-[Team:12] goal-[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14006 direc ((bpos (half opp)) (do (player our {7}) (pos (pt-with-ball-attraction (from-goal opp 37) (pt 0.5 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
<node id="13"> *n:Num -> ({ 37 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="269">
<nl lang="en">
Let MDR1C9 be the condition where the ball is in our penalty area , player 9 is in our midfield , and no opponents are within 2 meters from him
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP MDR1C9)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area))))) (, ,) (S (NP (NN player) (CD 9)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN midfield))))) (, ,) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 2) (NNS meters)) (PP (IN from) (NP (PRP him))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] MDR1C9-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] our-[Team:5] penalty-[Region:4] area-[Region:4] ,-[Condition:2] player-[Player:7] 9-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:10] midfield-[Region:9] ,-[Condition:2] and-[Condition:2] no-[Condition:11] opponents-[Condition:11] are-[Condition:11] within-[Region:12] 2-[Num:15] meters-[Region:12] from-[Region:12] him-[Player:14])
</augsyn>
<mrl lang="robocup-clang">
(definec "MDR1C9" (and (bpos (penalty-area our)) (ppos-any (player our {9}) (midfield our)) (ppos-none opp (circle (pt (player our {9})) 2.00))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ MDR1C9 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 9 }) </node>
<node id="9"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="10"> *n:Team -> ({ our }) </node>
<node id="11"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="14"> *n:Player -> ({ *^:Player }) </node>
<node id="15"> *n:Num -> ({ 2.00 }) </node>
</mrl-parse>
</example>

<example id="272">
<nl lang="en">
If the ball is in the far left corner , our players except the goalie should pass the ball to the opponent 's left penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (ADJP (RB far) (JJ left)) (NN corner)))))) (, ,) (NP (NP (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (JJ left) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:4] far-[Team:5] left-[Region:3] corner-[Region:4] ,-[Rule:1] our-[Player:7] players-[Player:7] except-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] the-[Team:12] opponent-[Team:12] 's-[Team:12] left-[Region:10] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b41 direc ((bpos (left-quarter (near-goal-line opp))) (do (player-except our {1}) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="278">
<nl lang="en">
If the ball is in the far left side of the opponent 's midfield , all our players except the goalie should pass the ball to the rectangle -LSB- -LRB- 17.5 , -17 -RRB- , -LRB- 35 , 0 -RRB- -RSB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN midfield)))))))) (, ,) (NP (NP (PDT all) (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] far-[Region:3] left-[Region:3] side-[Region:3] of-[Region:3] the-[Team:5] opponent-[Team:5] 's-[Team:5] midfield-[Region:4] ,-[Rule:1] all-[Player:7] our-[Player:7] players-[Player:7] except-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] the-[Region:10] rectangle-[Region:10] -LSB--[Region:10] -LRB--[Point:11] 17.5-[Num:12] ,-[Point:11] -17-[Num:13] -RRB--[Point:11] ,-[Region:10] -LRB--[Point:14] 35-[Num:15] ,-[Point:14] 0-[Num:16] -RRB--[Point:14] -RSB--[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule b38 direc ((bpos (left-quarter (midfield opp))) (do (player-except our {1}) (pass (rec (pt 17.5 -17) (pt 35 0))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 17.5 }) </node>
<node id="13"> *n:Num -> ({ -17 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 35 }) </node>
<node id="16"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="279">
<nl lang="en">
If the ball is in the opponent 's half , position our player 7 at -LRB- -20 , 7 -RRB- with ball attraction -LRB- 0.5 , 0.3 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (NN opponent) (POS 's)) (NN half)))))) (, ,) (VP (VB position) (NP (PRP$ our) (NN player) (CD 7)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD 7)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.3)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] half-[Region:3] ,-[Rule:1] position-[Action:8] our-[Player:6] player-[Player:6] 7-[Unum:7] at-[Action:8] -LRB--[Point:11] -20-[Num:12] ,-[Point:11] 7-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.3-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14017 direc ((bpos (half opp)) (do (player our {7}) (pos (pt-with-ball-attraction (pt -20 7) (pt 0.5 0.3))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -20 }) </node>
<node id="13"> *n:Num -> ({ 7 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.3 }) </node>
</mrl-parse>
</example>

<example id="283">
<nl lang="en">
If the ball is in our half , position player 9 at -LRB- -15 , 5 -RRB- with ball attraction -LRB- 0.5 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (VP (VB position) (NP (NN player) (CD 9)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -15)) (, ,) (NP (CD 5)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 9-[Unum:7] at-[Action:8] -LRB--[Point:11] -15-[Num:12] ,-[Point:11] 5-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.1-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15019 direc ((bpos (half our)) (do (player our {9}) (pos (pt-with-ball-attraction (pt -15 5) (pt 0.5 0.1))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 9 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -15 }) </node>
<node id="13"> *n:Num -> ({ 5 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.1 }) </node>
</mrl-parse>
</example>

<example id="284">
<nl lang="en">
If the ball is in the far left side , 17 to 35 meters from our goal line , our players except the goalie should pass the ball to the far left side of our midfield
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (, ,) (NP (NP (QP (CD 17) (TO to) (CD 35)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))))) (, ,) (NP (NP (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] far-[Region:3] left-[Region:3] side-[Region:3] ,-[Region:3] 17-[Num:6] to-[Region:4] 35-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] ,-[Rule:1] our-[Player:9] players-[Player:9] except-[Player:9] the-[Unum:10] goalie-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] the-[Region:12] far-[Region:12] left-[Region:12] side-[Region:12] of-[Region:12] our-[Team:14] midfield-[Region:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule b44 direc ((bpos (left-quarter (from-goal-line our 17 35))) (do (player-except our {1}) (pass (left-quarter (midfield our))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 17 }) </node>
<node id="7"> *n:Num -> ({ 35 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 1 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="14"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="286">
<nl lang="en">
If it is our goalie catch , position the player 6 at -LRB- -17.0 , 16.0 -RRB- with ball attraction -LRB- 0.40 , 0.35 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ is) (NP (PRP$ our) (NN goalie) (NN catch))))) (, ,) (VP (VB position) (NP (DT the) (NN player) (CD 6)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -17.0)) (, ,) (NP (CD 16.0)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.40)) (, ,) (NP (CD 0.35)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] is-[Condition:2] our-[Condition:2] goalie-[Condition:2] catch-[Condition:2] ,-[Rule:1] position-[Action:6] the-[Player:4] player-[Player:4] 6-[Unum:5] at-[Action:6] -LRB--[Point:9] -17.0-[Num:10] ,-[Point:9] 16.0-[Num:11] -RRB--[Point:9] with-[Point:8] ball-[Point:8] attraction-[Point:8] -LRB--[Point:12] 0.40-[Num:13] ,-[Point:12] 0.35-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule GCO6 direc ((playm gc_our) (do (player our {6}) (pos (pt-with-ball-attraction (pt -17.0 16.0) (pt 0.40 0.35))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 6 }) </node>
<node id="6"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -17.0 }) </node>
<node id="11"> *n:Num -> ({ 16.0 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.40 }) </node>
<node id="14"> *n:Num -> ({ 0.35 }) </node>
</mrl-parse>
</example>

<example id="287">
<nl lang="en">
If the ball is within 32 meters from our goal line and it is not in our right penalty area , player 7 should not intercept it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (RB not) (PP (IN in) (NP (PRP$ our) (JJ right) (NN penalty) (NN area))))))) (, ,) (NP (NN player) (CD 7)) (VP (MD should) (RB not) (VP (VB intercept) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] and-[Condition:2] it-[Condition:9] is-[Condition:9] not-[Condition:8] in-[Condition:9] our-[Team:12] right-[Region:10] penalty-[Region:11] area-[Region:11] ,-[Rule:1] player-[Player:14] 7-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] it-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b19001 direc ((and (bpos (from-goal-line our 0 32)) (not (bpos (right (penalty-area our))))) (dont (player our {7}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 7 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="291">
<nl lang="en">
If the ball is within 37 meters from our goal line , position player 11 at -LRB- -10 , -12 -RRB- with ball attraction -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 37) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (VP (VB position) (NP (NN player) (CD 11)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD -12)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 37-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 11-[Unum:9] at-[Action:10] -LRB--[Point:13] -10-[Num:14] ,-[Point:13] -12-[Num:15] -RRB--[Point:13] with-[Point:12] ball-[Point:12] attraction-[Point:12] -LRB--[Point:16] 0.55-[Num:17] ,-[Point:16] 0.4-[Num:18] -RRB--[Point:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b16019 direc ((bpos (from-goal-line our 0 37)) (do (player our {11}) (pos (pt-with-ball-attraction (pt -10 -12) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 37 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 11 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -10 }) </node>
<node id="15"> *n:Num -> ({ -12 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0.55 }) </node>
<node id="18"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="293">
<nl lang="en">
If it 's our goalie catch , position player 4 at -LRB- -7.0 , 8.0 -RRB- with ball attraction -LRB- 0.3 , 0.2 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ 's) (NP (PRP$ our) (NN goalie) (NN catch))))) (, ,) (VP (VB position) (NP (NN player) (CD 4)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -7.0)) (, ,) (NP (CD 8.0)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.3)) (, ,) (NP (CD 0.2)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] 's-[Condition:2] our-[Condition:2] goalie-[Condition:2] catch-[Condition:2] ,-[Rule:1] position-[Action:6] player-[Player:4] 4-[Unum:5] at-[Action:6] -LRB--[Point:9] -7.0-[Num:10] ,-[Point:9] 8.0-[Num:11] -RRB--[Point:9] with-[Point:8] ball-[Point:8] attraction-[Point:8] -LRB--[Point:12] 0.3-[Num:13] ,-[Point:12] 0.2-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule GCO4 direc ((playm gc_our) (do (player our {4}) (pos (pt-with-ball-attraction (pt -7.0 8.0) (pt 0.3 0.2))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 4 }) </node>
<node id="6"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -7.0 }) </node>
<node id="11"> *n:Num -> ({ 8.0 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.3 }) </node>
<node id="14"> *n:Num -> ({ 0.2 }) </node>
</mrl-parse>
</example>

<example id="298">
<nl lang="en">
If player 10 has the ball , it should pass the ball to player 9
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN player) (CD 10)) (VP (VBZ has) (NP (DT the) (NN ball))))) (, ,) (NP (PRP it)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NN player) (CD 9))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] player-[Player:3] 10-[Unum:4] has-[Condition:2] the-[Condition:2] ball-[Condition:2] ,-[Rule:1] it-[Player:6] should-[Directive:5] pass-[Action:7] the-[Action:7] ball-[Action:7] to-[Action:7] player-[Player:8] 9-[Unum:9])
</augsyn>
<mrl lang="robocup-clang">
(definerule Pass_R_2_1 direc((bowner (player our {10})) (do (player our {10}) (pass (player our {9})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 10 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ *^:Player }) </node>
<node id="7"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 9 }) </node>
</mrl-parse>
</example>

<example id="299">
<nl lang="en">
If the ball is in the rectangle -LSB- -LRB- -35 , -17 -RRB- , -LRB- -17.5 , 0 -RRB- -RSB- , our players except the goalie should pass the ball to our right midfield
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD -17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (, ,) (NP (NP (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRP$ our) (JJ right) (NN midfield))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] rectangle-[Region:3] -LSB--[Region:3] -LRB--[Point:4] -35-[Num:5] ,-[Point:4] -17-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] -17.5-[Num:8] ,-[Point:7] 0-[Num:9] -RRB--[Point:7] -RSB--[Region:3] ,-[Rule:1] our-[Player:11] players-[Player:11] except-[Player:11] the-[Unum:12] goalie-[Unum:12] should-[Directive:10] pass-[Action:13] the-[Action:13] ball-[Action:13] to-[Action:13] our-[Team:16] right-[Region:14] midfield-[Region:15])
</augsyn>
<mrl lang="robocup-clang">
(definerule b23 direc ((bpos (rec (pt -35 -17) (pt -17.5 0))) (do (player-except our {1}) (pass (right (midfield our))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ -35 }) </node>
<node id="6"> *n:Num -> ({ -17 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ -17.5 }) </node>
<node id="9"> *n:Num -> ({ 0 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 1 }) </node>
<node id="13"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="15"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="16"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="307">
<nl lang="en">
Call the condition true to be COND11
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NN condition)) (JJ true)) (VP (TO to) (VP (VB be) (NP (NNP COND11)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Condition:2] condition-[Condition:2] true-[Condition:2] to-[Statement:0] be-[Statement:0] COND11-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND11" (true))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND11 }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
</mrl-parse>
</example>

<example id="311">
<nl lang="en">
If the ball is 27 to 31 meters from the opponent 's goal line , position player 6 at -LRB- 20 , 21 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 27) (TO to) (CD 31)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (VP (VB position) (NP (NN player) (CD 6)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 20)) (, ,) (NP (CD 21)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 27-[Num:5] to-[Region:3] 31-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 6-[Unum:9] at-[Action:10] -LRB--[Point:12] 20-[Num:13] ,-[Point:12] 21-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player6f direc ((bpos (from-goal-line opp 27 31)) (do (player our {6}) (pos (pt 20 21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
<node id="6"> *n:Num -> ({ 31 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 20 }) </node>
<node id="14"> *n:Num -> ({ 21 }) </node>
</mrl-parse>
</example>

<example id="315">
<nl lang="en">
During play on , if the ball is in the far right corner , player 5 should pass the ball to the opponent 's penalty area
</nl>
<syn lang="en">
(S (PP (IN During) (NP (NN play) (NN on))) (, ,) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (ADJP (RB far) (JJ right)) (NN corner)))))) (, ,) (NP (NN player) (CD 5)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] play-[Condition:3] on-[Condition:3] ,-[Rule:1] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:6] far-[Team:7] right-[Region:5] corner-[Region:6] ,-[Rule:1] player-[Player:9] 5-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] the-[Team:13] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR11R6 direc ((and (playm play_on) (bpos (right-quarter (near-goal-line opp)))) (do (player our {5}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 5 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="318">
<nl lang="en">
If the ball is 7 to 11 meters from the opponent 's goal line , position our player 3 at -LRB- 40 , -21 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 7) (TO to) (CD 11)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (VP (VB position) (NP (PRP$ our) (NN player) (CD 3)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 40)) (, ,) (NP (CD -21)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 7-[Num:5] to-[Region:3] 11-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] our-[Player:8] player-[Player:8] 3-[Unum:9] at-[Action:10] -LRB--[Point:12] 40-[Num:13] ,-[Point:12] -21-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3j direc ((bpos (from-goal-line opp 7 11)) (do (player our {3}) (pos (pt 40 -21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 7 }) </node>
<node id="6"> *n:Num -> ({ 11 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 40 }) </node>
<node id="14"> *n:Num -> ({ -21 }) </node>
</mrl-parse>
</example>

<example id="319">
<nl lang="en">
If our player 8 has the ball , it should shoot
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP$ our) (NN player) (CD 8)) (VP (VBZ has) (NP (DT the) (NN ball))))) (, ,) (NP (PRP it)) (VP (MD should) (VP (VB shoot))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:3] player-[Player:3] 8-[Unum:4] has-[Condition:2] the-[Condition:2] ball-[Condition:2] ,-[Rule:1] it-[Player:6] should-[Directive:5] shoot-[Action:7])
</augsyn>
<mrl lang="robocup-clang">
(definerule angeziw8 direc((bowner (player our {8})) (do (player our {8}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 8 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ *^:Player }) </node>
<node id="7"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="320">
<nl lang="en">
If the ball is within 32 meters from our goal line , and the ball is not in our left penalty area , player 5 should not intercept the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))) (, ,) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (RB not) (PP (IN in) (NP (PRP$ our) (JJ left) (NN penalty) (NN area))))))) (, ,) (NP (NN player) (CD 5)) (VP (MD should) (RB not) (VP (VB intercept) (NP (DT the) (NN ball)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] within-[Region:4] 32-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] ,-[Condition:2] and-[Condition:2] the-[Condition:9] ball-[Condition:9] is-[Condition:9] not-[Condition:8] in-[Condition:9] our-[Team:12] left-[Region:10] penalty-[Region:11] area-[Region:11] ,-[Rule:1] player-[Player:14] 5-[Unum:15] should-[Directive:13] not-[Directive:13] intercept-[Action:16] the-[Action:16] ball-[Action:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b21001 direc ((and (bpos (from-goal-line our 0 32)) (not (bpos (left (penalty-area our))))) (dont (player our {5}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 5 }) </node>
<node id="16"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="327">
<nl lang="en">
If the ball is very close to our goal line during the normal play , position player 3 within 1 meter from -LRB- -3.0 , 0.0 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (ADJP (RB very) (JJ close) (PP (TO to) (NP (PRP$ our) (NN goal) (NN line))))) (PP (IN during) (NP (DT the) (JJ normal) (NN play))))) (, ,) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN within) (NP (NP (CD 1) (NN meter)) (PP (IN from) (NP (PRN (-LRB- -LRB-) (NP (CD -3.0)) (, ,) (NP (CD 0.0)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] very-[Region:4] close-[Region:4] to-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] during-[Condition:6] the-[Condition:6] normal-[Condition:6] play-[Condition:6] ,-[Rule:1] position-[Action:10] player-[Player:8] 3-[Unum:9] within-[Region:11] 1-[Num:15] meter-[Region:11] from-[Region:11] -LRB--[Point:12] -3.0-[Num:13] ,-[Point:12] 0.0-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule FP29 direc ((and (bpos (near-goal-line our)) (playm play_on)) (do (player our {3}) (pos (circle (pt -3.0 0.0) 1)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -3.0 }) </node>
<node id="14"> *n:Num -> ({ 0.0 }) </node>
<node id="15"> *n:Num -> ({ 1 }) </node>
</mrl-parse>
</example>

<example id="329">
<nl lang="en">
If the ball is in our half , position player 7 at -LRB- 12 , 0 -RRB- with ball attraction -LRB- 0.5 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (, ,) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 12)) (, ,) (NP (CD 0)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 7-[Unum:7] at-[Action:8] -LRB--[Point:11] 12-[Num:12] ,-[Point:11] 0-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15017 direc ((bpos (half our)) (do (player our {7}) (pos (pt-with-ball-attraction (pt 12 0) (pt 0.5 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 12 }) </node>
<node id="13"> *n:Num -> ({ 0 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="333">
<nl lang="en">
During the normal play , if the ball is in the midfield , player 2 , 6 or 8 should dribble to the point 1.50 meters in front of the ball
</nl>
<syn lang="en">
(S (PP (IN During) (NP (DT the) (JJ normal) (NN play))) (, ,) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN midfield)))))) (, ,) (NP (NN player) (QP (CD 2) (, ,) (CD 6) (CC or) (CD 8))) (VP (MD should) (VP (VB dribble) (PP (TO to) (NP (NP (DT the) (NN point)) (NP (NP (CD 1.50) (NNS meters)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (DT the) (NN ball)))))))))))
</syn>
<augsyn lang="en">
(S During-[Condition:3] the-[Condition:3] normal-[Condition:3] play-[Condition:3] ,-[Rule:1] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:5] midfield-[Region:5] ,-[Rule:1] player-[Player:7] 2-[Unum:8] ,-[Player:7] 6-[Unum:9] or-[Player:7] 8-[Unum:10] should-[Directive:6] dribble-[Action:11] to-[Action:11] the-[Point:13] point-[Point:13] 1.50-[Num:16] meters-[Point:13] in-[Point:13] front-[Point:13] of-[Point:13] the-[Point:14] ball-[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule M4R6Dribble direc ((and (playm play_on) (bpos (midfield))) (do (player our {2 6 8}) (dribble ((pt ball) + (pt 1.50 0.00))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( midfield ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Unum -> ({ 8 }) </node>
<node id="11"> *n:Action -> ({ ( dribble *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( *n:Point + *n:Point ) }) </node>
<node id="14"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="15"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="16"> *n:Num -> ({ 1.50 }) </node>
<node id="17"> *n:Num -> ({ 0.00 }) </node>
</mrl-parse>
</example>

<example id="334">
<nl lang="en">
If it is before the kick off , after our goal or after the opponent 's goal , position player 3 at -LRB- -10.00 , -0.50 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ is) (PP (PP (IN before) (NP (DT the) (NN kick) (NN off))) (, ,) (PP (IN after) (NP (PRP$ our) (NN goal))) (CC or) (PP (IN after) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal))))))) (, ,) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -10.00)) (, ,) (NP (CD -0.50)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] is-[Condition:2] before-[Condition:3] the-[Condition:3] kick-[Condition:3] off-[Condition:3] ,-[Condition:2] after-[Condition:4] our-[Condition:4] goal-[Condition:4] or-[Condition:2] after-[Condition:5] the-[Condition:5] opponent-[Condition:5] 's-[Condition:5] goal-[Condition:5] ,-[Rule:1] position-[Action:9] player-[Player:7] 3-[Unum:8] at-[Action:9] -LRB--[Point:11] -10.00-[Num:12] ,-[Point:11] -0.50-[Num:13] -RRB--[Point:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule BKO3 direc ((or (playm bko) (playm ag_our) (playm ag_opp)) (do (player our {3}) (pos (pt -10.00 -0.50)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ag_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm ag_opp ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 3 }) </node>
<node id="9"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -10.00 }) </node>
<node id="13"> *n:Num -> ({ -0.50 }) </node>
</mrl-parse>
</example>

<example id="336">
<nl lang="en">
If player 4 has the ball , it should pass the ball to player 2 or 10
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NN player) (CD 4)) (VP (VBZ has) (NP (DT the) (NN ball))))) (, ,) (NP (PRP it)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NN player) (QP (CD 2) (CC or) (CD 10)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] player-[Player:3] 4-[Unum:4] has-[Condition:2] the-[Condition:2] ball-[Condition:2] ,-[Rule:1] it-[Player:6] should-[Directive:5] pass-[Action:7] the-[Action:7] ball-[Action:7] to-[Action:7] player-[Player:8] 2-[Unum:9] or-[Player:8] 10-[Unum:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule utdefclr5 direc ((bowner (player our {4})) (do (player our {4}) (pass (player our {2 10})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 4 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ *^:Player }) </node>
<node id="7"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Unum -> ({ 10 }) </node>
</mrl-parse>
</example>

<example id="337">
<nl lang="en">
If the ball is 32 to 36 meters from the opponent 's goal line , position player 8 at -LRB- 15 , -11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 32) (TO to) (CD 36)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (VP (VB position) (NP (NN player) (CD 8)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD -11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 32-[Num:5] to-[Region:3] 36-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 8-[Unum:9] at-[Action:10] -LRB--[Point:12] 15-[Num:13] ,-[Point:12] -11-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player8j direc ((bpos (from-goal-line opp 32 36)) (do (player our {8}) (pos (pt 15 -11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 32 }) </node>
<node id="6"> *n:Num -> ({ 36 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 15 }) </node>
<node id="14"> *n:Num -> ({ -11 }) </node>
</mrl-parse>
</example>

<example id="341">
<nl lang="en">
If the ball is in the rectangle -LSB- -LRB- 17.5 , 0 -RRB- , -LRB- 35 , 17 -RRB- -RSB- , our players except the goalie should pass the ball to the left side of the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (, ,) (NP (NP (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] rectangle-[Region:3] -LSB--[Region:3] -LRB--[Point:4] 17.5-[Num:5] ,-[Point:4] 0-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 35-[Num:8] ,-[Point:7] 17-[Num:9] -RRB--[Point:7] -RSB--[Region:3] ,-[Rule:1] our-[Player:11] players-[Player:11] except-[Player:11] the-[Unum:12] goalie-[Unum:12] should-[Directive:10] pass-[Action:13] the-[Action:13] ball-[Action:13] to-[Action:13] the-[Region:14] left-[Region:14] side-[Region:14] of-[Region:14] the-[Team:16] opponent-[Team:16] 's-[Team:16] penalty-[Region:15] area-[Region:15])
</augsyn>
<mrl lang="robocup-clang">
(definerule b30 direc ((bpos (rec (pt 17.5 0) (pt 35 17))) (do (player-except our {1}) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 17.5 }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 35 }) </node>
<node id="9"> *n:Num -> ({ 17 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 1 }) </node>
<node id="13"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="15"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="16"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="343">
<nl lang="en">
Set the goalie 's default position to be in front of our goal
</nl>
<syn lang="en">
(S (VP (VB Set) (S (NP (NP (DT the) (NN goalie) (POS 's)) (NN default) (NN position)) (VP (TO to) (VP (VB be) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal))))))))))
</syn>
<augsyn lang="en">
(S Set-[Action:6] the-[Player:4] goalie-[Player:4] 's-[Player:4] default-[Action:6] position-[Action:6] to-[Action:6] be-[Action:6] in-[Point:8] front-[Point:8] of-[Point:8] our-[Team:9] goal-[Point:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player1 direc ((true) (do (player our {1}) (home (front-of-goal our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 1 }) </node>
<node id="6"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="345">
<nl lang="en">
If the ball is in the far right side , 17 to 35 meters from our goal line , our players except the goalie should pass the ball to the far right side of our midfield
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (ADJP (RB far) (JJ right)) (NN side)) (, ,) (NP (NP (QP (CD 17) (TO to) (CD 35)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))))) (, ,) (NP (NP (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (ADJP (RB far) (JJ right)) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] far-[Region:3] right-[Region:3] side-[Region:3] ,-[Region:3] 17-[Num:6] to-[Region:4] 35-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] ,-[Rule:1] our-[Player:9] players-[Player:9] except-[Player:9] the-[Unum:10] goalie-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] the-[Region:12] far-[Region:12] right-[Region:12] side-[Region:12] of-[Region:12] our-[Team:14] midfield-[Region:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule b2 direc ((bpos (right-quarter (from-goal-line our 17 35))) (do (player-except our {1}) (pass (right-quarter (midfield our))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 17 }) </node>
<node id="7"> *n:Num -> ({ 35 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 1 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="14"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="346">
<nl lang="en">
Let MDR1C6 be the condition where the ball is in our penalty area , player 2 is in our midfield , and no opponents are within 2.00 meters from him
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP MDR1C6)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area))))) (, ,) (S (NP (NN player) (CD 2)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN midfield))))) (, ,) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (JJ 2.00) (NNS meters)) (PP (IN from) (NP (PRP him))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] MDR1C6-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] our-[Team:5] penalty-[Region:4] area-[Region:4] ,-[Condition:2] player-[Player:7] 2-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:10] midfield-[Region:9] ,-[Condition:2] and-[Condition:2] no-[Condition:11] opponents-[Condition:11] are-[Condition:11] within-[Region:12] 2.00-[Num:15] meters-[Region:12] from-[Region:12] him-[Player:14])
</augsyn>
<mrl lang="robocup-clang">
(definec "MDR1C6" (and (bpos (penalty-area our)) (ppos-any (player our {2}) (midfield our)) (ppos-none opp (circle (pt (player our {2})) 2.00))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ MDR1C6 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 2 }) </node>
<node id="9"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="10"> *n:Team -> ({ our }) </node>
<node id="11"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="14"> *n:Player -> ({ *^:Player }) </node>
<node id="15"> *n:Num -> ({ 2.00 }) </node>
</mrl-parse>
</example>

<example id="347">
<nl lang="en">
If the ball is in the far right corner , our players except the goalie should pass the ball to the right side of the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (ADJP (RB far) (JJ right)) (NN corner)))))) (, ,) (NP (NP (PRP$ our) (NNS players)) (PP (IN except) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:4] far-[Team:5] right-[Region:3] corner-[Region:4] ,-[Rule:1] our-[Player:7] players-[Player:7] except-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] the-[Action:9] ball-[Action:9] to-[Action:9] the-[Region:10] right-[Region:10] side-[Region:10] of-[Region:10] the-[Team:12] opponent-[Team:12] 's-[Team:12] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b34 direc ((bpos (right-quarter (near-goal-line opp))) (do (player-except our {1}) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="348">
<nl lang="en">
If the ball is near our goal line , position player 7 at -LRB- -35 , 11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))) (, ,) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD 11)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] near-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 7-[Unum:7] at-[Action:8] -LRB--[Point:10] -35-[Num:11] ,-[Point:10] 11-[Num:12] -RRB--[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player7 direc ((bpos (near-goal-line our)) (do (player our {7}) (pos (pt -35 11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ -35 }) </node>
<node id="12"> *n:Num -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="349">
<nl lang="en">
If the ball is 17 to 22 meters from the opponent 's goal line , position player 3 at -LRB- 30 , -18 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 17) (TO to) (CD 22)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 30)) (, ,) (NP (CD -18)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 17-[Num:5] to-[Region:3] 22-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 3-[Unum:9] at-[Action:10] -LRB--[Point:12] 30-[Num:13] ,-[Point:12] -18-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3h direc ((bpos (from-goal-line opp 17 22)) (do (player our {3}) (pos (pt 30 -18)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 17 }) </node>
<node id="6"> *n:Num -> ({ 22 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 30 }) </node>
<node id="14"> *n:Num -> ({ -18 }) </node>
</mrl-parse>
</example>

<example id="350">
<nl lang="en">
If the ball is 42 to 47 meters from the opponent 's goal line , position player 6 at -LRB- 5 , 23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 42) (TO to) (CD 47)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (VP (VB position) (NP (NN player) (CD 6)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 5)) (, ,) (NP (CD 23)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 42-[Num:5] to-[Region:3] 47-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 6-[Unum:9] at-[Action:10] -LRB--[Point:12] 5-[Num:13] ,-[Point:12] 23-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player6c direc ((bpos (from-goal-line opp 42 47)) (do (player our {6}) (pos (pt 5 23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 42 }) </node>
<node id="6"> *n:Num -> ({ 47 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 5 }) </node>
<node id="14"> *n:Num -> ({ 23 }) </node>
</mrl-parse>
</example>

<example id="353">
<nl lang="en">
Let Free_Kick_mod be the condition where the play mode is our kick in , corner kick , free kick , goalie 's kick , or kick off
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Free_Kick_mod)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN play) (NN mode)) (VP (VBZ is) (NP (NP (PRP$ our) (NN kick) (NN in)) (, ,) (NP (NN corner) (NN kick)) (, ,) (NP (NN free) (NN kick)) (, ,) (NP (NP (NN goalie) (POS 's)) (NN kick)) (, ,) (CC or) (NP (NN kick) (NN off)))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Free_Kick_mod-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:2] play-[Condition:2] mode-[Condition:2] is-[Condition:2] our-[Condition:3] kick-[Condition:3] in-[Condition:3] ,-[Condition:2] corner-[Condition:4] kick-[Condition:4] ,-[Condition:2] free-[Condition:5] kick-[Condition:5] ,-[Condition:2] goalie-[Condition:6] 's-[Condition:6] kick-[Condition:6] ,-[Condition:2] or-[Condition:2] kick-[Condition:7] off-[Condition:7])
</augsyn>
<mrl lang="robocup-clang">
(definec "Free_Kick_mod" (or (playm ki_our) (playm ck_our) (playm fk_our) (playm gk_our) (playm ko_our)) )
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Free_Kick_mod }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm ki_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ck_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="6"> *n:Condition -> ({ ( playm gk_our ) }) </node>
<node id="7"> *n:Condition -> ({ ( playm ko_our ) }) </node>
</mrl-parse>
</example>

<example id="360">
<nl lang="en">
If the ball is within 6 meters of our player 5 , position player 5 within 0.7 meters of the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 5)))))))) (, ,) (VP (VB position) (NP (NN player) (CD 5)) (PP (IN within) (NP (NP (CD 0.7) (NNS meters)) (PP (IN of) (NP (DT the) (NN ball)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] of-[Region:3] our-[Player:5] player-[Player:5] 5-[Unum:6] ,-[Rule:1] position-[Action:11] player-[Player:9] 5-[Unum:10] within-[Region:12] 0.7-[Num:14] meters-[Region:12] of-[Region:12] the-[Point:13] ball-[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule BallAttracct5 direc ((bpos (circle (pt (player our {5})) 6)) (do (player our {5}) (pos (circle (pt ball) 0.7)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 5 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 5 }) </node>
<node id="11"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="14"> *n:Num -> ({ 0.7 }) </node>
</mrl-parse>
</example>

<example id="361">
<nl lang="en">
If the ball is in the opponent 's half , position player 2 at -LRB- 15 , 10 -RRB- with ball attraction -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (NN opponent) (POS 's)) (NN half)))))) (, ,) (VP (VB position) (NP (NN player) (CD 2)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD 10)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] half-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 2-[Unum:7] at-[Action:8] -LRB--[Point:11] 15-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.55-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14012 direc ((bpos (half opp)) (do (player our {2}) (pos (pt-with-ball-attraction (pt 15 10) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 15 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.55 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="362">
<nl lang="en">
If the ball is 27 to 32 meters from the opponent 's goal line , position player 6 at -LRB- 20 , 18 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 27) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (VP (VB position) (NP (NN player) (CD 6)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 20)) (, ,) (NP (CD 18)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 27-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 6-[Unum:9] at-[Action:10] -LRB--[Point:12] 20-[Num:13] ,-[Point:12] 18-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player6f direc ((bpos (from-goal-line opp 27 32)) (do (player our {6}) (pos (pt 20 18)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 20 }) </node>
<node id="14"> *n:Num -> ({ 18 }) </node>
</mrl-parse>
</example>

<example id="363">
<nl lang="en">
If the ball is within 32 meters from our goal line , position player 6 at -LRB- 0 , -15 -RRB- with ball attraction -LRB- 0.75 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 32) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (VP (VB position) (NP (NN player) (CD 6)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD -15)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.75)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] position-[Action:10] player-[Player:8] 6-[Unum:9] at-[Action:10] -LRB--[Point:13] 0-[Num:14] ,-[Point:13] -15-[Num:15] -RRB--[Point:13] with-[Point:12] ball-[Point:12] attraction-[Point:12] -LRB--[Point:16] 0.75-[Num:17] ,-[Point:16] 0.4-[Num:18] -RRB--[Point:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b16004 direc ((bpos (from-goal-line our 0 32)) (do (player our {6}) (pos (pt-with-ball-attraction (pt 0 -15) (pt 0.75 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 6 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 0 }) </node>
<node id="15"> *n:Num -> ({ -15 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0.75 }) </node>
<node id="18"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="368">
<nl lang="en">
Players 2 , 7 or 8 should shoot
</nl>
<syn lang="en">
(S (NP (NNS Players) (QP (CD 2) (, ,) (CD 7) (CC or) (CD 8))) (VP (MD should) (VP (VB shoot))))
</syn>
<augsyn lang="en">
(S Players-[Player:4] 2-[Unum:5] ,-[Player:4] 7-[Unum:6] or-[Player:4] 8-[Unum:7] should-[Directive:3] shoot-[Action:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule Forw2d direc ((true) (do (player our {2 7 8}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 2 }) </node>
<node id="6"> *n:Unum -> ({ 7 }) </node>
<node id="7"> *n:Unum -> ({ 8 }) </node>
<node id="8"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="369">
<nl lang="en">
If the ball is in the rectangle -LSB- -LRB- -1 , -35 -RRB- , -LRB- 0 , 35 -RRB- -RSB- , position player 3 at -LRB- -10 , -21 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -1)) (, ,) (NP (CD -35)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 35)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (, ,) (VP (VB position) (NP (NN player) (CD 3)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD -21)) (-RRB- -RRB-))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] rectangle-[Region:3] -LSB--[Region:3] -LRB--[Point:4] -1-[Num:5] ,-[Point:4] -35-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 0-[Num:8] ,-[Point:7] 35-[Num:9] -RRB--[Point:7] -RSB--[Region:3] ,-[Rule:1] position-[Action:13] player-[Player:11] 3-[Unum:12] at-[Action:13] -LRB--[Point:15] -10-[Num:16] ,-[Point:15] -21-[Num:17] -RRB--[Point:15])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3a direc ((bpos (rec (pt -1 -35) (pt 0 35))) (do (player our {3}) (pos (pt -10 -21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ -1 }) </node>
<node id="6"> *n:Num -> ({ -35 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
<node id="9"> *n:Num -> ({ 35 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 3 }) </node>
<node id="13"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ *n:Point }) </node>
<node id="15"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="16"> *n:Num -> ({ -10 }) </node>
<node id="17"> *n:Num -> ({ -21 }) </node>
</mrl-parse>
</example>

<example id="370">
<nl lang="en">
If the goalie has the ball in the right field , he should clear the ball from -LRB- 0 , 40 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN goalie)) (VP (VBZ has) (NP (DT the) (NN ball)) (PP (IN in) (NP (DT the) (JJ right) (NN field)))))) (, ,) (NP (PRP he)) (VP (MD should) (VP (VB clear) (NP (DT the) (NN ball)) (PP (IN from) (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 40)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Player:4] goalie-[Player:4] has-[Condition:3] the-[Condition:3] ball-[Condition:3] in-[Condition:6] the-[Region:8] right-[Region:7] field-[Region:8] ,-[Rule:1] he-[Player:10] should-[Directive:9] clear-[Action:11] the-[Action:11] ball-[Action:11] from-[Action:11] -LRB--[Point:13] 0-[Num:14] ,-[Point:13] 40-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule utgoalie2 direc ((and (bowner (player our {1})) (bpos (right (field)))) (do (player our {1}) (clear (pt 0 40)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 1 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( field ) }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ *^:Player }) </node>
<node id="11"> *n:Action -> ({ ( clear *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ 0 }) </node>
<node id="15"> *n:Num -> ({ 40 }) </node>
</mrl-parse>
</example>

<example id="373">
<nl lang="en">
If it is before kick off , after our goal or after opponent 's goal , position player 7 at 27 meters from our goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ is) (PP (PP (IN before) (NP (NN kick) (NN off))) (, ,) (PP (IN after) (NP (PRP$ our) (NN goal))) (CC or) (PP (IN after) (NP (NP (NN opponent) (POS 's)) (NN goal))))))) (, ,) (VP (VB position) (NP (NN player) (CD 7)) (PP (IN at) (NP (NP (CD 27) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] is-[Condition:2] before-[Condition:3] kick-[Condition:3] off-[Condition:3] ,-[Condition:2] after-[Condition:4] our-[Condition:4] goal-[Condition:4] or-[Condition:2] after-[Condition:5] opponent-[Condition:5] 's-[Condition:5] goal-[Condition:5] ,-[Rule:1] position-[Action:9] player-[Player:7] 7-[Unum:8] at-[Action:9] 27-[Num:13] meters-[Point:11] from-[Point:11] our-[Team:12] goal-[Point:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule BKO7 direc ((or (playm bko) (playm ag_our) (playm ag_opp)) (do (player our {7}) (pos (from-goal our 27)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ag_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm ag_opp ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="374">
<nl lang="en">
If the ball is in the opponent 's half , position player 5 at -LRB- 0 , 10 -RRB- with ball attraction -LRB- 0.6 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (NN opponent) (POS 's)) (NN half)))))) (, ,) (VP (VB position) (NP (NN player) (CD 5)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 10)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.6)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] half-[Region:3] ,-[Rule:1] position-[Action:8] player-[Player:6] 5-[Unum:7] at-[Action:8] -LRB--[Point:11] 0-[Num:12] ,-[Point:11] 10-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.6-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14015 direc ((bpos (half opp)) (do (player our {5}) (pos (pt-with-ball-attraction (pt 0 10) (pt 0.6 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.6 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="375">
<nl lang="en">
If the ball is on our half of the field , player 5 should position itself at -LRB- -10 , 15 -RRB- with a ball attraction of -LRB- 0.7 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (NP (PRP$ our) (NN half)) (PP (IN of) (NP (DT the) (NN field)))))))) (, ,) (NP (NN player) (CD 5)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -10)) (, ,) (NP (CD 15)) (-RRB- -RRB-))) (PP (IN with) (NP (NP (DT a) (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.7)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] on-[Condition:2] our-[Team:4] half-[Region:3] of-[Region:3] the-[Region:3] field-[Region:3] ,-[Rule:1] player-[Player:6] 5-[Unum:7] should-[Directive:5] position-[Action:8] itself-[Action:8] at-[Action:8] -LRB--[Point:11] -10-[Num:12] ,-[Point:11] 15-[Num:13] -RRB--[Point:11] with-[Point:10] a-[Point:10] ball-[Point:10] attraction-[Point:10] of-[Point:10] -LRB--[Point:14] 0.7-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15015 direc ((bpos (half our)) (do (player our {5}) (pos (pt-with-ball-attraction (pt -10 15) (pt 0.7 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -10 }) </node>
<node id="13"> *n:Num -> ({ 15 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.7 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="377">
<nl lang="en">
Player 11 should intercept the ball if it is close by
</nl>
<syn lang="en">
(S (NP (NN Player) (CD 11)) (VP (MD should) (VP (VB intercept) (NP (DT the) (NN ball)))) (SBAR (IN if) (S (NP (PRP it)) (VP (VBZ is) (ADVP (JJ close) (IN by))))))
</syn>
<augsyn lang="en">
(S Player-[Player:8] 11-[Unum:9] should-[Directive:7] intercept-[Action:10] the-[Action:10] ball-[Action:10] if-[Rule:1] it-[Condition:2] is-[Condition:2] close-[Region:3] by-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definerule BallAttracct11 direc ((bpos (circle (pt (player our {11})) 6)) (do (player our {11}) (pos (circle (pt ball) 0.7)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ *^:Player }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 11 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="12"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="13"> *n:Num -> ({ 0.7 }) </node>
</mrl-parse>
</example>

<example id="379">
<nl lang="en">
In play on mode , if the ball is in the far right corner , then player 8 should pass to the opponent 's penalty area
</nl>
<syn lang="en">
(S (PP (IN In) (NP (NN play) (NN on) (NN mode))) (, ,) (SBAR (IN if) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (ADJP (RB far) (JJ right)) (NN corner)))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S In-[Condition:3] play-[Condition:3] on-[Condition:3] mode-[Condition:3] ,-[Rule:1] if-[Rule:1] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:6] far-[Team:7] right-[Region:5] corner-[Region:6] ,-[Rule:1] then-[Rule:1] player-[Player:9] 8-[Unum:10] should-[Directive:8] pass-[Action:11] to-[Action:11] the-[Team:13] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR11R8 direc ((and (playm play_on) (bpos (right-quarter (near-goal-line opp)))) (do (player our {8}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 8 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="380">
<nl lang="en">
If it is our free kick and the ball is in our penalty box , player 4 should position itself at -LRB- -36 , -7 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP it)) (VP (VBZ is) (NP (PRP$ our) (NN free) (NN kick)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN box))))))) (, ,) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -36)) (, ,) (NP (CD -7)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:3] is-[Condition:3] our-[Condition:3] free-[Condition:3] kick-[Condition:3] and-[Condition:2] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] our-[Team:6] penalty-[Region:5] box-[Region:5] ,-[Rule:1] player-[Player:8] 4-[Unum:9] should-[Directive:7] position-[Action:10] itself-[Action:10] at-[Action:10] -LRB--[Point:12] -36-[Num:13] ,-[Point:12] -7-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b13009 direc ((and (playm fk_our) (bpos (penalty-area our))) (do (player our {4}) (pos (pt -36 -7)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm fk_our ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 4 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -36 }) </node>
<node id="14"> *n:Num -> ({ -7 }) </node>
</mrl-parse>
</example>

<example id="381">
<nl lang="en">
If the ball is in our goal box , then goalie should intercept the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN goal) (NN box)))))) (, ,) (ADVP (RB then)) (NP (NN goalie)) (VP (MD should) (VP (VB intercept) (NP (DT the) (NN ball)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] goal-[Region:3] box-[Region:3] ,-[Rule:1] then-[Rule:1] goalie-[Player:6] should-[Directive:5] intercept-[Action:8] the-[Action:8] ball-[Action:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule b18500 direc ((bpos (goal-area our)) (do (player our {1}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( goal-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 1 }) </node>
<node id="8"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="383">
<nl lang="en">
If the ball is in the near quarter of the field , player 2 should position itself at -LRB- -35 , 0 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ near) (NN quarter)) (PP (IN of) (NP (DT the) (NN field)))))))) (, ,) (NP (NN player) (CD 2)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD 0)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] near-[Team:4] quarter-[Region:3] of-[Region:3] the-[Region:3] field-[Region:3] ,-[Rule:1] player-[Player:6] 2-[Unum:7] should-[Directive:5] position-[Action:8] itself-[Action:8] at-[Action:8] -LRB--[Point:10] -35-[Num:11] ,-[Point:10] 0-[Num:12] -RRB--[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2 direc ((bpos (near-goal-line our)) (do (player our {2}) (pos (pt -35 0)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ -35 }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="388">
<nl lang="en">
Let CloseToBall_4 be the condition where the ball is within 6 meters of our player 4
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP CloseToBall_4)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 4)))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] CloseToBall_4-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] of-[Region:3] our-[Player:5] player-[Player:5] 4-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definec "CloseToBall_4" (bpos (circle (pt (player our {4})) 6)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ CloseToBall_4 }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 4 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="389">
<nl lang="en">
If our player 3 , 5 or 6 has the ball and the ball is in the near - right quarter of the field then players 3 , 5 and 6 should clear the ball to -LRB- 20 , 23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP$ our) (NN player) (QP (CD 3) (, ,) (CD 5) (CC or) (CD 6))) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (ADJP (RB near) (: -) (JJ right)) (NN quarter)) (PP (IN of) (NP (DT the) (NN field))))))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 3) (, ,) (CD 5) (CC and) (CD 6))) (VP (MD should) (VP (VB clear) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 20)) (, ,) (NP (CD 23)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:4] player-[Player:4] 3-[Unum:5] ,-[Player:4] 5-[Unum:6] or-[Player:4] 6-[Unum:7] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:8] ball-[Condition:8] is-[Condition:8] in-[Condition:8] the-[Region:10] near-[Team:11] --[Region:10] right-[Region:9] quarter-[Region:10] of-[Region:10] the-[Region:10] field-[Region:10] then-[Rule:1] players-[Player:13] 3-[Unum:14] ,-[Player:13] 5-[Unum:15] and-[Player:13] 6-[Unum:16] should-[Directive:12] clear-[Action:17] the-[Action:17] ball-[Action:17] to-[Action:17] -LRB--[Point:19] 20-[Num:20] ,-[Point:19] 23-[Num:21] -RRB--[Point:19])
</augsyn>
<mrl lang="robocup-clang">
(definerule Forw2b direc ((and (bowner (player our {3 5 6})) (bpos (right (half our)))) (do (player our {3 5 6}) (pass (pt 20 23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 3 }) </node>
<node id="6"> *n:Unum -> ({ 5 }) </node>
<node id="7"> *n:Unum -> ({ 6 }) </node>
<node id="8"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="13"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="14"> *n:Unum -> ({ 3 }) </node>
<node id="15"> *n:Unum -> ({ 5 }) </node>
<node id="16"> *n:Unum -> ({ 6 }) </node>
<node id="17"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="18"> *n:Region -> ({ *n:Point }) </node>
<node id="19"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="20"> *n:Num -> ({ 20 }) </node>
<node id="21"> *n:Num -> ({ 23 }) </node>
</mrl-parse>
</example>

<example id="390">
<nl lang="en">
If it is playon mode and the ball is in MDR8 , player 4 should pass to the right side of opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP it)) (VP (VBZ is) (NP (JJ playon) (NN mode)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP MDR8))))))) (, ,) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:3] is-[Condition:3] playon-[Condition:3] mode-[Condition:3] and-[Condition:2] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] MDR8-[Ident:6] ,-[Rule:1] player-[Player:8] 4-[Unum:9] should-[Directive:7] pass-[Action:10] to-[Action:10] the-[Region:11] right-[Region:11] side-[Region:11] of-[Region:11] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR8R7 direc ((and (playm play_on) (bpos "MDR8")) (do (player our {4}) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ MDR8 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 4 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="392">
<nl lang="en">
If the ball is in the right side of our penalty box , then the ball owner should pass to rectangle -LRB- -36 , 34 , 0 , 20 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (PRP$ our) (NN penalty) (NN box)))))))) (, ,) (ADVP (RB then)) (NP (DT the) (NN ball) (NN owner)) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NN rectangle) (PRN (-LRB- -LRB-) (NP (CD -36)) (, ,) (NP (CD 34)) (, ,) (NP (CD 0)) (, ,) (NP (CD 20)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] the-[Region:4] right-[Region:4] side-[Region:4] of-[Region:4] our-[Team:6] penalty-[Region:5] box-[Region:5] ,-[Rule:1] then-[Rule:1] the-[Condition:7] ball-[Condition:7] owner-[Condition:7] should-[Directive:9] pass-[Action:11] to-[Action:11] rectangle-[Region:12] -LRB--[Region:12] -36-[Num:14] ,-[Region:12] 34-[Num:15] ,-[Region:12] 0-[Num:17] ,-[Region:12] 20-[Num:18] -RRB--[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b11001 direc ((and (bpos (right (penalty-area our))) (bowner (player our {X}))) (do (player our {X}) (pass (rec (pt -36 34) (pt 0 20))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -36 }) </node>
<node id="15"> *n:Num -> ({ 34 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0 }) </node>
<node id="18"> *n:Num -> ({ 20 }) </node>
</mrl-parse>
</example>

<example id="393">
<nl lang="en">
If it is playon mode and the ball is in MDR11 , player 4 should pass to the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP it)) (VP (VBZ is) (NP (JJ playon) (NN mode)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP MDR11))))))) (, ,) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:3] is-[Condition:3] playon-[Condition:3] mode-[Condition:3] and-[Condition:2] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] MDR11-[Ident:6] ,-[Rule:1] player-[Player:8] 4-[Unum:9] should-[Directive:7] pass-[Action:10] to-[Action:10] the-[Team:12] opponent-[Team:12] 's-[Team:12] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR11R6 direc ((and (playm play_on) (bpos "MDR11")) (do (player our {4}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ MDR11 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 4 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="394">
<nl lang="en">
Let Clear_Condition be the condition where our player 2 , 3 , 7 or 5 have the ball and the ball is close to our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Clear_Condition)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (PRP$ our) (NN player) (QP (CD 2) (, ,) (CD 3) (, ,) (CD 7) (CC or) (CD 5))) (VP (VBP have) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (ADJP (JJ close) (PP (TO to) (NP (PRP$ our) (NN goal) (NN line)))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Clear_Condition-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] our-[Player:4] player-[Player:4] 2-[Unum:5] ,-[Player:4] 3-[Unum:6] ,-[Player:4] 7-[Unum:7] or-[Player:4] 5-[Unum:8] have-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:9] ball-[Condition:9] is-[Condition:9] close-[Region:10] to-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definec "Clear_Condition" (and (bowner (player our {2 3 7 5})) (bpos (near-goal-line our))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Clear_Condition }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 2 }) </node>
<node id="6"> *n:Unum -> ({ 3 }) </node>
<node id="7"> *n:Unum -> ({ 7 }) </node>
<node id="8"> *n:Unum -> ({ 5 }) </node>
<node id="9"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="395">
<nl lang="en">
If the ball is in the far quarter of the field , players 2 and 8 should pass to player 7
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ far) (NN quarter)) (PP (IN of) (NP (DT the) (NN field)))))))) (, ,) (NP (NNS players) (QP (CD 2) (CC and) (CD 8))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NN player) (CD 7))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] far-[Team:4] quarter-[Region:3] of-[Region:3] the-[Region:3] field-[Region:3] ,-[Rule:1] players-[Player:6] 2-[Unum:7] and-[Player:6] 8-[Unum:8] should-[Directive:5] pass-[Action:9] to-[Action:9] player-[Player:10] 7-[Unum:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule utcross direc ((bpos (near-goal-line opp)) (do (player our {2 8}) (pass (player our {7})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 8 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="10"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="11"> *n:Unum -> ({ 7 }) </node>
</mrl-parse>
</example>

<example id="399">
<nl lang="en">
If the playmode is our gc then player 7 should position itself 37 meters in front of our goal with ball attraction of -LRB- 0.4 , 0.25 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN playmode)) (VP (VBZ is) (NP (PRP$ our) (NN gc))))) (ADVP (RB then)) (NP (NN player) (CD 7)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (NP (NP (NP (CD 37) (NNS meters)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal)))))) (PP (IN with) (NP (NP (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.4)) (, ,) (NP (CD 0.25)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] playmode-[Condition:2] is-[Condition:2] our-[Condition:2] gc-[Condition:2] then-[Rule:1] player-[Player:4] 7-[Unum:5] should-[Directive:3] position-[Action:6] itself-[Action:6] 37-[Num:11] meters-[Point:9] in-[Point:9] front-[Point:9] of-[Point:9] our-[Team:10] goal-[Point:9] with-[Point:8] ball-[Point:8] attraction-[Point:8] of-[Point:8] -LRB--[Point:12] 0.4-[Num:13] ,-[Point:12] 0.25-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule GCO7 direc ((playm gc_our) (do (player our {7}) (pos (pt-with-ball-attraction (from-goal our 37) (pt 0.4 0.25))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 7 }) </node>
<node id="6"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="10"> *n:Team -> ({ our }) </node>
<node id="11"> *n:Num -> ({ 37 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.4 }) </node>
<node id="14"> *n:Num -> ({ 0.25 }) </node>
</mrl-parse>
</example>

<example id="400">
<nl lang="en">
If the ball is within 37 meters to our goal line , player 9 should position itself at -LRB- -15 , 4 -RRB- with ball attraction -LRB- 0.5 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 37) (NNS meters)) (PP (TO to) (NP (PRP$ our) (NN goal) (NN line)))))))) (, ,) (NP (NN player) (CD 9)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -15)) (, ,) (NP (CD 4)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-)))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 37-[Num:6] meters-[Region:3] to-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] player-[Player:8] 9-[Unum:9] should-[Directive:7] position-[Action:10] itself-[Action:10] at-[Action:10] -LRB--[Point:13] -15-[Num:14] ,-[Point:13] 4-[Num:15] -RRB--[Point:13] with-[Point:12] ball-[Point:12] attraction-[Point:12] -LRB--[Point:16] 0.5-[Num:17] ,-[Point:16] 0.1-[Num:18] -RRB--[Point:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b16007 direc ((bpos (from-goal-line our 0 37)) (do (player our {9}) (pos (pt-with-ball-attraction (pt -15 4) (pt 0.5 0.1))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 37 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 9 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -15 }) </node>
<node id="15"> *n:Num -> ({ 4 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0.5 }) </node>
<node id="18"> *n:Num -> ({ 0.1 }) </node>
</mrl-parse>
</example>

<example id="401">
<nl lang="en">
If DR2C7 is true then players 2 , 3 , 7 and 8 should pass to player 4
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NNP DR2C7)) (VP (VBZ is) (ADJP (JJ true))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 2) (, ,) (CD 3) (, ,) (CD 7) (CC and) (CD 8))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NN player) (CD 4))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] DR2C7-[Ident:3] is-[Rule:1] true-[Rule:1] then-[Rule:1] players-[Player:5] 2-[Unum:6] ,-[Player:5] 3-[Unum:7] ,-[Player:5] 7-[Unum:8] and-[Player:5] 8-[Unum:9] should-[Directive:4] pass-[Action:10] to-[Action:10] player-[Player:11] 4-[Unum:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule DFR2Pass7 direc ("DR2C7" (do (player our {2 3 7 8}) (pass (player our {4})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="3"> *n:Ident -> ({ DR2C7 }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 2 }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Unum -> ({ 7 }) </node>
<node id="9"> *n:Unum -> ({ 8 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 4 }) </node>
</mrl-parse>
</example>

<example id="404">
<nl lang="en">
Define COND1 to be the true condition
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP COND1)) (VP (TO to) (VP (VB be) (NP (DT the) (JJ true) (NN condition)))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] COND1-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Condition:2] true-[Condition:2] condition-[Condition:2])
</augsyn>
<mrl lang="robocup-clang">
(definec "COND1" (true))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ COND1 }) </node>
<node id="2"> *n:Condition -> ({ ( true ) }) </node>
</mrl-parse>
</example>

<example id="405">
<nl lang="en">
Define CloseToBall_11 as the condition that the ball is within 6 meters from our player 11
</nl>
<syn lang="en">
(S (VP (VB Define) (NP (NNP CloseToBall_11)) (PP (IN as) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NN meters)) (PP (IN from) (NP (PRP$ our) (NN player) (CD 11))))))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] CloseToBall_11-[Ident:1] as-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] from-[Region:3] our-[Player:5] player-[Player:5] 11-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definec "CloseToBall_11" (bpos (circle (pt (player our {11})) 6)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ CloseToBall_11 }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 11 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="406">
<nl lang="en">
Let Pass_2 be the condition where our player 2 has the ball and it is in our half excluding the area near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_2)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (PRP$ our) (NN player) (CD 2)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (PP (IN in) (NP (NP (PRP$ our) (NN half)) (VP (VBG excluding) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line))))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_2-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] our-[Player:4] player-[Player:4] 2-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] it-[Condition:6] is-[Condition:6] in-[Condition:6] our-[Team:9] half-[Region:8] excluding-[Region:7] the-[Region:10] area-[Region:10] near-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_2"    (and (bowner (player our {2})) (bpos (reg-exclude (half our) (near-goal-line our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_2 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 2 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="407">
<nl lang="en">
Unless the ball is in the far quarter of the field , players 2 - 11 should not shoot
</nl>
<syn lang="en">
(S (SBAR (IN Unless) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ far) (NN quarter)) (PP (IN of) (NP (DT the) (NN field)))))))) (, ,) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (RB not) (VP (VB shoot))))
</syn>
<augsyn lang="en">
(S Unless-[Region:3] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:5] far-[Team:6] quarter-[Region:5] of-[Region:5] the-[Region:5] field-[Region:5] ,-[Rule:1] players-[Player:8] 2-[Unum:9] --[Player:8] 11-[Unum:10] should-[Directive:7] not-[Directive:7] shoot-[Action:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b17001 direc ((bpos (reg-exclude (field) (near-goal-line opp))) (dont (player-range our 2 11) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( field ) }) </node>
<node id="5"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ opp }) </node>
<node id="7"> *n:Directive -> ({ ( dont *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Unum -> ({ 11 }) </node>
<node id="11"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="408">
<nl lang="en">
Call DR2C9 as the condition that the ball is in D2R2 and our player 9 is on the left side of our midfield and no opponents are within 1.5 m of our player 9
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP DR2C9)) (PP (IN as) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP D2R2))))) (CC and) (S (NP (PRP$ our) (NN player) (CD 9)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 1.5) (NN m)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 9)))))))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] DR2C9-[Ident:1] as-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] D2R2-[Ident:5] and-[Condition:2] our-[Player:7] player-[Player:7] 9-[Unum:8] is-[Condition:6] on-[Condition:6] the-[Region:9] left-[Region:9] side-[Region:9] of-[Region:9] our-[Team:11] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponents-[Condition:12] are-[Condition:12] within-[Region:13] 1.5-[Num:17] m-[Region:13] of-[Region:13] our-[Player:15] player-[Player:15] 9-[Unum:16])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR2C9" (and (bpos "D2R2") (ppos-any (player our {9}) (left (midfield our))) (ppos-none opp (circle (pt (player our {9})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR2C9 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R2 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 9 }) </node>
<node id="9"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 9 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="409">
<nl lang="en">
If the ball is in our midfield then player 5 should go to -LRB- -5 , 0 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN midfield)))))) (ADVP (RB then)) (NP (NN player) (CD 5)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] midfield-[Region:3] then-[Rule:1] player-[Player:6] 5-[Unum:7] should-[Directive:5] go-[Action:8] to-[Action:8] -LRB--[Point:10] -5-[Num:11] ,-[Point:10] 0-[Num:12] -RRB--[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player5a direc ((bpos (midfield our)) (do (player our {5}) (pos (pt -5 0)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 5 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="11"> *n:Num -> ({ -5 }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="411">
<nl lang="en">
If one of our players has the ball and the ball is in DangrouseReg12 then he should clear the ball to FarReg12
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (NP (CD one)) (PP (IN of) (NP (PRP$ our) (NNS players)))) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP DangrouseReg12))))))) (ADVP (RB then)) (NP (PRP he)) (VP (MD should) (VP (VB clear) (NP (DT the) (NN ball)) (PP (TO to) (NP (NNP FarReg12))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] one-[Player:4] of-[Player:4] our-[Player:4] players-[Player:4] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] the-[Condition:5] ball-[Condition:5] is-[Condition:5] in-[Condition:5] DangrouseReg12-[Ident:7] then-[Rule:1] he-[Player:9] should-[Directive:8] clear-[Action:10] the-[Action:10] ball-[Action:10] to-[Action:10] FarReg12-[Ident:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule ruleclear12 direc ((and (bowner (player our {X})) (bpos "DangrouseReg12")) (do (player our {X}) (clear "FarReg12"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="5"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="7"> *n:Ident -> ({ DangrouseReg12 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ *^:Player }) </node>
<node id="10"> *n:Action -> ({ ( clear *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="12"> *n:Ident -> ({ FarReg12 }) </node>
</mrl-parse>
</example>

<example id="413">
<nl lang="en">
If the ball is in rectangle -LRB- 0 , -35 , 5 , 35 -RRB- then player 8 should go to -LRB- -5 , -11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NN rectangle) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD -35)) (, ,) (NP (CD 5)) (, ,) (NP (CD 35)) (-RRB- -RRB-))))))) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD -11)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] rectangle-[Region:3] -LRB--[Region:3] 0-[Num:5] ,-[Region:3] -35-[Num:6] ,-[Region:3] 5-[Num:8] ,-[Region:3] 35-[Num:9] -RRB--[Region:3] then-[Rule:1] player-[Player:11] 8-[Unum:12] should-[Directive:10] go-[Action:13] to-[Action:13] -LRB--[Point:15] -5-[Num:16] ,-[Point:15] -11-[Num:17] -RRB--[Point:15])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player8g direc ((bpos (rec (pt 0 -35) (pt 5 35))) (do (player our {8}) (pos (pt -5 -11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ -35 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 5 }) </node>
<node id="9"> *n:Num -> ({ 35 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 8 }) </node>
<node id="13"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="14"> *n:Region -> ({ *n:Point }) </node>
<node id="15"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="16"> *n:Num -> ({ -5 }) </node>
<node id="17"> *n:Num -> ({ -11 }) </node>
</mrl-parse>
</example>

<example id="414">
<nl lang="en">
Call MDR1C8 to be the condition that the ball is in our penalty area and our player 8 is in our midfield and no opponents are within 2 m of our player 8
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NNP MDR1C8)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN penalty) (NN area))))) (CC and) (S (NP (PRP$ our) (NN player) (CD 8)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN midfield))))) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 2) (NN m)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 8)))))))))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] MDR1C8-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] our-[Team:5] penalty-[Region:4] area-[Region:4] and-[Condition:2] our-[Player:7] player-[Player:7] 8-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:10] midfield-[Region:9] and-[Condition:2] no-[Condition:11] opponents-[Condition:11] are-[Condition:11] within-[Region:12] 2-[Num:16] m-[Region:12] of-[Region:12] our-[Player:14] player-[Player:14] 8-[Unum:15])
</augsyn>
<mrl lang="robocup-clang">
(definec "MDR1C8" (and (bpos (penalty-area our)) (ppos-any (player our {8}) (midfield our)) (ppos-none opp (circle (pt (player our {8})) 2.00))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ MDR1C8 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 8 }) </node>
<node id="9"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="10"> *n:Team -> ({ our }) </node>
<node id="11"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="14"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="15"> *n:Unum -> ({ 8 }) </node>
<node id="16"> *n:Num -> ({ 2.00 }) </node>
</mrl-parse>
</example>

<example id="417">
<nl lang="en">
Let Pass_10 be the condition that our player 10 has the ball and it is in Pass_region_10
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_10)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (PRP$ our) (NN player) (CD 10)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (PP (IN in) (NP (NNP Pass_region_10))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_10-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] our-[Player:4] player-[Player:4] 10-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] it-[Condition:6] is-[Condition:6] in-[Condition:6] Pass_region_10-[Ident:8])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_10"   (and (bowner (player our {10})) (bpos "Pass_region_10")))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_10 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 10 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="8"> *n:Ident -> ({ Pass_region_10 }) </node>
</mrl-parse>
</example>

<example id="419">
<nl lang="en">
If MDR1C6 , MDR1C7 , MDR1C8 , MDR1C9 , MDR1C10 and MDR1C11 are all false , then players 5 , 4 and 6 should shoot
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NNP MDR1C6) (, ,) (NNP MDR1C7) (, ,) (NNP MDR1C8) (, ,) (NNP MDR1C9) (, ,) (NNP MDR1C10) (CC and) (NNP MDR1C11)) (VP (VBP are) (ADJP (NN all) (JJ false))))) (, ,) (ADVP (RB then)) (NP (NNS players) (QP (CD 5) (, ,) (CD 4) (CC and) (CD 6))) (VP (MD should) (VP (VB shoot))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] MDR1C6-[Ident:5] ,-[Condition:2] MDR1C7-[Ident:7] ,-[Condition:2] MDR1C8-[Ident:9] ,-[Condition:2] MDR1C9-[Ident:11] ,-[Condition:2] MDR1C10-[Ident:13] and-[Condition:2] MDR1C11-[Ident:15] are-[Condition:2] all-[Condition:2] false-[Condition:2] ,-[Rule:1] then-[Rule:1] players-[Player:17] 5-[Unum:18] ,-[Player:17] 4-[Unum:19] and-[Player:17] 6-[Unum:20] should-[Directive:16] shoot-[Action:21])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR1Clear direc ((not (or "MDR1C6" "MDR1C7" "MDR1C8" "MDR1C9" "MDR1C10" "MDR1C11")) (do (player our {5 4 6}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( not *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="4"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ MDR1C6 }) </node>
<node id="6"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="7"> *n:Ident -> ({ MDR1C7 }) </node>
<node id="8"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="9"> *n:Ident -> ({ MDR1C8 }) </node>
<node id="10"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ MDR1C9 }) </node>
<node id="12"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="13"> *n:Ident -> ({ MDR1C10 }) </node>
<node id="14"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="15"> *n:Ident -> ({ MDR1C11 }) </node>
<node id="16"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="17"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="18"> *n:Unum -> ({ 5 }) </node>
<node id="19"> *n:Unum -> ({ 4 }) </node>
<node id="20"> *n:Unum -> ({ 6 }) </node>
<node id="21"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="420">
<nl lang="en">
If the ball is in RP8 then players 2 - 11 should pass to someone in RP15
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP8)))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (NN someone)) (PP (IN in) (NP (NNP RP15))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP8-[Ident:4] then-[Rule:1] players-[Player:6] 2-[Unum:7] --[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] to-[Action:9] someone-[Action:9] in-[Action:9] RP15-[Ident:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b36 direc ((bpos "RP8") (do (player-range our 2 11) (pass "RP15"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP8 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP15 }) </node>
</mrl-parse>
</example>

<example id="423">
<nl lang="en">
If the ball is at a distance of 47 to 51 from the opponent 's goal line then player 7 should go to -LRB- 0 , 11 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN at) (NP (NP (NP (DT a) (NN distance)) (PP (IN of) (NP (CD 47) (TO to) (CD 51)))) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (NN player) (CD 7)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 11)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] at-[Condition:2] a-[Region:3] distance-[Region:3] of-[Region:3] 47-[Num:5] to-[Region:3] 51-[Num:6] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] player-[Player:8] 7-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] 0-[Num:13] ,-[Point:12] 11-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player7g direc ((bpos (from-goal-line opp 47 51)) (do (player our {7}) (pos (pt 0 11)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 47 }) </node>
<node id="6"> *n:Num -> ({ 51 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 7 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0 }) </node>
<node id="14"> *n:Num -> ({ 11 }) </node>
</mrl-parse>
</example>

<example id="424">
<nl lang="en">
Let Pass_3 be the condition where our player 3 has the ball and it is our half excluding the area near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_3)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (PRP$ our) (NN player) (CD 3)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (NP (NP (PRP$ our) (NN half)) (VP (VBG excluding) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_3-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] our-[Player:4] player-[Player:4] 3-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] it-[Condition:6] is-[Condition:6] our-[Team:9] half-[Region:8] excluding-[Region:7] the-[Region:10] area-[Region:10] near-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_3"    (and (bowner (player our {3})) (bpos (reg-exclude (half our) (near-goal-line our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_3 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 3 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="428">
<nl lang="en">
If the ball is in opponent 's half then the goalie should position itself directly in front of our goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (ADVP (RB then)) (NP (DT the) (NN goalie)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (ADVP (RB directly)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] then-[Rule:1] the-[Player:6] goalie-[Player:6] should-[Directive:5] position-[Action:8] itself-[Action:8] directly-[Point:10] in-[Point:10] front-[Point:10] of-[Point:10] our-[Team:11] goal-[Point:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14011 direc ((bpos (half opp)) (do (player our {1}) (pos (front-of-goal our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 1 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="431">
<nl lang="en">
If the ball is 20 m to 47 m from opponent 's goal line then player 9 should dribble to their penalty box
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (NP (CD 20) (NN m)) (TO to) (NP (CD 47) (NN m))) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line))))))) (ADVP (RB then)) (NP (NN player) (CD 9)) (VP (MD should) (VP (VB dribble) (PP (TO to) (NP (PRP$ their) (NN penalty) (NN box))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 20-[Num:5] m-[Region:3] to-[Region:3] 47-[Num:6] m-[Region:3] from-[Region:3] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] player-[Player:8] 9-[Unum:9] should-[Directive:7] dribble-[Action:10] to-[Action:10] their-[Team:12] penalty-[Region:11] box-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule Drible_9 direc((bpos (from-goal-line opp 20 47)) (do (player our {9}) (dribble (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 20 }) </node>
<node id="6"> *n:Num -> ({ 47 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 9 }) </node>
<node id="10"> *n:Action -> ({ ( dribble *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="433">
<nl lang="en">
If it is in play on mode and the ball is in the far right corner , then player 6 should pass the ball to the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP it)) (VP (VBZ is) (PP (IN in) (NP (NN play) (NN on) (NN mode))))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (ADJP (RB far) (JJ right)) (NN corner))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 6)) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:3] is-[Condition:3] in-[Condition:3] play-[Condition:3] on-[Condition:3] mode-[Condition:3] and-[Condition:2] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] the-[Region:6] far-[Team:7] right-[Region:5] corner-[Region:6] ,-[Rule:1] then-[Rule:1] player-[Player:9] 6-[Unum:10] should-[Directive:8] pass-[Action:11] the-[Action:11] ball-[Action:11] to-[Action:11] the-[Team:13] opponent-[Team:13] 's-[Team:13] penalty-[Region:12] area-[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule MDR11R7 direc ((and (playm play_on) (bpos (right-quarter (near-goal-line opp)))) (do (player our {6}) (pass (penalty-area opp)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="6"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="7"> *n:Team -> ({ opp }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 6 }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="13"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="437">
<nl lang="en">
If the ball is 12 to 17 meters from opponent 's goal line then player 3 should go to -LRB- 35 , -16 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 12) (TO to) (CD 17)) (NNS meters)) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line))))))) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD -16)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 12-[Num:5] to-[Region:3] 17-[Num:6] meters-[Region:3] from-[Region:3] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] player-[Player:8] 3-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] 35-[Num:13] ,-[Point:12] -16-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3i direc ((bpos (from-goal-line opp 12 17)) (do (player our {3}) (pos (pt 35 -16)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 12 }) </node>
<node id="6"> *n:Num -> ({ 17 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 35 }) </node>
<node id="14"> *n:Num -> ({ -16 }) </node>
</mrl-parse>
</example>

<example id="438">
<nl lang="en">
Let DR3C3 be the condition that the ball is in D2R3 and our player 3 is in our right midfield and no opponents are within 1.5 m of him
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP DR3C3)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP D2R3))))) (CC and) (S (NP (PRP$ our) (NN player) (CD 3)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (JJ right) (NN midfield))))) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 1.5) (NN m)) (PP (IN of) (NP (PRP him))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] DR3C3-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] D2R3-[Ident:5] and-[Condition:2] our-[Player:7] player-[Player:7] 3-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:11] right-[Region:9] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponents-[Condition:12] are-[Condition:12] within-[Region:13] 1.5-[Num:16] m-[Region:13] of-[Region:13] him-[Player:15])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR3C3" (and (bpos "D2R3") (ppos-any (player our {3}) (right (midfield our))) (ppos-none opp (circle (pt (player our {3})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR3C3 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R3 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 3 }) </node>
<node id="9"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ *^:Player }) </node>
<node id="16"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="439">
<nl lang="en">
Let CloseToBall_10 be the condition where the ball is within 6 meters of our player 10
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP CloseToBall_10)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 6) (NNS meters)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 10)))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] CloseToBall_10-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 6-[Num:7] meters-[Region:3] of-[Region:3] our-[Player:5] player-[Player:5] 10-[Unum:6])
</augsyn>
<mrl lang="robocup-clang">
(definec "CloseToBall_10" (bpos (circle (pt (player our {10})) 6)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ CloseToBall_10 }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 10 }) </node>
<node id="7"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="440">
<nl lang="en">
If the playmode is gc_our then player 8 should make its position -LRB- -16 , 8 -RRB- with a ball attraction of -LRB- 0.2 , 0.25 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN playmode)) (VP (VBZ is) (NP (NN gc_our))))) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB make) (NP (PRP$ its) (NN position)) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -16)) (, ,) (NP (CD 8)) (-RRB- -RRB-))) (PP (IN with) (NP (NP (DT a) (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.2)) (, ,) (NP (CD 0.25)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] playmode-[Condition:2] is-[Condition:2] gc_our-[Condition:2] then-[Rule:1] player-[Player:4] 8-[Unum:5] should-[Directive:3] make-[Action:6] its-[Action:6] position-[Action:6] -LRB--[Point:9] -16-[Num:10] ,-[Point:9] 8-[Num:11] -RRB--[Point:9] with-[Point:8] a-[Point:8] ball-[Point:8] attraction-[Point:8] of-[Point:8] -LRB--[Point:12] 0.2-[Num:13] ,-[Point:12] 0.25-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule GCO8 direc ((playm gc_our) (do (player our {8}) (pos (pt-with-ball-attraction (pt -16.0 8.0) (pt 0.2 0.25))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( playm gc_our ) }) </node>
<node id="3"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 8 }) </node>
<node id="6"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ *n:Point }) </node>
<node id="8"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="9"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="10"> *n:Num -> ({ -16.0 }) </node>
<node id="11"> *n:Num -> ({ 8.0 }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0.2 }) </node>
<node id="14"> *n:Num -> ({ 0.25 }) </node>
</mrl-parse>
</example>

<example id="444">
<nl lang="en">
Call DR3C6 the condition that the ball is in D2R3 and our player 5 is on the right side of our midfield and no opponents are within 1.5 m of our player 5
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP DR3C6)) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP D2R3))))) (CC and) (S (NP (PRP$ our) (NN player) (CD 5)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (PRP$ our) (NNS midfield))))))) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 1.5) (NN m)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 5))))))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] DR3C6-[Ident:1] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] D2R3-[Ident:5] and-[Condition:2] our-[Player:7] player-[Player:7] 5-[Unum:8] is-[Condition:6] on-[Condition:6] the-[Region:9] right-[Region:9] side-[Region:9] of-[Region:9] our-[Team:11] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponents-[Condition:12] are-[Condition:12] within-[Region:13] 1.5-[Num:17] m-[Region:13] of-[Region:13] our-[Player:15] player-[Player:15] 5-[Unum:16])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR3C6" (and (bpos "D2R3") (ppos-any (player our {5}) (right (midfield our))) (ppos-none opp (circle (pt (player our {5})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR3C6 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R3 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 5 }) </node>
<node id="9"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 5 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="445">
<nl lang="en">
Let Pass_3 be the condition where our player 3 has the ball and it is our half but not near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_3)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (PRP$ our) (NN player) (CD 3)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (UCP (NP (PRP$ our) (NN half)) (CC but) (PP (RB not) (IN near) (NP (PRP$ our) (NN goal) (NN line)))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_3-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] our-[Player:4] player-[Player:4] 3-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] it-[Condition:6] is-[Condition:6] our-[Team:9] half-[Region:8] but-[Region:7] not-[Region:7] near-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_3"    (and (bowner (player our {3})) (bpos (reg-exclude (half our) (near-goal-line our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_3 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 3 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="446">
<nl lang="en">
If our player 2 , 7 or 8 has the ball then he should shoot it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP$ our) (NN player) (QP (CD 2) (, ,) (CD 7) (CC or) (CD 8))) (VP (VBZ has) (NP (DT the) (NN ball))))) (ADVP (RB then)) (NP (PRP he)) (VP (MD should) (VP (VB shoot) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:3] player-[Player:3] 2-[Unum:4] ,-[Player:3] 7-[Unum:5] or-[Player:3] 8-[Unum:6] has-[Condition:2] the-[Condition:2] ball-[Condition:2] then-[Rule:1] he-[Player:8] should-[Directive:7] shoot-[Action:9] it-[Action:9])
</augsyn>
<mrl lang="robocup-clang">
(definerule utfwd direc ((bowner (player our {2 7 8})) (do (player our {2 7 8}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 2 }) </node>
<node id="5"> *n:Unum -> ({ 7 }) </node>
<node id="6"> *n:Unum -> ({ 8 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ *^:Player }) </node>
<node id="9"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="448">
<nl lang="en">
If the ball is in the rectangle -LSB- -LRB- 0 , 0 -RRB- , -LRB- 17.5 , 17 -RRB- -RSB- then players 2 to 11 should pass the ball to the far right side , 17 to 35 meters from the opponent 's goal line
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-))))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (QP (CD 2) (TO to) (CD 11)))) (VP (MD should) (VP (VB pass) (NP (DT the) (NN ball)) (PP (TO to) (NP (NP (DT the) (ADJP (RB far) (JJ right)) (NN side)) (, ,) (NP (NP (QP (CD 17) (TO to) (CD 35)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] rectangle-[Region:3] -LSB--[Region:3] -LRB--[Point:4] 0-[Num:5] ,-[Point:4] 0-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 17.5-[Num:8] ,-[Point:7] 17-[Num:9] -RRB--[Point:7] -RSB--[Region:3] then-[Rule:1] players-[Player:11] 2-[Unum:12] to-[Player:11] 11-[Unum:13] should-[Directive:10] pass-[Action:14] the-[Action:14] ball-[Action:14] to-[Action:14] the-[Region:15] far-[Region:15] right-[Region:15] side-[Region:15] ,-[Region:15] 17-[Num:18] to-[Region:16] 35-[Num:19] meters-[Region:16] from-[Region:16] the-[Team:17] opponent-[Team:17] 's-[Team:17] goal-[Region:16] line-[Region:16])
</augsyn>
<mrl lang="robocup-clang">
(definerule b28 direc ((bpos (rec (pt 0 0) (pt 17.5 17))) (do (player-range our 2 11) (pass (right-quarter (from-goal-line opp 17 35))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 17.5 }) </node>
<node id="9"> *n:Num -> ({ 17 }) </node>
<node id="10"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="11"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="12"> *n:Unum -> ({ 2 }) </node>
<node id="13"> *n:Unum -> ({ 11 }) </node>
<node id="14"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="15"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="16"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="17"> *n:Team -> ({ opp }) </node>
<node id="18"> *n:Num -> ({ 17 }) </node>
<node id="19"> *n:Num -> ({ 35 }) </node>
</mrl-parse>
</example>

<example id="452">
<nl lang="en">
If the ball is in RP10 then players 2 - 11 should pass to someone in RP5
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP10)))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (NN someone)) (PP (IN in) (NP (NNP RP5))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP10-[Ident:4] then-[Rule:1] players-[Player:6] 2-[Unum:7] --[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] to-[Action:9] someone-[Action:9] in-[Action:9] RP5-[Ident:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b28 direc ((bpos "RP10") (do (player-range our 2 11) (pass "RP5"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP10 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP5 }) </node>
</mrl-parse>
</example>

<example id="453">
<nl lang="en">
If the ball is in opponent 's half then player 11 should position itself at -LRB- 15 , -10 -RRB- with a ball attraction of -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (NN half)))))) (ADVP (RB then)) (NP (NN player) (CD 11)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD -10)) (-RRB- -RRB-))) (PP (IN with) (NP (NP (DT a) (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] opponent-[Team:4] 's-[Team:4] half-[Region:3] then-[Rule:1] player-[Player:6] 11-[Unum:7] should-[Directive:5] position-[Action:8] itself-[Action:8] at-[Action:8] -LRB--[Point:11] 15-[Num:12] ,-[Point:11] -10-[Num:13] -RRB--[Point:11] with-[Point:10] a-[Point:10] ball-[Point:10] attraction-[Point:10] of-[Point:10] -LRB--[Point:14] 0.55-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b14010 direc ((bpos (half opp)) (do (player our {11}) (pos (pt-with-ball-attraction (pt 15 -10) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 11 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 15 }) </node>
<node id="13"> *n:Num -> ({ -10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.55 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="454">
<nl lang="en">
If the ball is 47 to 52 meters from the opponent 's goal line , then player 3 should go to -LRB- 0 , -23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 47) (TO to) (CD 52)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD -23)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 47-[Num:5] to-[Region:3] 52-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] then-[Rule:1] player-[Player:8] 3-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] 0-[Num:13] ,-[Point:12] -23-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3b direc ((bpos (from-goal-line opp 47 52)) (do (player our {3}) (pos (pt 0 -23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 47 }) </node>
<node id="6"> *n:Num -> ({ 52 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 0 }) </node>
<node id="14"> *n:Num -> ({ -23 }) </node>
</mrl-parse>
</example>

<example id="455">
<nl lang="en">
If the ball is in our half then player 8 should set its position to -LRB- -23 , -4 -RRB- with a ball attraction of -LRB- 0.8 , 0.1 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (NP (NN player) (CD 8)) (VP (MD should) (VP (VB set) (NP (PRP$ its) (NN position)) (PP (TO to) (NP (NP (PRN (-LRB- -LRB-) (NP (CD -23)) (, ,) (NP (CD -4)) (-RRB- -RRB-))) (PP (IN with) (NP (NP (DT a) (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.8)) (, ,) (NP (CD 0.1)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] player-[Player:6] 8-[Unum:7] should-[Directive:5] set-[Action:8] its-[Action:8] position-[Action:8] to-[Action:8] -LRB--[Point:11] -23-[Num:12] ,-[Point:11] -4-[Num:13] -RRB--[Point:11] with-[Point:10] a-[Point:10] ball-[Point:10] attraction-[Point:10] of-[Point:10] -LRB--[Point:14] 0.8-[Num:15] ,-[Point:14] 0.1-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15007 direc ((bpos (half our)) (do (player our {8}) (pos (pt-with-ball-attraction (pt -23 -4) (pt 0.8 0.1))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 8 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ -23 }) </node>
<node id="13"> *n:Num -> ({ -4 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.8 }) </node>
<node id="16"> *n:Num -> ({ 0.1 }) </node>
</mrl-parse>
</example>

<example id="457">
<nl lang="en">
Let DefenseSituation be the condition where the play mode is play on , the opponents have the ball and the ball is in our half
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP DefenseSituation)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (DT the) (NN play) (NN mode)) (VP (VBZ is) (NP (NN play) (NN on)))) (, ,) (S (NP (DT the) (NNS opponents)) (VP (VBP have) (NP (DT the) (NN ball)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] DefenseSituation-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:3] play-[Condition:3] mode-[Condition:3] is-[Condition:3] play-[Condition:3] on-[Condition:3] ,-[Condition:2] the-[Player:5] opponents-[Player:5] have-[Condition:4] the-[Condition:4] ball-[Condition:4] and-[Condition:2] the-[Condition:6] ball-[Condition:6] is-[Condition:6] in-[Condition:6] our-[Team:8] half-[Region:7])
</augsyn>
<mrl lang="robocup-clang">
(definec "DefenseSituation" (and (playm play_on) (bowner (player opp {0})) (bpos (half our))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DefenseSituation }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="5"> *n:Player -> ({ ( player opp { 0 } ) }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="8"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="461">
<nl lang="en">
If the ball is in our right penalty box and one of our players has the ball then he should pass to a teammate in rectangle -LRB- -36 , 34 , 0 , 20 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (JJ right) (NN penalty) (NN box))))) (CC and) (S (NP (NP (CD one)) (PP (IN of) (NP (PRP$ our) (NNS players)))) (VP (VBZ has) (NP (DT the) (NN ball)))))) (ADVP (RB then)) (NP (PRP he)) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (DT a) (NN teammate)) (PP (IN in) (NP (NN rectangle) (PRN (-LRB- -LRB-) (NP (CD -36)) (, ,) (NP (CD 34)) (, ,) (NP (CD 0)) (, ,) (NP (CD 20)) (-RRB- -RRB-)))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] our-[Team:6] right-[Region:4] penalty-[Region:5] box-[Region:5] and-[Condition:2] one-[Player:8] of-[Player:8] our-[Player:8] players-[Player:8] has-[Condition:7] the-[Condition:7] ball-[Condition:7] then-[Rule:1] he-[Player:10] should-[Directive:9] pass-[Action:11] to-[Action:11] a-[Action:11] teammate-[Action:11] in-[Action:11] rectangle-[Region:12] -LRB--[Region:12] -36-[Num:14] ,-[Region:12] 34-[Num:15] ,-[Region:12] 0-[Num:17] ,-[Region:12] 20-[Num:18] -RRB--[Region:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule b11001 direc ((and (bpos (right (penalty-area our))) (bowner (player our {X}))) (do (player our {X}) (pass (rec (pt -36 34) (pt 0 20))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="9"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="10"> *n:Player -> ({ ( player our { X } ) }) </node>
<node id="11"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -36 }) </node>
<node id="15"> *n:Num -> ({ 34 }) </node>
<node id="16"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="17"> *n:Num -> ({ 0 }) </node>
<node id="18"> *n:Num -> ({ 20 }) </node>
</mrl-parse>
</example>

<example id="462">
<nl lang="en">
If the ball is in the left quarter of the area near opponent 's goal line then all players except 1 should pass to the left side of the opponent 's penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ left) (NN quarter)) (PP (IN of) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))))) (ADVP (RB then)) (NP (NP (DT all) (NNS players)) (PP (IN except) (NP (CD 1)))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] left-[Region:3] quarter-[Region:3] of-[Region:3] the-[Region:4] area-[Region:4] near-[Region:4] opponent-[Team:5] 's-[Team:5] goal-[Region:4] line-[Region:4] then-[Rule:1] all-[Player:7] players-[Player:7] except-[Player:7] 1-[Unum:8] should-[Directive:6] pass-[Action:9] to-[Action:9] the-[Region:10] left-[Region:10] side-[Region:10] of-[Region:10] the-[Team:12] opponent-[Team:12] 's-[Team:12] penalty-[Region:11] area-[Region:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b17 direc ((bpos (left-quarter (near-goal-line opp))) (do (player-except our {1}) (pass (left (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ opp }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="463">
<nl lang="en">
If the ball is 37 to 41 meters from the opponent 's goal line , then player 3 should go to -LRB- 10 , -21 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 37) (TO to) (CD 41)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD -21)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 37-[Num:5] to-[Region:3] 41-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] then-[Rule:1] player-[Player:8] 3-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] 10-[Num:13] ,-[Point:12] -21-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3d direc ((bpos (from-goal-line opp 37 41)) (do (player our {3}) (pos (pt 10 -21)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 37 }) </node>
<node id="6"> *n:Num -> ({ 41 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Num -> ({ -21 }) </node>
</mrl-parse>
</example>

<example id="465">
<nl lang="en">
If the ball is in our half then player 10 should position itself at 37 meters from our goal with a ball attraction of -LRB- 0.5 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (NP (NN player) (CD 10)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (NP (NP (CD 37) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal)))) (PP (IN with) (NP (NP (DT a) (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.5)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] player-[Player:6] 10-[Unum:7] should-[Directive:5] position-[Action:8] itself-[Action:8] at-[Action:8] 37-[Num:13] meters-[Point:11] from-[Point:11] our-[Team:12] goal-[Point:11] with-[Point:10] a-[Point:10] ball-[Point:10] attraction-[Point:10] of-[Point:10] -LRB--[Point:14] 0.5-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15009 direc ((bpos (half our)) (do (player our {10}) (pos (pt-with-ball-attraction (from-goal our 37) (pt 0.5 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 10 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( from-goal *n:Team *n:Num ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
<node id="13"> *n:Num -> ({ 37 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.5 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="466">
<nl lang="en">
If our player 6 has the ball then he should take a shot on goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP$ our) (NN player) (CD 6)) (VP (VBZ has) (NP (DT the) (NN ball))))) (ADVP (RB then)) (NP (PRP he)) (VP (MD should) (VP (VB take) (NP (NP (DT a) (NN shot)) (PP (IN on) (NP (NN goal)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] our-[Player:3] player-[Player:3] 6-[Unum:4] has-[Condition:2] the-[Condition:2] ball-[Condition:2] then-[Rule:1] he-[Player:6] should-[Directive:5] take-[Action:7] a-[Action:7] shot-[Action:7] on-[Action:7] goal-[Action:7])
</augsyn>
<mrl lang="robocup-clang">
(definerule angeziw6 direc((bowner (player our {6})) (do (player our {6}) (shoot))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="3"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="4"> *n:Unum -> ({ 6 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ *^:Player }) </node>
<node id="7"> *n:Action -> ({ ( shoot ) }) </node>
</mrl-parse>
</example>

<example id="467">
<nl lang="en">
If it is before kick - off then the goalie should make its home position directly in front of our goal
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (PRP it)) (VP (VBZ is) (PP (IN before) (NP (NN kick) (: -) (NN off)))))) (ADVP (RB then)) (NP (DT the) (NN goalie)) (VP (MD should) (VP (VB make) (NP (PRP$ its) (NN home) (NN position)) (ADVP (RB directly)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:2] is-[Condition:2] before-[Condition:2] kick-[Condition:2] --[Condition:2] off-[Condition:2] then-[Rule:1] the-[Player:7] goalie-[Player:7] should-[Directive:6] make-[Action:9] its-[Action:9] home-[Action:9] position-[Action:9] directly-[Point:11] in-[Point:11] front-[Point:11] of-[Point:11] our-[Team:12] goal-[Point:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule Formation_BK_1 direc ((or (playm bko) (playm ag_our) (playm ag_opp)) (do (player our {1}) (home (front-of-goal our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm bko ) }) </node>
<node id="4"> *n:Condition -> ({ ( playm ag_our ) }) </node>
<node id="5"> *n:Condition -> ({ ( playm ag_opp ) }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( home *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ *n:Point }) </node>
<node id="11"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="468">
<nl lang="en">
If the ball is in the left quarter of the midfield then player 4 should intercept it
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ left) (NN quarter)) (PP (IN of) (NP (DT the) (NN midfield)))))))) (ADVP (RB then)) (NP (NN player) (CD 4)) (VP (MD should) (VP (VB intercept) (NP (PRP it)))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] the-[Region:3] left-[Region:3] quarter-[Region:3] of-[Region:3] the-[Region:4] midfield-[Region:4] then-[Rule:1] player-[Player:6] 4-[Unum:7] should-[Directive:5] intercept-[Action:8] it-[Action:8])
</augsyn>
<mrl lang="robocup-clang">
(definerule utwe4int direc ((bpos (left-quarter (midfield))) (do (player our {4}) (intercept))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( midfield ) }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 4 }) </node>
<node id="8"> *n:Action -> ({ ( intercept ) }) </node>
</mrl-parse>
</example>

<example id="470">
<nl lang="en">
Let DR2C6 be the condition where the ball is in D2R2 and our player 5 is in our left midfield and no opponents are within 1.5 m of him
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP DR2C6)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP D2R2))))) (CC and) (S (NP (PRP$ our) (NN player) (CD 5)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (JJ left) (NN midfield))))) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 1.5) (NN m)) (PP (IN of) (NP (PRP him))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] DR2C6-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] D2R2-[Ident:5] and-[Condition:2] our-[Player:7] player-[Player:7] 5-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:11] left-[Region:9] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponents-[Condition:12] are-[Condition:12] within-[Region:13] 1.5-[Num:16] m-[Region:13] of-[Region:13] him-[Player:15])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR2C6" (and (bpos "D2R2") (ppos-any (player our {5}) (left (midfield our))) (ppos-none opp (circle (pt (player our {5})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR2C6 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R2 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 5 }) </node>
<node id="9"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ *^:Player }) </node>
<node id="16"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="473">
<nl lang="en">
If the ball is in RP17 then players 2 - 11 should pass to someone in opponent 's left penalty area
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP RP17)))))) (ADVP (RB then)) (NP (NP (NNS players)) (NP (CD 2)) (: -) (NP (CD 11))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NP (NN someone)) (PP (IN in) (NP (NP (NN opponent) (POS 's)) (JJ left) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] RP17-[Ident:4] then-[Rule:1] players-[Player:6] 2-[Unum:7] --[Player:6] 11-[Unum:8] should-[Directive:5] pass-[Action:9] to-[Action:9] someone-[Action:9] in-[Action:9] opponent-[Region:10] 's-[Region:10] left-[Region:10] penalty-[Region:10] area-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definerule b24 direc ((bpos "RP17") (do (player-range our 2 11) (pass (right (penalty-area opp))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="4"> *n:Ident -> ({ RP17 }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player-range our *n:Unum *n:Unum ) }) </node>
<node id="7"> *n:Unum -> ({ 2 }) </node>
<node id="8"> *n:Unum -> ({ 11 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="12"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="476">
<nl lang="en">
If DR4C10 is true then players 10 , 3 , 4 and 5 should pass to player 9
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (NNP DR4C10)) (VP (VBZ is) (ADJP (JJ true))))) (ADVP (RB then)) (NP (NNS players) (QP (CD 10) (, ,) (CD 3) (, ,) (CD 4) (CC and) (CD 5))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NN player) (CD 9))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] DR4C10-[Ident:3] is-[Rule:1] true-[Rule:1] then-[Rule:1] players-[Player:5] 10-[Unum:6] ,-[Player:5] 3-[Unum:7] ,-[Player:5] 4-[Unum:8] and-[Player:5] 5-[Unum:9] should-[Directive:4] pass-[Action:10] to-[Action:10] player-[Player:11] 9-[Unum:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule DFR4Pass10 direc ("DR4C10" (do (player our {10 3 4 5}) (pass (player our {9})))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ " *n:Ident " }) </node>
<node id="3"> *n:Ident -> ({ DR4C10 }) </node>
<node id="4"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="5"> *n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) </node>
<node id="6"> *n:Unum -> ({ 10 }) </node>
<node id="7"> *n:Unum -> ({ 3 }) </node>
<node id="8"> *n:Unum -> ({ 4 }) </node>
<node id="9"> *n:Unum -> ({ 5 }) </node>
<node id="10"> *n:Action -> ({ ( pass *n:Player ) }) </node>
<node id="11"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="12"> *n:Unum -> ({ 9 }) </node>
</mrl-parse>
</example>

<example id="479">
<nl lang="en">
If the ball is on the right side within 32 m from our goal line then player 6 should go to -LRB- -38 , 14 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (DT the) (JJ right) (NN side))) (PP (IN within) (NP (NP (CD 32) (NN m)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (NN player) (CD 6)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD -38)) (, ,) (NP (CD 14)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] on-[Condition:2] the-[Region:3] right-[Region:3] side-[Region:3] within-[Region:4] 32-[Num:7] m-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] then-[Rule:1] player-[Player:9] 6-[Unum:10] should-[Directive:8] go-[Action:11] to-[Action:11] -LRB--[Point:13] -38-[Num:14] ,-[Point:13] 14-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player6a direc ((bpos (right (from-goal-line our 0 32))) (do (player our {6}) (pos (pt -38 14)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 0 }) </node>
<node id="7"> *n:Num -> ({ 32 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 6 }) </node>
<node id="11"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -38 }) </node>
<node id="15"> *n:Num -> ({ 14 }) </node>
</mrl-parse>
</example>

<example id="480">
<nl lang="en">
Call DR3C9 as the condition that the ball is in D2R3 and our player 9 is in our right midfield and no opponents are within 1.5 m of our player 9
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP DR3C9)) (PP (IN as) (NP (NP (DT the) (NN condition)) (SBAR (IN that) (S (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP D2R3))))) (CC and) (S (NP (PRP$ our) (NN player) (CD 9)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (JJ right) (NN midfield))))) (CC and) (S (NP (DT no) (NNS opponents)) (VP (VBP are) (PP (IN within) (NP (NP (CD 1.5) (NN m)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 9)))))))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] DR3C9-[Ident:1] as-[Statement:0] the-[Statement:0] condition-[Statement:0] that-[Statement:0] the-[Condition:3] ball-[Condition:3] is-[Condition:3] in-[Condition:3] D2R3-[Ident:5] and-[Condition:2] our-[Player:7] player-[Player:7] 9-[Unum:8] is-[Condition:6] in-[Condition:6] our-[Team:11] right-[Region:9] midfield-[Region:10] and-[Condition:2] no-[Condition:12] opponents-[Condition:12] are-[Condition:12] within-[Region:13] 1.5-[Num:17] m-[Region:13] of-[Region:13] our-[Player:15] player-[Player:15] 9-[Unum:16])
</augsyn>
<mrl lang="robocup-clang">
(definec "DR3C9" (and (bpos "D2R3") (ppos-any (player our {9}) (right (midfield our))) (ppos-none opp (circle (pt (player our {9})) 1.50))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ DR3C9 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="5"> *n:Ident -> ({ D2R3 }) </node>
<node id="6"> *n:Condition -> ({ ( ppos-any *n:Player *n:Region ) }) </node>
<node id="7"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 9 }) </node>
<node id="9"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
<node id="12"> *n:Condition -> ({ ( ppos-none opp *n:Region ) }) </node>
<node id="13"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="15"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="16"> *n:Unum -> ({ 9 }) </node>
<node id="17"> *n:Num -> ({ 1.50 }) </node>
</mrl-parse>
</example>

<example id="481">
<nl lang="en">
Let Pass_7 be the condition where our player 7 owns the ball when the ball is in our half but not near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_7)) (VP (VB be) (NP (NP (DT the) (NN condition)) (SBAR (WHADVP (WRB where)) (S (NP (PRP$ our) (NN player) (CD 7)) (VP (VBZ owns) (NP (DT the) (NN ball))) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (PP (IN in) (NP (PRP$ our) (NN half))) (CC but) (PP (RB not) (IN near) (NP (PRP$ our) (NN goal) (NN line))))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_7-[Ident:1] be-[Statement:0] the-[Statement:0] condition-[Statement:0] where-[Statement:0] our-[Player:4] player-[Player:4] 7-[Unum:5] owns-[Condition:3] the-[Condition:3] ball-[Condition:3] when-[Condition:2] the-[Condition:6] ball-[Condition:6] is-[Condition:6] in-[Condition:6] our-[Team:9] half-[Region:8] but-[Region:7] not-[Region:7] near-[Region:10] our-[Team:11] goal-[Region:10] line-[Region:10])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_7"    (and (bowner (player our {7})) (bpos (reg-exclude (half our) (near-goal-line our)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_7 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 7 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="8"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="9"> *n:Team -> ({ our }) </node>
<node id="10"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="11"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="483">
<nl lang="en">
If the ball is in left quarter of our midfield then everyone but the goalie should pass to RP16
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NP (JJ left) (NN quarter)) (PP (IN of) (NP (PRP$ our) (NNS midfield)))))))) (ADVP (RB then)) (NP (NN everyone) (PP (IN but) (NP (DT the) (NN goalie)))) (VP (MD should) (VP (VB pass) (PP (TO to) (NP (NNP RP16))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] left-[Region:3] quarter-[Region:3] of-[Region:3] our-[Team:5] midfield-[Region:4] then-[Rule:1] everyone-[Player:7] but-[Player:7] the-[Unum:8] goalie-[Unum:8] should-[Directive:6] pass-[Action:9] to-[Action:9] RP16-[Ident:11])
</augsyn>
<mrl lang="robocup-clang">
(definerule b21 direc ((bpos (left-quarter (midfield our))) (do (player-except our {1}) (pass "RP16"))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="7"> *n:Player -> ({ ( player-except our { *n:Unum } ) }) </node>
<node id="8"> *n:Unum -> ({ 1 }) </node>
<node id="9"> *n:Action -> ({ ( pass *n:Region ) }) </node>
<node id="10"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="11"> *n:Ident -> ({ RP16 }) </node>
</mrl-parse>
</example>

<example id="484">
<nl lang="en">
If the ball is 37 to 42 meters from the opponent 's goal line , then player 3 should go to -LRB- 10 , -23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 37) (TO to) (CD 42)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD -23)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 37-[Num:5] to-[Region:3] 42-[Num:6] meters-[Region:3] from-[Region:3] the-[Team:4] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] then-[Rule:1] player-[Player:8] 3-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] 10-[Num:13] ,-[Point:12] -23-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3d direc ((bpos (from-goal-line opp 37 42)) (do (player our {3}) (pos (pt 10 -23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 37 }) </node>
<node id="6"> *n:Num -> ({ 42 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ 10 }) </node>
<node id="14"> *n:Num -> ({ -23 }) </node>
</mrl-parse>
</example>

<example id="487">
<nl lang="en">
If the ball is 28 to 32 meters from our goal line , then player 2 should go to -LRB- -25 , 0 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (NP (QP (CD 28) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 2)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD -25)) (, ,) (NP (CD 0)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] 28-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] ,-[Rule:1] then-[Rule:1] player-[Player:8] 2-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] -25-[Num:13] ,-[Point:12] 0-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2b direc ((bpos (from-goal-line our 28 32)) (do (player our {2}) (pos (pt -25 0)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 28 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 2 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -25 }) </node>
<node id="14"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="488">
<nl lang="en">
Let Pass_11 be true if our player 11 has the ball and it is in Pass_region_11
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Pass_11)) (VP (VB be) (ADJP (JJ true))))) (SBAR (IN if) (S (S (NP (PRP$ our) (NN player) (CD 11)) (VP (VBZ has) (NP (DT the) (NN ball)))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (PP (IN in) (NP (NNP Pass_region_11))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Pass_11-[Ident:1] be-[Statement:0] true-[Statement:0] if-[Statement:0] our-[Player:4] player-[Player:4] 11-[Unum:5] has-[Condition:3] the-[Condition:3] ball-[Condition:3] and-[Condition:2] it-[Condition:6] is-[Condition:6] in-[Condition:6] Pass_region_11-[Ident:8])
</augsyn>
<mrl lang="robocup-clang">
(definec   "Pass_11"   (and (bowner (player our {11})) (bpos "Pass_region_11")))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_11 }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( bowner *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 11 }) </node>
<node id="6"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="7"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="8"> *n:Ident -> ({ Pass_region_11 }) </node>
</mrl-parse>
</example>

<example id="489">
<nl lang="en">
If it is play on mode and the ball is in O4R2 then player 11 should dribble to the point 5 m in front of the ball
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (S (NP (PRP it)) (VP (VBZ is) (NP (NN play) (NN on) (NN mode)))) (CC and) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (NNP O4R2))))))) (ADVP (RB then)) (NP (NN player) (CD 11)) (VP (MD should) (VP (VB dribble) (PP (TO to) (NP (NP (DT the) (NN point)) (NP (NP (CD 5) (NN m)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (DT the) (NN ball)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] it-[Condition:3] is-[Condition:3] play-[Condition:3] on-[Condition:3] mode-[Condition:3] and-[Condition:2] the-[Condition:4] ball-[Condition:4] is-[Condition:4] in-[Condition:4] O4R2-[Ident:6] then-[Rule:1] player-[Player:8] 11-[Unum:9] should-[Directive:7] dribble-[Action:10] to-[Action:10] the-[Point:12] point-[Point:12] 5-[Num:15] m-[Point:12] in-[Point:12] front-[Point:12] of-[Point:12] the-[Point:13] ball-[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule O4R2GF11 direc ((and (playm play_on) (bpos "O4R2")) (do (player our {11}) (dribble ((pt ball) + (pt 5.00 0.00))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( and *n:Condition *n:Condition ) }) </node>
<node id="3"> *n:Condition -> ({ ( playm play_on ) }) </node>
<node id="4"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="5"> *n:Region -> ({ " *n:Ident " }) </node>
<node id="6"> *n:Ident -> ({ O4R2 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 11 }) </node>
<node id="10"> *n:Action -> ({ ( dribble *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( *n:Point + *n:Point ) }) </node>
<node id="13"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 5.00 }) </node>
<node id="16"> *n:Num -> ({ 0.00 }) </node>
</mrl-parse>
</example>

<example id="490">
<nl lang="en">
If the ball is on the right side , 47 to 52 meters from our goal line , then player 2 should go to -LRB- -5 , 0 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN on) (NP (NP (DT the) (JJ right) (NN side)) (, ,) (NP (NP (QP (CD 47) (TO to) (CD 52)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line))))))))) (, ,) (ADVP (RB then)) (NP (NN player) (CD 2)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] on-[Condition:2] the-[Region:3] right-[Region:3] side-[Region:3] ,-[Region:3] 47-[Num:6] to-[Region:4] 52-[Num:7] meters-[Region:4] from-[Region:4] our-[Team:5] goal-[Region:4] line-[Region:4] ,-[Rule:1] then-[Rule:1] player-[Player:9] 2-[Unum:10] should-[Directive:8] go-[Action:11] to-[Action:11] -LRB--[Point:13] -5-[Num:14] ,-[Point:13] 0-[Num:15] -RRB--[Point:13])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player2f direc ((bpos (right (from-goal-line our 47 52))) (do (player our {2}) (pos (pt -5 0)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="5"> *n:Team -> ({ our }) </node>
<node id="6"> *n:Num -> ({ 47 }) </node>
<node id="7"> *n:Num -> ({ 52 }) </node>
<node id="8"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="9"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="10"> *n:Unum -> ({ 2 }) </node>
<node id="11"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="12"> *n:Region -> ({ *n:Point }) </node>
<node id="13"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="14"> *n:Num -> ({ -5 }) </node>
<node id="15"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="491">
<nl lang="en">
If the ball is in our half then player 11 should position itself at -LRB- 15 , -12 -RRB- with a ball attraction of -LRB- 0.55 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN in) (NP (PRP$ our) (NN half)))))) (ADVP (RB then)) (NP (NN player) (CD 11)) (VP (MD should) (VP (VB position) (NP (PRP itself)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 15)) (, ,) (NP (CD -12)) (-RRB- -RRB-))) (PP (IN with) (NP (NP (DT a) (NN ball) (NN attraction)) (PP (IN of) (NP (PRN (-LRB- -LRB-) (NP (CD 0.55)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] in-[Condition:2] our-[Team:4] half-[Region:3] then-[Rule:1] player-[Player:6] 11-[Unum:7] should-[Directive:5] position-[Action:8] itself-[Action:8] at-[Action:8] -LRB--[Point:11] 15-[Num:12] ,-[Point:11] -12-[Num:13] -RRB--[Point:11] with-[Point:10] a-[Point:10] ball-[Point:10] attraction-[Point:10] of-[Point:10] -LRB--[Point:14] 0.55-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15010 direc ((bpos (half our)) (do (player our {11}) (pos (pt-with-ball-attraction (pt 15 -12) (pt 0.55 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 11 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 15 }) </node>
<node id="13"> *n:Num -> ({ -12 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.55 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="496">
<nl lang="en">
If the ball is our half , then position player 6 at -LRB- 0 , -10 -RRB- with ball attraction -LRB- 0.75 , 0.4 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (NP (PRP$ our) (NN half))))) (, ,) (ADVP (RB then)) (VP (VB position) (NP (NN player) (CD 6)) (PP (IN at) (NP (NP (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD -10)) (-RRB- -RRB-))) (PP (IN with) (NP (NN ball) (NN attraction) (PRN (-LRB- -LRB-) (NP (CD 0.75)) (, ,) (NP (CD 0.4)) (-RRB- -RRB-))))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] our-[Team:4] half-[Region:3] ,-[Rule:1] then-[Rule:1] position-[Action:8] player-[Player:6] 6-[Unum:7] at-[Action:8] -LRB--[Point:11] 0-[Num:12] ,-[Point:11] -10-[Num:13] -RRB--[Point:11] with-[Point:10] ball-[Point:10] attraction-[Point:10] -LRB--[Point:14] 0.75-[Num:15] ,-[Point:14] 0.4-[Num:16] -RRB--[Point:14])
</augsyn>
<mrl lang="robocup-clang">
(definerule b15005 direc ((bpos (half our)) (do (player our {6}) (pos (pt-with-ball-attraction (pt 0 -10) (pt 0.75 0.4))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="6"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="7"> *n:Unum -> ({ 6 }) </node>
<node id="8"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="9"> *n:Region -> ({ *n:Point }) </node>
<node id="10"> *n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 0 }) </node>
<node id="13"> *n:Num -> ({ -10 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 0.75 }) </node>
<node id="16"> *n:Num -> ({ 0.4 }) </node>
</mrl-parse>
</example>

<example id="498">
<nl lang="en">
If the ball is within 42 meters from our goal line then player 3 should go to -LRB- -5 , -23 -RRB-
</nl>
<syn lang="en">
(S (SBAR (IN If) (S (NP (DT the) (NN ball)) (VP (VBZ is) (PP (IN within) (NP (NP (CD 42) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))) (ADVP (RB then)) (NP (NN player) (CD 3)) (VP (MD should) (VP (VB go) (PP (TO to) (NP (PRN (-LRB- -LRB-) (NP (CD -5)) (, ,) (NP (CD -23)) (-RRB- -RRB-)))))))
</syn>
<augsyn lang="en">
(S If-[Rule:1] the-[Condition:2] ball-[Condition:2] is-[Condition:2] within-[Region:3] 42-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3] then-[Rule:1] player-[Player:8] 3-[Unum:9] should-[Directive:7] go-[Action:10] to-[Action:10] -LRB--[Point:12] -5-[Num:13] ,-[Point:12] -23-[Num:14] -RRB--[Point:12])
</augsyn>
<mrl lang="robocup-clang">
(definerule Player3 direc ((bpos (from-goal-line our 0 42)) (do (player our {3}) (pos (pt -5 -23)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ *n:Rule }) </node>
<node id="1"> *n:Rule -> ({ ( *n:Condition *n:Directive ) }) </node>
<node id="2"> *n:Condition -> ({ ( bpos *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Num -> ({ 42 }) </node>
<node id="7"> *n:Directive -> ({ ( do *n:Player *n:Action ) }) </node>
<node id="8"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="9"> *n:Unum -> ({ 3 }) </node>
<node id="10"> *n:Action -> ({ ( pos *n:Region ) }) </node>
<node id="11"> *n:Region -> ({ *n:Point }) </node>
<node id="12"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="13"> *n:Num -> ({ -5 }) </node>
<node id="14"> *n:Num -> ({ -23 }) </node>
</mrl-parse>
</example>

<example id="500">
<nl lang="en">
Call the midfield to be MDR6
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (DT the) (NN midfield)) (VP (TO to) (VP (VB be) (NP (NNP MDR6)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] midfield-[Region:2] to-[Statement:0] be-[Statement:0] MDR6-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR6" (midfield))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR6 }) </node>
<node id="2"> *n:Region -> ({ ( midfield ) }) </node>
</mrl-parse>
</example>

<example id="501">
<nl lang="en">
Call left quarter of opponent 's midfield as DangrouseReg14
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NP (JJ left) (NN quarter)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN midfield)))) (PP (IN as) (NNP DangrouseReg14))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] left-[Region:2] quarter-[Region:2] of-[Region:2] opponent-[Team:4] 's-[Team:4] midfield-[Region:3] as-[Statement:0] DangrouseReg14-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "DangrouseReg14" (left-quarter (midfield opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ DangrouseReg14 }) </node>
<node id="2"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="502">
<nl lang="en">
Let D2R5 be the right side of the field , 16 to 32 meters from our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP D2R5)) (VP (VB be) (NP (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (DT the) (NN field)))) (, ,) (NP (NP (QP (CD 16) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] D2R5-[Ident:1] be-[Statement:0] the-[Region:2] right-[Region:2] side-[Region:2] of-[Region:2] the-[Region:3] field-[Region:3] ,-[Region:3] 16-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "D2R5" (right (from-goal-line our 16 32)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ D2R5 }) </node>
<node id="2"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 16 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
</mrl-parse>
</example>

<example id="503">
<nl lang="en">
Let RegOppMid be the rectangle -LSB- -LRB- 5 , -18 -RRB- , -LRB- 30 , 18 -RRB- -RSB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RegOppMid)) (VP (VB be) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 5)) (, ,) (NP (CD -18)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 30)) (, ,) (NP (CD 18)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RegOppMid-[Ident:1] be-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] 5-[Num:4] ,-[Point:3] -18-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 30-[Num:7] ,-[Point:6] 18-[Num:8] -RRB--[Point:6] -RSB--[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "RegOppMid" (rec (pt 5 -18) (pt 30 18)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RegOppMid }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 5 }) </node>
<node id="5"> *n:Num -> ({ -18 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 30 }) </node>
<node id="8"> *n:Num -> ({ 18 }) </node>
</mrl-parse>
</example>

<example id="504">
<nl lang="en">
Call the circle of radius 3 meters from -LRB- 46 , 30 -RRB- as FarReg2
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (NN radius) (CD 3) (NNS meters)) (PP (IN from) (NP (PRN (-LRB- -LRB-) (NP (CD 46)) (, ,) (NP (CD 30)) (-RRB- -RRB-))))))) (PP (IN as) (NNP FarReg2)))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] radius-[Region:2] 3-[Num:6] meters-[Region:2] from-[Region:2] -LRB--[Point:3] 46-[Num:4] ,-[Point:3] 30-[Num:5] -RRB--[Point:3] as-[Statement:0] FarReg2-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "FarReg2" (circle (pt 46 30) 3))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ FarReg2 }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 46 }) </node>
<node id="5"> *n:Num -> ({ 30 }) </node>
<node id="6"> *n:Num -> ({ 3 }) </node>
</mrl-parse>
</example>

<example id="505">
<nl lang="en">
Call the right side of the opponent 's penalty area to be RP12
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area)))) (VP (TO to) (VP (VB be) (NP (NNP RP12)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] right-[Region:2] side-[Region:2] of-[Region:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] penalty-[Region:3] area-[Region:3] to-[Statement:0] be-[Statement:0] RP12-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP12" (right (penalty-area opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP12 }) </node>
<node id="2"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="506">
<nl lang="en">
Call the rectangle -LSB- -LRB- 17.5 , 0 -RRB- , -LRB- 35 , 17 -RRB- -RSB- to be RP11
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-))) (VP (TO to) (VP (VB be) (NP (NNP RP11)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] 17.5-[Num:4] ,-[Point:3] 0-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 35-[Num:7] ,-[Point:6] 17-[Num:8] -RRB--[Point:6] -RSB--[Region:2] to-[Statement:0] be-[Statement:0] RP11-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP11" (rec (pt 17.5 0) (pt 35 17)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP11 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 17.5 }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 35 }) </node>
<node id="8"> *n:Num -> ({ 17 }) </node>
</mrl-parse>
</example>

<example id="507">
<nl lang="en">
Let opponent 's penalty area be called Shoot_region
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN area)) (VP (VB be) (VP (VBN called) (NP (NNP Shoot_region)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] opponent-[Team:3] 's-[Team:3] penalty-[Region:2] area-[Region:2] be-[Statement:0] called-[Statement:0] Shoot_region-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Shoot_region" (penalty-area opp) )
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Shoot_region }) </node>
<node id="2"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="508">
<nl lang="en">
Call the far right corner to be DangrouseReg12
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (DT the) (ADJP (RB far) (JJ right)) (NN corner)) (VP (TO to) (VP (VB be) (NP (NNP DangrouseReg12)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:3] far-[Team:4] right-[Region:2] corner-[Region:3] to-[Statement:0] be-[Statement:0] DangrouseReg12-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "DangrouseReg12" (right-quarter (near-goal-line opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ DangrouseReg12 }) </node>
<node id="2"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="509">
<nl lang="en">
Define RP18 to be the left side of opponent 's penalty box
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP RP18)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN penalty) (NN box)))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] RP18-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] opponent-[Team:4] 's-[Team:4] penalty-[Region:3] box-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP18" (left (penalty-area opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP18 }) </node>
<node id="2"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="510">
<nl lang="en">
Define Pass_region_3 as our midfield
</nl>
<syn lang="en">
(S (VP (VB Define) (NP (NNP Pass_region_3)) (PP (IN as) (NP (PRP$ our) (NN midfield)))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] Pass_region_3-[Ident:1] as-[Statement:0] our-[Team:3] midfield-[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "Pass_region_3" (midfield our))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_region_3 }) </node>
<node id="2"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="511">
<nl lang="en">
Call the rectangle -LSB- -LRB- 32 , 18 -RRB- , -LRB- 52.5 , -34 -RRB- -RSB- or -LSB- -LRB- 48 , 9 -RRB- , -LRB- 52.5 , 18 -RRB- -RSB- to be Pass_region_10
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NN rectangle)) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 32)) (, ,) (NP (CD 18)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 52.5)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (-RRB- -RSB-)) (CC or) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 48)) (, ,) (NP (CD 9)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 52.5)) (, ,) (NP (CD 18)) (-RRB- -RRB-)) (-RRB- -RSB-)))) (VP (TO to) (VP (VB be) (NP (NNP Pass_region_10)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:3] rectangle-[Region:3] -LSB--[Region:3] -LRB--[Point:4] 32-[Num:5] ,-[Point:4] 18-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 52.5-[Num:8] ,-[Point:7] -34-[Num:9] -RRB--[Point:7] -RSB--[Region:3] or-[Region:2] -LSB--[Region:10] -LRB--[Point:11] 48-[Num:12] ,-[Point:11] 9-[Num:13] -RRB--[Point:11] ,-[Region:10] -LRB--[Point:14] 52.5-[Num:15] ,-[Point:14] 18-[Num:16] -RRB--[Point:14] -RSB--[Region:10] to-[Statement:0] be-[Statement:0] Pass_region_10-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Pass_region_10" (reg (rec (pt 32 18) (pt 52.5 -34)) (rec (pt 48 9) (pt 52.5 18))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_region_10 }) </node>
<node id="2"> *n:Region -> ({ ( reg *n:Region *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 32 }) </node>
<node id="6"> *n:Num -> ({ 18 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 52.5 }) </node>
<node id="9"> *n:Num -> ({ -34 }) </node>
<node id="10"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 48 }) </node>
<node id="13"> *n:Num -> ({ 9 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 52.5 }) </node>
<node id="16"> *n:Num -> ({ 18 }) </node>
</mrl-parse>
</example>

<example id="512">
<nl lang="en">
Call our penalty area MDR1
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (PRP$ our) (NN penalty) (NN area)) (NP (NNP MDR1))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] our-[Team:3] penalty-[Region:2] area-[Region:2] MDR1-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR1" (penalty-area our))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR1 }) </node>
<node id="2"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="513">
<nl lang="en">
Let the area in front of our goal be called BKHome_P1
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NP (DT the) (NN area)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (PRP$ our) (NN goal)))))) (VP (VB be) (VP (VBN called) (NP (NNP BKHome_P1)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] the-[Point:3] area-[Point:3] in-[Point:3] front-[Point:3] of-[Point:3] our-[Team:4] goal-[Point:3] be-[Statement:0] called-[Statement:0] BKHome_P1-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "BKHome_P1" (front-of-goal our))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ BKHome_P1 }) </node>
<node id="2"> *n:Region -> ({ *n:Point }) </node>
<node id="3"> *n:Point -> ({ ( front-of-goal *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="514">
<nl lang="en">
Let D2R4 be the left side of the field , 16 to 32 meters from our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP D2R4)) (VP (VB be) (NP (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (DT the) (NN field)))) (, ,) (NP (NP (QP (CD 16) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] D2R4-[Ident:1] be-[Statement:0] the-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] the-[Region:3] field-[Region:3] ,-[Region:3] 16-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "D2R4" (left (from-goal-line our 16 32)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ D2R4 }) </node>
<node id="2"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 16 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
</mrl-parse>
</example>

<example id="515">
<nl lang="en">
Let OppHalf be the opponent 's half
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP OppHalf)) (VP (VB be) (NP (NP (DT the) (NN opponent) (POS 's)) (NN half))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] OppHalf-[Ident:1] be-[Statement:0] the-[Team:3] opponent-[Team:3] 's-[Team:3] half-[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "OppHalf" (half opp))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ OppHalf }) </node>
<node id="2"> *n:Region -> ({ ( half *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="516">
<nl lang="en">
Call Pass_region_8 the field excluding our and opponent 's goal lines
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP Pass_region_8)) (NP (NP (DT the) (NN field)) (VP (VBG excluding) (NP (PRP$ our) (CC and) (NP (NN opponent) (POS 's)) (NN goal) (NNS lines))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] Pass_region_8-[Ident:1] the-[Region:4] field-[Region:4] excluding-[Region:2] our-[Team:6] and-[Region:2] opponent-[Team:8] 's-[Team:8] goal-[Region:7] lines-[Region:7])
</augsyn>
<mrl lang="robocup-clang">
(definer "Pass_region_8" (reg-exclude (reg-exclude (field) (near-goal-line our)) (near-goal-line opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_region_8 }) </node>
<node id="2"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( reg-exclude *n:Region *n:Region ) }) </node>
<node id="4"> *n:Region -> ({ ( field ) }) </node>
<node id="5"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="6"> *n:Team -> ({ our }) </node>
<node id="7"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="8"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="517">
<!-- This example is noisy. -->
<nl lang="en">
Let Player_11_arc be the circle of 6 meters radius from our player 6
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Player_11_arc)) (VP (VB be) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (CD 6) (NNS meters) (NN radius)) (PP (IN from) (NP (PRP$ our) (NN player) (CD 6))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Player_11_arc-[Ident:1] be-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] 6-[Num:6] meters-[Region:2] radius-[Region:2] from-[Region:2] our-[Player:4] player-[Player:4] 11-[Unum:5])
</augsyn>
<mrl lang="robocup-clang">
(definer "Player_11_arc" (circle (pt (player our {11})) 6))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Player_11_arc }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 11 }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="518">
<!-- "ArcofBall" is originally "Arcofball".  Changes were made to make it
easier to recognize "Arcofball" as a CLang identifier. -->
<nl lang="en">
Let ArcofBall be the area 0.7 m within the ball
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP ArcofBall)) (VP (VB be) (NP (NP (DT the) (NN area)) (NP (NP (CD 0.7) (NN m)) (PP (IN within) (NP (DT the) (NN ball)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] ArcofBall-[Ident:1] be-[Statement:0] the-[Region:2] area-[Region:2] 0.7-[Num:4] m-[Region:2] within-[Region:2] the-[Point:3] ball-[Point:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "ArcofBall" (circle (pt ball) 0.7))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ ArcofBall }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt ball ) }) </node>
<node id="4"> *n:Num -> ({ 0.7 }) </node>
</mrl-parse>
</example>

<example id="519">
<nl lang="en">
Define D2R3 as the right quarter of the area near our goal line
</nl>
<syn lang="en">
(S (VP (VB Define) (NP (NNP D2R3)) (PP (IN as) (NP (NP (DT the) (JJ right) (NN quarter)) (PP (IN of) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] D2R3-[Ident:1] as-[Statement:0] the-[Region:2] right-[Region:2] quarter-[Region:2] of-[Region:2] the-[Region:3] area-[Region:3] near-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "D2R3" (right-quarter (near-goal-line our)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ D2R3 }) </node>
<node id="2"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="520">
<nl lang="en">
Call the rectangles -LSB- -LRB- 5 , -34 -RRB- , -LRB- 32 , -34 -RRB- -RSB- or -LSB- -LRB- 32 , -34 -RRB- , -LRB- 45 , -20 -RRB- -RSB- to be Drible_region_11
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NNS rectangles)) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 5)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 32)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (-RRB- -RSB-)) (CC or) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 32)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 45)) (, ,) (NP (CD -20)) (-RRB- -RRB-)) (-RRB- -RSB-)))) (VP (TO to) (VP (VB be) (NP (NNP Drible_region_11)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangles-[Region:2] -LSB--[Region:3] -LRB--[Point:4] 5-[Num:5] ,-[Point:4] -34-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 32-[Num:8] ,-[Point:7] -34-[Num:9] -RRB--[Point:7] -RSB--[Region:3] or-[Region:2] -LSB--[Region:10] -LRB--[Point:11] 32-[Num:12] ,-[Point:11] -34-[Num:13] -RRB--[Point:11] ,-[Region:10] -LRB--[Point:14] 45-[Num:15] ,-[Point:14] -20-[Num:16] -RRB--[Point:14] -RSB--[Region:10] to-[Statement:0] be-[Statement:0] Drible_region_11-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Drible_region_11" (reg (rec (pt 5 -34) (pt 32 -34)) (rec (pt 32 -34) (pt 45 -20))) )
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Drible_region_11 }) </node>
<node id="2"> *n:Region -> ({ ( reg *n:Region *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 5 }) </node>
<node id="6"> *n:Num -> ({ -34 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 32 }) </node>
<node id="9"> *n:Num -> ({ -34 }) </node>
<node id="10"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 32 }) </node>
<node id="13"> *n:Num -> ({ -34 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 45 }) </node>
<node id="16"> *n:Num -> ({ -20 }) </node>
</mrl-parse>
</example>

<example id="521">
<nl lang="en">
Let O4R2 be the region 20 to 27 meters from opponent 's goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP O4R2)) (VP (VB be) (NP (NP (DT the) (NN region)) (NP (NP (QP (CD 20) (TO to) (CD 27)) (NNS meters)) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] O4R2-[Ident:1] be-[Statement:0] the-[Region:2] region-[Region:2] 20-[Num:4] to-[Region:2] 27-[Num:5] meters-[Region:2] from-[Region:2] opponent-[Team:3] 's-[Team:3] goal-[Region:2] line-[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "O4R2" (from-goal-line opp 20 27))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ O4R2 }) </node>
<node id="2"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="3"> *n:Team -> ({ opp }) </node>
<node id="4"> *n:Num -> ({ 20 }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="522">
<nl lang="en">
Call DangrouseReg5 as the left quarter of the area near opponent 's goal line
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NNP DangrouseReg5)) (PP (IN as) (NP (NP (DT the) (JJ left) (NN quarter)) (PP (IN of) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] DangrouseReg5-[Ident:1] as-[Statement:0] the-[Region:2] left-[Region:2] quarter-[Region:2] of-[Region:2] the-[Region:3] area-[Region:3] near-[Region:3] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "DangrouseReg5" (left-quarter (near-goal-line opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ DangrouseReg5 }) </node>
<node id="2"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="523">
<nl lang="en">
Let MDR4 be the left side of the field , 16 to 32 meters from our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP MDR4)) (VP (VB be) (NP (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (DT the) (NN field)))) (, ,) (NP (NP (QP (CD 16) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] MDR4-[Ident:1] be-[Statement:0] the-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] the-[Region:3] field-[Region:3] ,-[Region:3] 16-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR4" (left (from-goal-line our 16 32)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR4 }) </node>
<node id="2"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 16 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
</mrl-parse>
</example>

<example id="524">
<nl lang="en">
Call the area within 6 m of our player 10 to be Player_10_arc
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NN area)) (PP (IN within) (NP (NP (CD 6) (NN m)) (PP (IN of) (NP (PRP$ our) (NN player) (CD 10)))))) (VP (TO to) (VP (VB be) (NP (NNP Player_10_arc)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] area-[Region:2] within-[Region:2] 6-[Num:6] m-[Region:2] of-[Region:2] our-[Player:4] player-[Player:4] 10-[Unum:5] to-[Statement:0] be-[Statement:0] Player_10_arc-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Player_10_arc" (circle (pt (player our {10})) 6))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Player_10_arc }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 10 }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="525">
<nl lang="en">
Let our midfield be called Pass_region_7
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (PRP$ our) (NNS midfield)) (VP (VB be) (VP (VBN called) (NP (NNP Pass_region_7)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] our-[Team:3] midfield-[Region:2] be-[Statement:0] called-[Statement:0] Pass_region_7-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Pass_region_7" (midfield our))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_region_7 }) </node>
<node id="2"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="526">
<nl lang="en">
Call the rectangles -LSB- -LRB- 32 , 18 -RRB- , -LRB- 52.5 , -34 -RRB- -RSB- or -LSB- -LRB- 48 , 9 -RRB- , -LRB- 52.5 , 18 -RRB- -RSB- to be Pass_region_10
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NNS rectangles)) (NP (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 32)) (, ,) (NP (CD 18)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 52.5)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (-RRB- -RSB-)) (CC or) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 48)) (, ,) (NP (CD 9)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 52.5)) (, ,) (NP (CD 18)) (-RRB- -RRB-)) (-RRB- -RSB-)))) (VP (TO to) (VP (VB be) (NP (NNP Pass_region_10)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangles-[Region:2] -LSB--[Region:3] -LRB--[Point:4] 32-[Num:5] ,-[Point:4] 18-[Num:6] -RRB--[Point:4] ,-[Region:3] -LRB--[Point:7] 52.5-[Num:8] ,-[Point:7] -34-[Num:9] -RRB--[Point:7] -RSB--[Region:3] or-[Region:2] -LSB--[Region:10] -LRB--[Point:11] 48-[Num:12] ,-[Point:11] 9-[Num:13] -RRB--[Point:11] ,-[Region:10] -LRB--[Point:14] 52.5-[Num:15] ,-[Point:14] 18-[Num:16] -RRB--[Point:14] -RSB--[Region:10] to-[Statement:0] be-[Statement:0] Pass_region_10-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Pass_region_10" (reg (rec (pt 32 18) (pt 52.5 -34)) (rec (pt 48 9) (pt 52.5 18))))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_region_10 }) </node>
<node id="2"> *n:Region -> ({ ( reg *n:Region *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="4"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="5"> *n:Num -> ({ 32 }) </node>
<node id="6"> *n:Num -> ({ 18 }) </node>
<node id="7"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 52.5 }) </node>
<node id="9"> *n:Num -> ({ -34 }) </node>
<node id="10"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="11"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="12"> *n:Num -> ({ 48 }) </node>
<node id="13"> *n:Num -> ({ 9 }) </node>
<node id="14"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="15"> *n:Num -> ({ 52.5 }) </node>
<node id="16"> *n:Num -> ({ 18 }) </node>
</mrl-parse>
</example>

<example id="527">
<nl lang="en">
Let D2R4 be the left side of the field , 16 to 32 meters from our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP D2R4)) (VP (VB be) (NP (NP (NP (DT the) (JJ left) (NN side)) (PP (IN of) (NP (DT the) (NN field)))) (, ,) (NP (NP (QP (CD 16) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] D2R4-[Ident:1] be-[Statement:0] the-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] the-[Region:3] field-[Region:3] ,-[Region:3] 16-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "D2R4" (left (from-goal-line our 16 32)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ D2R4 }) </node>
<node id="2"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 16 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
</mrl-parse>
</example>

<example id="528">
<nl lang="en">
Call our midfield Pass_region_2
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (PRP$ our) (JJ midfield)) (NP (NNP Pass_region_2))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] our-[Team:3] midfield-[Region:2] Pass_region_2-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Pass_region_2" (midfield our))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Pass_region_2 }) </node>
<node id="2"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="529">
<nl lang="en">
Let RP12 be the right side of the opponent 's penalty area
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RP12)) (VP (VB be) (NP (NP (DT the) (JJ right) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN penalty) (NN area))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RP12-[Ident:1] be-[Statement:0] the-[Region:2] right-[Region:2] side-[Region:2] of-[Region:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] penalty-[Region:3] area-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP12" (right (penalty-area opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP12 }) </node>
<node id="2"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="530">
<nl lang="en">
Let Player_11_arc be the circle of 6 m radius around player 11
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Player_11_arc)) (VP (VB be) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (CD 6) (NN m) (NNS radius)) (PP (IN around) (NP (NN player) (CD 11))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Player_11_arc-[Ident:1] be-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] 6-[Num:6] m-[Region:2] radius-[Region:2] around-[Region:2] player-[Player:4] 11-[Unum:5])
</augsyn>
<mrl lang="robocup-clang">
(definer "Player_11_arc" (circle (pt (player our {11})) 6))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Player_11_arc }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 11 }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="531">
<nl lang="en">
Let RP1 be the right quarter portion of the area near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RP1)) (VP (VB be) (NP (NP (DT the) (JJ right) (NN quarter) (NN portion)) (PP (IN of) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RP1-[Ident:1] be-[Statement:0] the-[Region:2] right-[Region:2] quarter-[Region:2] portion-[Region:2] of-[Region:2] the-[Region:3] area-[Region:3] near-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP1" (right-quarter (near-goal-line our)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP1 }) </node>
<node id="2"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="532">
<nl lang="en">
Let Clear_Region be the area near our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Clear_Region)) (VP (VB be) (NP (NP (DT the) (NN area)) (PP (IN near) (NP (PRP$ our) (NN goal) (NN line))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Clear_Region-[Ident:1] be-[Statement:0] the-[Region:2] area-[Region:2] near-[Region:2] our-[Team:3] goal-[Region:2] line-[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "Clear_Region" (near-goal-line our))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Clear_Region }) </node>
<node id="2"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="533">
<nl lang="en">
Let RP8 be the rectangle -LSB- -LRB- -35 , 0 -RRB- , -LRB- -17.5 , 17 -RRB- -RSB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RP8)) (VP (VB be) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD -17.5)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RP8-[Ident:1] be-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] -35-[Num:4] ,-[Point:3] 0-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] -17.5-[Num:7] ,-[Point:6] 17-[Num:8] -RRB--[Point:6] -RSB--[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP8" (rec (pt -35 0) (pt -17.5 17)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP8 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ -35 }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ -17.5 }) </node>
<node id="8"> *n:Num -> ({ 17 }) </node>
</mrl-parse>
</example>

<example id="534">
<nl lang="en">
Call the rectangle -LSB- -LRB- -35 , 17 -RRB- , -LRB- -17.5 , 34 -RRB- -RSB- as RP2
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD -17.5)) (, ,) (NP (CD 34)) (-RRB- -RRB-)) (-RRB- -RSB-))) (PP (IN as) (NNP RP2))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] -35-[Num:4] ,-[Point:3] 17-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] -17.5-[Num:7] ,-[Point:6] 34-[Num:8] -RRB--[Point:6] -RSB--[Region:2] as-[Statement:0] RP2-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP2" (rec (pt -35 17) (pt -17.5 34)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP2 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ -35 }) </node>
<node id="5"> *n:Num -> ({ 17 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ -17.5 }) </node>
<node id="8"> *n:Num -> ({ 34 }) </node>
</mrl-parse>
</example>

<example id="535">
<nl lang="en">
Let Player_5_arc be the circle of 6 meters radius from our player 5
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Player_5_arc)) (VP (VB be) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (CD 6) (NNS meters) (NN radius)) (PP (IN from) (NP (PRP$ our) (NN player) (CD 5))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Player_5_arc-[Ident:1] be-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] 6-[Num:6] meters-[Region:2] radius-[Region:2] from-[Region:2] our-[Player:4] player-[Player:4] 5-[Unum:5])
</augsyn>
<mrl lang="robocup-clang">
(definer "Player_5_arc" (circle (pt (player our {5})) 6))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Player_5_arc }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 5 }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="536">
<nl lang="en">
Let DangrouseReg2 be the far left side of opponent 's midfield
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP DangrouseReg2)) (VP (VB be) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (NP (NN opponent) (POS 's)) (NN midfield))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] DangrouseReg2-[Ident:1] be-[Statement:0] the-[Region:2] far-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] opponent-[Team:4] 's-[Team:4] midfield-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "DangrouseReg2" (left-quarter (midfield opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ DangrouseReg2 }) </node>
<node id="2"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="537">
<nl lang="en">
Call the rectangle -LSB- -LRB- 10 , -34 -RRB- , -LRB- 36 , -20 -RRB- -RSB- as MDR7
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 10)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 36)) (, ,) (NP (CD -20)) (-RRB- -RRB-)) (-RRB- -RSB-))) (PP (IN as) (NNP MDR7))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] 10-[Num:4] ,-[Point:3] -34-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 36-[Num:7] ,-[Point:6] -20-[Num:8] -RRB--[Point:6] -RSB--[Region:2] as-[Statement:0] MDR7-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR7" (rec (pt 10.00 -34.00) (pt 36.00 -20.00)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR7 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 10.00 }) </node>
<node id="5"> *n:Num -> ({ -34.00 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 36.00 }) </node>
<node id="8"> *n:Num -> ({ -20.00 }) </node>
</mrl-parse>
</example>

<example id="538">
<nl lang="en">
Let MDR3 be the near right corner
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP MDR3)) (VP (VB be) (NP (DT the) (ADJP (RB near) (JJ right)) (NN corner))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] MDR3-[Ident:1] be-[Statement:0] the-[Region:3] near-[Team:4] right-[Region:2] corner-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR3" (right-quarter (near-goal-line our)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR3 }) </node>
<node id="2"> *n:Region -> ({ ( right-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="539">
<nl lang="en">
Call the rectangle -LSB- -LRB- 17.5 , 0 -RRB- , -LRB- 35 , 17 -RRB- -RSB- to be RP11
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (-RRB- -RSB-))) (VP (TO to) (VP (VB be) (NP (NNP RP11)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] 17.5-[Num:4] ,-[Point:3] 0-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 35-[Num:7] ,-[Point:6] 17-[Num:8] -RRB--[Point:6] -RSB--[Region:2] to-[Statement:0] be-[Statement:0] RP11-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP11" (rec (pt 17.5 0) (pt 35 17)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP11 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 17.5 }) </node>
<node id="5"> *n:Num -> ({ 0 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 35 }) </node>
<node id="8"> *n:Num -> ({ 17 }) </node>
</mrl-parse>
</example>

<example id="540">
<nl lang="en">
Define RP16 to be the rectangle -LSB- -LRB- 0 , -17 -RRB- , -LRB- 17.5 , 0 -RRB- -RSB-
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP RP16)) (VP (TO to) (VP (VB be) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] RP16-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] 0-[Num:4] ,-[Point:3] -17-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 17.5-[Num:7] ,-[Point:6] 0-[Num:8] -RRB--[Point:6] -RSB--[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP16" (rec (pt 0 -17) (pt 17.5 0)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP16 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 0 }) </node>
<node id="5"> *n:Num -> ({ -17 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 17.5 }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="541">
<nl lang="en">
Let FarReg5 be the circle of 3 meters radius from point -LRB- 38 , 5 -RRB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP FarReg5)) (VP (VB be) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (CD 3) (NNS meters) (NN radius)) (PP (IN from) (NP (NN point) (PRN (-LRB- -LRB-) (NP (CD 38)) (, ,) (NP (CD 5)) (-RRB- -RRB-)))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] FarReg5-[Ident:1] be-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] 3-[Num:6] meters-[Region:2] radius-[Region:2] from-[Region:2] point-[Point:3] -LRB--[Point:3] 38-[Num:4] ,-[Point:3] 5-[Num:5] -RRB--[Point:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "FarReg5" (circle (pt 38 5) 3))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ FarReg5 }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 38 }) </node>
<node id="5"> *n:Num -> ({ 5 }) </node>
<node id="6"> *n:Num -> ({ 3 }) </node>
</mrl-parse>
</example>

<example id="542">
<nl lang="en">
Let Player_9_arc be the area within 6 m of player 9
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP Player_9_arc)) (VP (VB be) (NP (DT the) (NN area)) (PP (IN within) (NP (NP (CD 6) (NN m)) (PP (IN of) (NP (NN player) (CD 9)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] Player_9_arc-[Ident:1] be-[Statement:0] the-[Region:2] area-[Region:2] within-[Region:2] 6-[Num:6] m-[Region:2] of-[Region:2] player-[Player:4] 9-[Unum:5])
</augsyn>
<mrl lang="robocup-clang">
(definer "Player_9_arc" (circle (pt (player our {9})) 6))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Player_9_arc }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 9 }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="543">
<nl lang="en">
Let RP15 stand for the rectangle -LSB- -LRB- -17.5 , -17 -RRB- , -LRB- 0 , 0 -RRB- -RSB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RP15)) (VP (VB stand) (PP (IN for) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -17.5)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 0)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RP15-[Ident:1] stand-[Statement:0] for-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] -17.5-[Num:4] ,-[Point:3] -17-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 0-[Num:7] ,-[Point:6] 0-[Num:8] -RRB--[Point:6] -RSB--[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP15" (rec (pt -17.5 -17) (pt 0 0)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP15 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ -17.5 }) </node>
<node id="5"> *n:Num -> ({ -17 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 0 }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="544">
<nl lang="en">
Let RP22 be the far left side of the opponent 's midfield
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RP22)) (VP (VB be) (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (NP (DT the) (NN opponent) (POS 's)) (NN midfield))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RP22-[Ident:1] be-[Statement:0] the-[Region:2] far-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] the-[Team:4] opponent-[Team:4] 's-[Team:4] midfield-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP22" (left-quarter (midfield opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP22 }) </node>
<node id="2"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="545">
<nl lang="en">
Call the rectangle -LSB- -LRB- 17.5 , 17 -RRB- , -LRB- 35 , 34 -RRB- -RSB- to be RP5
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD 17.5)) (, ,) (NP (CD 17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD 35)) (, ,) (NP (CD 34)) (-RRB- -RRB-)) (-RRB- -RSB-))) (VP (TO to) (VP (VB be) (NP (NNP RP5)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] 17.5-[Num:4] ,-[Point:3] 17-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] 35-[Num:7] ,-[Point:6] 34-[Num:8] -RRB--[Point:6] -RSB--[Region:2] to-[Statement:0] be-[Statement:0] RP5-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP5" (rec (pt 17.5 17) (pt 35 34)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP5 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 17.5 }) </node>
<node id="5"> *n:Num -> ({ 17 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ 35 }) </node>
<node id="8"> *n:Num -> ({ 34 }) </node>
</mrl-parse>
</example>

<example id="546">
<nl lang="en">
Define FarReg14 to be the circle of radius 3 around the point -LRB- 42 , 10 -RRB-
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP FarReg14)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (NN radius) (CD 3)) (PP (IN around) (NP (DT the) (NN point) (PRN (-LRB- -LRB-) (NP (CD 42)) (, ,) (NP (CD 10)) (-RRB- -RRB-))))))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] FarReg14-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] radius-[Region:2] 3-[Num:6] around-[Region:2] the-[Point:3] point-[Point:3] -LRB--[Point:3] 42-[Num:4] ,-[Point:3] 10-[Num:5] -RRB--[Point:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "FarReg14" (circle (pt 42 10) 3))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ FarReg14 }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 42 }) </node>
<node id="5"> *n:Num -> ({ 10 }) </node>
<node id="6"> *n:Num -> ({ 3 }) </node>
</mrl-parse>
</example>

<example id="547">
<nl lang="en">
Let O4R2 be the field , 20 to 27 meters from the opponent 's goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP O4R2)) (VP (VB be) (NP (NP (DT the) (NN field)) (, ,) (NP (NP (QP (CD 20) (TO to) (CD 27)) (NNS meters)) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] O4R2-[Ident:1] be-[Statement:0] the-[Region:2] field-[Region:2] ,-[Region:2] 20-[Num:4] to-[Region:2] 27-[Num:5] meters-[Region:2] from-[Region:2] the-[Team:3] opponent-[Team:3] 's-[Team:3] goal-[Region:2] line-[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "O4R2" (from-goal-line opp 20 27))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ O4R2 }) </node>
<node id="2"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="3"> *n:Team -> ({ opp }) </node>
<node id="4"> *n:Num -> ({ 20 }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="548">
<nl lang="en">
Let D2R2 be the region close to the near left corner
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP D2R2)) (VP (VB be) (NP (NP (DT the) (NN region)) (ADJP (RB close) (PP (TO to) (NP (DT the) (ADJP (RB near) (JJ left)) (NN corner)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] D2R2-[Ident:1] be-[Statement:0] the-[Region:3] region-[Region:3] close-[Region:3] to-[Region:3] the-[Region:3] near-[Team:4] left-[Region:2] corner-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "D2R2" (left-quarter (near-goal-line our)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ D2R2 }) </node>
<node id="2"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( near-goal-line *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
</mrl-parse>
</example>

<example id="549">
<nl lang="en">
Call the circle of radius 6 meters around our player 10 as Player_10_arc
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (NN radius) (CD 6) (NNS meters)) (PP (IN around) (NP (PRP$ our) (NN player) (CD 10)))))) (PP (IN as) (NNP Player_10_arc))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] radius-[Region:2] 6-[Num:6] meters-[Region:2] around-[Region:2] our-[Player:4] player-[Player:4] 10-[Unum:5] as-[Statement:0] Player_10_arc-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Player_10_arc" (circle (pt (player our {10})) 6))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Player_10_arc }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Player ) }) </node>
<node id="4"> *n:Player -> ({ ( player our { *n:Unum } ) }) </node>
<node id="5"> *n:Unum -> ({ 10 }) </node>
<node id="6"> *n:Num -> ({ 6 }) </node>
</mrl-parse>
</example>

<example id="550">
<nl lang="en">
Let MDR5 be the right side , 16 to 32 meters from our goal line
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP MDR5)) (VP (VB be) (NP (NP (DT the) (JJ right) (NN side)) (, ,) (NP (NP (QP (CD 16) (TO to) (CD 32)) (NNS meters)) (PP (IN from) (NP (PRP$ our) (NN goal) (NN line)))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] MDR5-[Ident:1] be-[Statement:0] the-[Region:2] right-[Region:2] side-[Region:2] ,-[Region:2] 16-[Num:5] to-[Region:3] 32-[Num:6] meters-[Region:3] from-[Region:3] our-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR5" (right (from-goal-line our 16 32)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR5 }) </node>
<node id="2"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ our }) </node>
<node id="5"> *n:Num -> ({ 16 }) </node>
<node id="6"> *n:Num -> ({ 32 }) </node>
</mrl-parse>
</example>

<example id="551">
<nl lang="en">
Define O4R3 to be the far left side of the field , 12 to 20 meters from opponent 's goal line
</nl>
<syn lang="en">
(S (VP (VB Define) (S (NP (NNP O4R3)) (VP (TO to) (VP (VB be) (NP (NP (NP (DT the) (ADJP (RB far) (JJ left)) (NN side)) (PP (IN of) (NP (DT the) (NN field)))) (, ,) (NP (NP (CD 12) (TO to) (CD 20) (NNS meters)) (PP (IN from) (NP (NP (NN opponent) (POS 's)) (NN goal) (NN line))))))))))
</syn>
<augsyn lang="en">
(S Define-[Statement:0] O4R3-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Region:2] far-[Region:2] left-[Region:2] side-[Region:2] of-[Region:2] the-[Region:3] field-[Region:3] ,-[Region:3] 12-[Num:5] to-[Region:3] 20-[Num:6] meters-[Region:3] from-[Region:3] opponent-[Team:4] 's-[Team:4] goal-[Region:3] line-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "O4R3" (left-quarter (from-goal-line opp 12 20)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ O4R3 }) </node>
<node id="2"> *n:Region -> ({ ( left-quarter *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
<node id="5"> *n:Num -> ({ 12 }) </node>
<node id="6"> *n:Num -> ({ 20 }) </node>
</mrl-parse>
</example>

<example id="552">
<nl lang="en">
Let us call the rectangle -LSB- -LRB- -36 , -34 -RRB- , -LRB- -20 , 0 -RRB- -RSB- as MDR4
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (PRP us)) (VP (VB call) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -36)) (, ,) (NP (CD -34)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD -20)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-))) (PP (IN as) (NP (NNP MDR4)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] us-[Statement:0] call-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] -36-[Num:4] ,-[Point:3] -34-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] -20-[Num:7] ,-[Point:6] 0-[Num:8] -RRB--[Point:6] -RSB--[Region:2] as-[Statement:0] MDR4-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "MDR4" (rec (pt -36.00 -34.00) (pt -20.00 0.00)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ MDR4 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ -36.00 }) </node>
<node id="5"> *n:Num -> ({ -34.00 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ -20.00 }) </node>
<node id="8"> *n:Num -> ({ 0.00 }) </node>
</mrl-parse>
</example>

<example id="553">
<nl lang="en">
Let RP14 be the rectangle -LSB- -LRB- -35 , -17 -RRB- , -LRB- -17.5 , 0 -RRB- -RSB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP RP14)) (VP (VB be) (NP (DT the) (NN rectangle) (PRN (-LRB- -LSB-) (PRN (-LRB- -LRB-) (NP (CD -35)) (, ,) (NP (CD -17)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (CD -17.5)) (, ,) (NP (CD 0)) (-RRB- -RRB-)) (-RRB- -RSB-)))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] RP14-[Ident:1] be-[Statement:0] the-[Region:2] rectangle-[Region:2] -LSB--[Region:2] -LRB--[Point:3] -35-[Num:4] ,-[Point:3] -17-[Num:5] -RRB--[Point:3] ,-[Region:2] -LRB--[Point:6] -17.5-[Num:7] ,-[Point:6] 0-[Num:8] -RRB--[Point:6] -RSB--[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP14" (rec (pt -35 -17) (pt -17.5 0)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP14 }) </node>
<node id="2"> *n:Region -> ({ ( rec *n:Point *n:Point ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ -35 }) </node>
<node id="5"> *n:Num -> ({ -17 }) </node>
<node id="6"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="7"> *n:Num -> ({ -17.5 }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="554">
<nl lang="en">
Let FarReg5 be the circle of 3 m radius centered at -LRB- 38 , 5 -RRB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP FarReg5)) (VP (VB be) (NP (NP (DT the) (NN circle)) (PP (IN of) (NP (NP (CD 3) (NN m) (NNS radius)) (VP (VBN centered) (PP (IN at) (NP (PRN (-LRB- -LRB-) (NP (CD 38)) (, ,) (NP (CD 5)) (-RRB- -RRB-))))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] FarReg5-[Ident:1] be-[Statement:0] the-[Region:2] circle-[Region:2] of-[Region:2] 3-[Num:6] m-[Region:2] radius-[Region:2] centered-[Region:2] at-[Region:2] -LRB--[Point:3] 38-[Num:4] ,-[Point:3] 5-[Num:5] -RRB--[Point:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "FarReg5" (circle (pt 38 5) 3))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ FarReg5 }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 38 }) </node>
<node id="5"> *n:Num -> ({ 5 }) </node>
<node id="6"> *n:Num -> ({ 3 }) </node>
</mrl-parse>
</example>

<example id="555">
<nl lang="en">
Call O4R2 to be the area between distance 20 to 27 from the opponent 's goal line
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NNP O4R2)) (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN area)) (PP (IN between) (NP (NP (NN distance) (QP (CD 20) (TO to) (CD 27))) (PP (IN from) (NP (NP (DT the) (NN opponent) (POS 's)) (NN goal) (NN line)))))))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] O4R2-[Ident:1] to-[Statement:0] be-[Statement:0] the-[Region:2] area-[Region:2] between-[Region:2] distance-[Region:2] 20-[Num:4] to-[Region:2] 27-[Num:5] from-[Region:2] the-[Team:3] opponent-[Team:3] 's-[Team:3] goal-[Region:2] line-[Region:2])
</augsyn>
<mrl lang="robocup-clang">
(definer "O4R2" (from-goal-line opp 20 27))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ O4R2 }) </node>
<node id="2"> *n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) }) </node>
<node id="3"> *n:Team -> ({ opp }) </node>
<node id="4"> *n:Num -> ({ 20 }) </node>
<node id="5"> *n:Num -> ({ 27 }) </node>
</mrl-parse>
</example>

<example id="556">
<nl lang="en">
Let D2R6 be the left midfield
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP D2R6)) (VP (VB be) (NP (DT the) (JJ left) (NN midfield))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] D2R6-[Ident:1] be-[Statement:0] the-[Region:3] left-[Region:2] midfield-[Region:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "D2R6" (left (midfield)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ D2R6 }) </node>
<node id="2"> *n:Region -> ({ ( left *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( midfield ) }) </node>
</mrl-parse>
</example>

<example id="557">
<nl lang="en">
Call the opponent 's left penalty area to be RP12
</nl>
<syn lang="en">
(S (VP (VB Call) (S (NP (NP (DT the) (NN opponent) (POS 's)) (JJ left) (NN penalty) (NN area)) (VP (TO to) (VP (VB be) (NP (NNP RP12)))))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Region:2] opponent-[Region:2] 's-[Region:2] left-[Region:2] penalty-[Region:2] area-[Region:2] to-[Statement:0] be-[Statement:0] RP12-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "RP12" (right (penalty-area opp)))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ RP12 }) </node>
<node id="2"> *n:Region -> ({ ( right *n:Region ) }) </node>
<node id="3"> *n:Region -> ({ ( penalty-area *n:Team ) }) </node>
<node id="4"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="558">
<nl lang="en">
Call the opponent 's midfield as Drible_region_6
</nl>
<syn lang="en">
(S (VP (VB Call) (NP (NP (DT the) (NN opponent) (POS 's)) (NN midfield)) (PP (IN as) (NNP Drible_region_6))))
</syn>
<augsyn lang="en">
(S Call-[Statement:0] the-[Team:3] opponent-[Team:3] 's-[Team:3] midfield-[Region:2] as-[Statement:0] Drible_region_6-[Ident:1])
</augsyn>
<mrl lang="robocup-clang">
(definer "Drible_region_6" (midfield opp))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ Drible_region_6 }) </node>
<node id="2"> *n:Region -> ({ ( midfield *n:Team ) }) </node>
<node id="3"> *n:Team -> ({ opp }) </node>
</mrl-parse>
</example>

<example id="559">
<nl lang="en">
Let FarReg6 be the circle within 1 meter from point -LRB- 31 , 5 -RRB-
</nl>
<syn lang="en">
(S (VP (VB Let) (S (NP (NNP FarReg6)) (VP (VB be) (NP (DT the) (NN circle)) (PP (IN within) (NP (NP (CD 1) (NN meter)) (PP (IN from) (NP (NN point) (PRN (-LRB- -LRB-) (NP (CD 31)) (, ,) (NP (CD 5)) (-RRB- -RRB-))))))))))
</syn>
<augsyn lang="en">
(S Let-[Statement:0] FarReg6-[Ident:1] be-[Statement:0] the-[Region:2] circle-[Region:2] within-[Region:2] 1-[Num:6] meter-[Region:2] from-[Region:2] point-[Point:3] -LRB--[Point:3] 31-[Num:4] ,-[Point:3] 5-[Num:5] -RRB--[Point:3])
</augsyn>
<mrl lang="robocup-clang">
(definer "FarReg6" (circle (pt 31 5) 1))
</mrl>
<mrl-parse>
<node id="0"> *n:Statement -> ({ ( definer " *n:Ident " *n:Region ) }) </node>
<node id="1"> *n:Ident -> ({ FarReg6 }) </node>
<node id="2"> *n:Region -> ({ ( circle *n:Point *n:Num ) }) </node>
<node id="3"> *n:Point -> ({ ( pt *n:Num *n:Num ) }) </node>
<node id="4"> *n:Num -> ({ 31 }) </node>
<node id="5"> *n:Num -> ({ 5 }) </node>
<node id="6"> *n:Num -> ({ 1 }) </node>
</mrl-parse>
</example>

</examples>
