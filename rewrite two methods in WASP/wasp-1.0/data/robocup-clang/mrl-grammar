*n:Action -> ({ ( pos *n:Region ) })
*n:Action -> ({ ( home *n:Region ) })
*n:Action -> ({ ( mark *n:Player ) })
*n:Action -> ({ ( markl *n:Region ) })
*n:Action -> ({ ( markl *n:Player ) })
*n:Action -> ({ ( oline *n:Region ) })
*n:Action -> ({ ( htype *n:Num ) })
*n:Action -> ({ ( pass *n:Region ) })
*n:Action -> ({ ( pass *n:Player ) })
*n:Action -> ({ ( dribble *n:Region ) })
*n:Action -> ({ ( clear *n:Region ) })
*n:Action -> ({ ( shoot ) })
*n:Action -> ({ ( hold ) })
*n:Action -> ({ ( intercept ) })
*n:Action -> ({ ( tackle *n:Player ) })
*n:Condition -> ({ " *n:Ident " }) zero-fertility
*n:Condition -> ({ ( true ) })
*n:Condition -> ({ ( false ) })
*n:Condition -> ({ ( ppos *n:Player *n:Unum *n:Unum *n:Region ) })
*n:Condition -> ({ ( bpos *n:Region ) })
*n:Condition -> ({ ( bowner *n:Player ) })
*n:Condition -> ({ ( playm bko ) })
*n:Condition -> ({ ( playm time_over ) })
*n:Condition -> ({ ( playm play_on ) })
*n:Condition -> ({ ( playm ko_our ) })
*n:Condition -> ({ ( playm ko_opp ) })
*n:Condition -> ({ ( playm ki_our ) })
*n:Condition -> ({ ( playm ki_opp ) })
*n:Condition -> ({ ( playm fk_our ) })
*n:Condition -> ({ ( playm fk_opp ) })
*n:Condition -> ({ ( playm ck_our ) })
*n:Condition -> ({ ( playm ck_opp ) })
*n:Condition -> ({ ( playm gk_our ) })
*n:Condition -> ({ ( playm gk_opp ) })
*n:Condition -> ({ ( playm gc_our ) })
*n:Condition -> ({ ( playm gc_opp ) })
*n:Condition -> ({ ( playm ag_our ) })
*n:Condition -> ({ ( playm ag_opp ) })
*n:Condition -> ({ ( < *n:Ident *n:Ident ) })
*n:Condition -> ({ ( < *n:Ident *n:Num ) })
*n:Condition -> ({ ( < *n:Num *n:Ident ) })
*n:Condition -> ({ ( < *n:Num *n:Num ) })
*n:Condition -> ({ ( > *n:Ident *n:Ident ) })
*n:Condition -> ({ ( > *n:Ident *n:Num ) })
*n:Condition -> ({ ( > *n:Num *n:Ident ) })
*n:Condition -> ({ ( > *n:Num *n:Num ) })
*n:Condition -> ({ ( <= *n:Ident *n:Ident ) })
*n:Condition -> ({ ( <= *n:Ident *n:Num ) })
*n:Condition -> ({ ( <= *n:Num *n:Ident ) })
*n:Condition -> ({ ( <= *n:Num *n:Num ) })
*n:Condition -> ({ ( == *n:Ident *n:Ident ) })
*n:Condition -> ({ ( == *n:Ident *n:Num ) })
*n:Condition -> ({ ( == *n:Num *n:Ident ) })
*n:Condition -> ({ ( == *n:Num *n:Num ) })
*n:Condition -> ({ ( != *n:Ident *n:Ident ) })
*n:Condition -> ({ ( != *n:Ident *n:Num ) })
*n:Condition -> ({ ( != *n:Num *n:Ident ) })
*n:Condition -> ({ ( != *n:Num *n:Num ) })
*n:Condition -> ({ ( >= *n:Ident *n:Ident ) })
*n:Condition -> ({ ( >= *n:Ident *n:Num ) })
*n:Condition -> ({ ( >= *n:Num *n:Ident ) })
*n:Condition -> ({ ( >= *n:Num *n:Num ) })
*n:Condition -> ({ ( and *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( and *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( or *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( or *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition *n:Condition ) }) reorder-args 0
*n:Condition -> ({ ( not *n:Condition ) })
*n:Condition -> ({ ( ppos-any *n:Player *n:Region ) })
*n:Condition -> ({ ( ppos-none our *n:Region ) })
*n:Condition -> ({ ( ppos-none opp *n:Region ) })
*n:Directive -> ({ ( do *n:Player *n:Action ) })
*n:Directive -> ({ ( do *n:Player *n:Action *n:Action ) }) reorder-args 1
*n:Directive -> ({ ( do *n:Player *n:Action *n:Action *n:Action ) }) reorder-args 1
*n:Directive -> ({ ( dont *n:Player *n:Action ) })
*n:Ident -> ({ *t:Ident })
*n:Num -> ({ *t:Num })
*n:Player -> ({ *^:Player })
*n:Player -> ({ ( player our { *n:Unum } ) })
*n:Player -> ({ ( player our { *n:Unum *n:Unum } ) }) reorder-args 0
*n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum } ) }) reorder-args 0
*n:Player -> ({ ( player our { *n:Unum *n:Unum *n:Unum *n:Unum } ) }) reorder-args 0
*n:Player -> ({ ( player opp { *n:Unum } ) })
*n:Player -> ({ ( player our { 0 } ) })
*n:Player -> ({ ( player opp { 0 } ) })
*n:Player -> ({ ( player our { X } ) })
*n:Player -> ({ ( player opp { X } ) })
*n:Player -> ({ ( player-range our *n:Unum *n:Unum ) })
*n:Player -> ({ ( player-range opp *n:Unum *n:Unum ) })
*n:Player -> ({ ( player-except our { *n:Unum } ) })
*n:Player -> ({ ( player-except opp { *n:Unum } ) })
*n:Point -> ({ ( pt *n:Num *n:Num ) })
*n:Point -> ({ ( pt ball ) })
*n:Point -> ({ ( pt *n:Player ) })
*n:Point -> ({ ( *n:Point + *n:Point ) }) reorder-args 0
*n:Point -> ({ ( *n:Point - *n:Point ) })
*n:Point -> ({ ( *n:Point * *n:Point ) }) reorder-args 0
*n:Point -> ({ ( *n:Point / *n:Point ) })
*n:Point -> ({ ( pt-with-ball-attraction *n:Point *n:Point ) })
*n:Point -> ({ ( front-of-goal *n:Team ) })
*n:Point -> ({ ( from-goal *n:Team *n:Num ) })
*n:Region -> ({ " *n:Ident " }) zero-fertility
*n:Region -> ({ *n:Point })
*n:Region -> ({ ( rec *n:Point *n:Point ) }) reorder-args 0
*n:Region -> ({ ( tri *n:Point *n:Point *n:Point ) }) reorder-args 0
*n:Region -> ({ ( arc *n:Point *n:Num *n:Num *n:Num *n:Num ) })
*n:Region -> ({ ( null ) })
*n:Region -> ({ ( reg *n:Region *n:Region ) }) reorder-args 0
*n:Region -> ({ ( circle *n:Point *n:Num ) })
*n:Region -> ({ ( field ) })
*n:Region -> ({ ( half *n:Team ) })
*n:Region -> ({ ( penalty-area *n:Team ) })
*n:Region -> ({ ( goal-area *n:Team ) })
*n:Region -> ({ ( midfield ) })
*n:Region -> ({ ( midfield *n:Team ) })
*n:Region -> ({ ( near-goal-line *n:Team ) })
*n:Region -> ({ ( from-goal-line *n:Team *n:Num *n:Num ) })
*n:Region -> ({ ( left *n:Region ) })
*n:Region -> ({ ( right *n:Region ) })
*n:Region -> ({ ( left-quarter *n:Region ) })
*n:Region -> ({ ( right-quarter *n:Region ) })
*n:Region -> ({ ( reg-exclude *n:Region *n:Region ) })
*n:Rule -> ({ ( *n:Condition *n:Directive ) })
*n:Statement -> ({ *n:Rule })
*n:Statement -> ({ ( definec " *n:Ident " *n:Condition ) })
*n:Statement -> ({ ( definer " *n:Ident " *n:Region ) })
*n:Team -> ({ our })
*n:Team -> ({ opp })
*n:Unum -> ({ *t:Unum })
